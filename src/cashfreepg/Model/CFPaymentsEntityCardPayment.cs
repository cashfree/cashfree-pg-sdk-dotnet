/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFPaymentsEntityCardPayment
    /// </summary>
    [DataContract(Name = "CFPaymentsEntityCardPayment")]
    public partial class CFPaymentsEntityCardPayment : IEquatable<CFPaymentsEntityCardPayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntityCardPayment" /> class.
        /// </summary>
        /// <param name="channel">channel.</param>
        /// <param name="cardNumber">cardNumber.</param>
        /// <param name="cardNetwork">cardNetwork.</param>
        /// <param name="cardType">cardType.</param>
        /// <param name="cardCountry">cardCountry.</param>
        /// <param name="cardBankName">cardBankName.</param>
        public CFPaymentsEntityCardPayment(string channel = "link", string? cardNumber = default(string?), string? cardNetwork = default(string?), string? cardType = default(string?), string? cardCountry = default(string?), string? cardBankName = default(string?))
        {
            this.Channel = channel;
            this.CardNumber = cardNumber;
            this.CardNetwork = cardNetwork;
            this.CardType = cardType;
            this.CardCountry = cardCountry;
            this.CardBankName = cardBankName;
        }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name = "card_number", EmitDefaultValue = false)]
        public string? CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardNetwork
        /// </summary>
        [DataMember(Name = "card_network", EmitDefaultValue = false)]
        public string? CardNetwork { get; set; }

        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name = "card_type", EmitDefaultValue = false)]
        public string? CardType { get; set; }

        /// <summary>
        /// Gets or Sets CardCountry
        /// </summary>
        [DataMember(Name = "card_country", EmitDefaultValue = false)]
        public string? CardCountry { get; set; }

        /// <summary>
        /// Gets or Sets CardBankName
        /// </summary>
        [DataMember(Name = "card_bank_name", EmitDefaultValue = false)]
        public string? CardBankName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFPaymentsEntityCardPayment {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardNetwork: ").Append(CardNetwork).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CardCountry: ").Append(CardCountry).Append("\n");
            sb.Append("  CardBankName: ").Append(CardBankName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFPaymentsEntityCardPayment);
        }

        /// <summary>
        /// Returns true if CFPaymentsEntityCardPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of CFPaymentsEntityCardPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFPaymentsEntityCardPayment? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CardNetwork == input.CardNetwork ||
                    (this.CardNetwork != null &&
                    this.CardNetwork.Equals(input.CardNetwork))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.CardCountry == input.CardCountry ||
                    (this.CardCountry != null &&
                    this.CardCountry.Equals(input.CardCountry))
                ) && 
                (
                    this.CardBankName == input.CardBankName ||
                    (this.CardBankName != null &&
                    this.CardBankName.Equals(input.CardBankName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Channel != null)
                {
                    hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                }
                if (this.CardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CardNumber.GetHashCode();
                }
                if (this.CardNetwork != null)
                {
                    hashCode = (hashCode * 59) + this.CardNetwork.GetHashCode();
                }
                if (this.CardType != null)
                {
                    hashCode = (hashCode * 59) + this.CardType.GetHashCode();
                }
                if (this.CardCountry != null)
                {
                    hashCode = (hashCode * 59) + this.CardCountry.GetHashCode();
                }
                if (this.CardBankName != null)
                {
                    hashCode = (hashCode * 59) + this.CardBankName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
