/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFAuthorizationRequest
    /// </summary>
    [DataContract(Name = "CFAuthorizationRequest")]
    public partial class CFAuthorizationRequest : IEquatable<CFAuthorizationRequest>, IValidatableObject
    {
        /// <summary>
        /// Type of authorization to run. Can be one of &#39;CAPTURE&#39; , &#39;VOID&#39;
        /// </summary>
        /// <value>Type of authorization to run. Can be one of &#39;CAPTURE&#39; , &#39;VOID&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum CAPTURE for value: CAPTURE
            /// </summary>
            [EnumMember(Value = "CAPTURE")]
            CAPTURE = 1,

            /// <summary>
            /// Enum VOID for value: VOID
            /// </summary>
            [EnumMember(Value = "VOID")]
            VOID = 2

        }


        /// <summary>
        /// Type of authorization to run. Can be one of &#39;CAPTURE&#39; , &#39;VOID&#39;
        /// </summary>
        /// <value>Type of authorization to run. Can be one of &#39;CAPTURE&#39; , &#39;VOID&#39;</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public string? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFAuthorizationRequest" /> class.
        /// </summary>
        /// <param name="action">Type of authorization to run. Can be one of &#39;CAPTURE&#39; , &#39;VOID&#39;.</param>
        /// <param name="amount">The amount if you are running a &#39;CAPTURE&#39;.</param>
        public CFAuthorizationRequest(string? action = default(string?), decimal amount = default(decimal))
        {
            this.Action = action;
            this.Amount = amount;
        }

        /// <summary>
        /// The amount if you are running a &#39;CAPTURE&#39;
        /// </summary>
        /// <value>The amount if you are running a &#39;CAPTURE&#39;</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFAuthorizationRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFAuthorizationRequest);
        }

        /// <summary>
        /// Returns true if CFAuthorizationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CFAuthorizationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFAuthorizationRequest? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
