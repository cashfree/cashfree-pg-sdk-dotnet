/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFPaymentsEntity
    /// </summary>
    [DataContract(Name = "CFPaymentsEntity")]
    public partial class CFPaymentsEntity : IEquatable<CFPaymentsEntity>, IValidatableObject
    {
        /// <summary>
        /// The transaction status can be one of  [\&quot;SUCCESS\&quot;, \&quot;NOT_ATTEMPTED\&quot;, \&quot;FAILED\&quot;, \&quot;USER_DROPPED\&quot;, \&quot;VOID\&quot;, \&quot;CANCELLED\&quot;, \&quot;PENDING\&quot;]
        /// </summary>
        /// <value>The transaction status can be one of  [\&quot;SUCCESS\&quot;, \&quot;NOT_ATTEMPTED\&quot;, \&quot;FAILED\&quot;, \&quot;USER_DROPPED\&quot;, \&quot;VOID\&quot;, \&quot;CANCELLED\&quot;, \&quot;PENDING\&quot;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,

            /// <summary>
            /// Enum NOTATTEMPTED for value: NOT_ATTEMPTED
            /// </summary>
            [EnumMember(Value = "NOT_ATTEMPTED")]
            NOTATTEMPTED = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum USERDROPPED for value: USER_DROPPED
            /// </summary>
            [EnumMember(Value = "USER_DROPPED")]
            USERDROPPED = 4,

            /// <summary>
            /// Enum VOID for value: VOID
            /// </summary>
            [EnumMember(Value = "VOID")]
            VOID = 5,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 6,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 7

        }


        /// <summary>
        /// The transaction status can be one of  [\&quot;SUCCESS\&quot;, \&quot;NOT_ATTEMPTED\&quot;, \&quot;FAILED\&quot;, \&quot;USER_DROPPED\&quot;, \&quot;VOID\&quot;, \&quot;CANCELLED\&quot;, \&quot;PENDING\&quot;]
        /// </summary>
        /// <value>The transaction status can be one of  [\&quot;SUCCESS\&quot;, \&quot;NOT_ATTEMPTED\&quot;, \&quot;FAILED\&quot;, \&quot;USER_DROPPED\&quot;, \&quot;VOID\&quot;, \&quot;CANCELLED\&quot;, \&quot;PENDING\&quot;]</value>
        [DataMember(Name = "payment_status", EmitDefaultValue = false)]
        public PaymentStatusEnum? PaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntity" /> class.
        /// </summary>
        /// <param name="cfPaymentId">cfPaymentId.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="entity">entity.</param>
        /// <param name="isCaptured">isCaptured.</param>
        /// <param name="orderAmount">Order amount can be different from payment amount if you collect service fee from the customer.</param>
        /// <param name="paymentGroup">Type of payment group. One of [&#39;upi&#39;, &#39;card&#39;, &#39;app&#39;, &#39;netbanking&#39;, &#39;paylater&#39;, &#39;cardless_emi&#39;].</param>
        /// <param name="paymentCurrency">paymentCurrency.</param>
        /// <param name="paymentAmount">paymentAmount.</param>
        /// <param name="paymentTime">paymentTime.</param>
        /// <param name="paymentStatus">The transaction status can be one of  [\&quot;SUCCESS\&quot;, \&quot;NOT_ATTEMPTED\&quot;, \&quot;FAILED\&quot;, \&quot;USER_DROPPED\&quot;, \&quot;VOID\&quot;, \&quot;CANCELLED\&quot;, \&quot;PENDING\&quot;].</param>
        /// <param name="paymentMessage">paymentMessage.</param>
        /// <param name="bankReference">bankReference.</param>
        /// <param name="authId">authId.</param>
        /// <param name="authorization">authorization.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        public CFPaymentsEntity(int? cfPaymentId = default(int?), string? orderId = default(string?), string? entity = default(string?), bool? isCaptured = default(bool?), decimal? orderAmount = default(decimal?), string? paymentGroup = default(string?), string? paymentCurrency = default(string?), decimal? paymentAmount = default(decimal?), string? paymentTime = default(string?), PaymentStatusEnum? paymentStatus = default(PaymentStatusEnum?), string? paymentMessage = default(string?), string? bankReference = default(string?), string? authId = default(string?), CFAuthorizationInPaymentsEntity? authorization = default(CFAuthorizationInPaymentsEntity?), CFPaymentsEntityPayment? paymentMethod = default(CFPaymentsEntityPayment?))
        {
            this.CfPaymentId = cfPaymentId;
            this.OrderId = orderId;
            this.Entity = entity;
            this.IsCaptured = isCaptured;
            this.OrderAmount = orderAmount;
            this.PaymentGroup = paymentGroup;
            this.PaymentCurrency = paymentCurrency;
            this.PaymentAmount = paymentAmount;
            this.PaymentTime = paymentTime;
            this.PaymentStatus = paymentStatus;
            this.PaymentMessage = paymentMessage;
            this.BankReference = bankReference;
            this.AuthId = authId;
            this.Authorization = authorization;
            this.PaymentMethod = paymentMethod;
        }

        /// <summary>
        /// Gets or Sets CfPaymentId
        /// </summary>
        [DataMember(Name = "cf_payment_id", EmitDefaultValue = false)]
        public int? CfPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string? Entity { get; set; }

        /// <summary>
        /// Gets or Sets IsCaptured
        /// </summary>
        [DataMember(Name = "is_captured", EmitDefaultValue = true)]
        public bool? IsCaptured { get; set; }

        /// <summary>
        /// Order amount can be different from payment amount if you collect service fee from the customer
        /// </summary>
        /// <value>Order amount can be different from payment amount if you collect service fee from the customer</value>
        [DataMember(Name = "order_amount", EmitDefaultValue = false)]
        public decimal? OrderAmount { get; set; }

        /// <summary>
        /// Type of payment group. One of [&#39;upi&#39;, &#39;card&#39;, &#39;app&#39;, &#39;netbanking&#39;, &#39;paylater&#39;, &#39;cardless_emi&#39;]
        /// </summary>
        /// <value>Type of payment group. One of [&#39;upi&#39;, &#39;card&#39;, &#39;app&#39;, &#39;netbanking&#39;, &#39;paylater&#39;, &#39;cardless_emi&#39;]</value>
        [DataMember(Name = "payment_group", EmitDefaultValue = false)]
        public string? PaymentGroup { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCurrency
        /// </summary>
        [DataMember(Name = "payment_currency", EmitDefaultValue = false)]
        public string? PaymentCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAmount
        /// </summary>
        [DataMember(Name = "payment_amount", EmitDefaultValue = false)]
        public decimal? PaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTime
        /// </summary>
        [DataMember(Name = "payment_time", EmitDefaultValue = false)]
        public string? PaymentTime { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMessage
        /// </summary>
        [DataMember(Name = "payment_message", EmitDefaultValue = false)]
        public string? PaymentMessage { get; set; }

        /// <summary>
        /// Gets or Sets BankReference
        /// </summary>
        [DataMember(Name = "bank_reference", EmitDefaultValue = false)]
        public string? BankReference { get; set; }

        /// <summary>
        /// Gets or Sets AuthId
        /// </summary>
        [DataMember(Name = "auth_id", EmitDefaultValue = false)]
        public string? AuthId { get; set; }

        /// <summary>
        /// Gets or Sets Authorization
        /// </summary>
        [DataMember(Name = "authorization", EmitDefaultValue = false)]
        public CFAuthorizationInPaymentsEntity? Authorization { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public CFPaymentsEntityPayment? PaymentMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFPaymentsEntity {\n");
            sb.Append("  CfPaymentId: ").Append(CfPaymentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  IsCaptured: ").Append(IsCaptured).Append("\n");
            sb.Append("  OrderAmount: ").Append(OrderAmount).Append("\n");
            sb.Append("  PaymentGroup: ").Append(PaymentGroup).Append("\n");
            sb.Append("  PaymentCurrency: ").Append(PaymentCurrency).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  PaymentTime: ").Append(PaymentTime).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  PaymentMessage: ").Append(PaymentMessage).Append("\n");
            sb.Append("  BankReference: ").Append(BankReference).Append("\n");
            sb.Append("  AuthId: ").Append(AuthId).Append("\n");
            sb.Append("  Authorization: ").Append(Authorization).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFPaymentsEntity);
        }

        /// <summary>
        /// Returns true if CFPaymentsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of CFPaymentsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFPaymentsEntity? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CfPaymentId == input.CfPaymentId ||
                    this.CfPaymentId.Equals(input.CfPaymentId)
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.IsCaptured == input.IsCaptured ||
                    this.IsCaptured.Equals(input.IsCaptured)
                ) && 
                (
                    this.OrderAmount == input.OrderAmount ||
                    this.OrderAmount.Equals(input.OrderAmount)
                ) && 
                (
                    this.PaymentGroup == input.PaymentGroup ||
                    (this.PaymentGroup != null &&
                    this.PaymentGroup.Equals(input.PaymentGroup))
                ) && 
                (
                    this.PaymentCurrency == input.PaymentCurrency ||
                    (this.PaymentCurrency != null &&
                    this.PaymentCurrency.Equals(input.PaymentCurrency))
                ) && 
                (
                    this.PaymentAmount == input.PaymentAmount ||
                    this.PaymentAmount.Equals(input.PaymentAmount)
                ) && 
                (
                    this.PaymentTime == input.PaymentTime ||
                    (this.PaymentTime != null &&
                    this.PaymentTime.Equals(input.PaymentTime))
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    this.PaymentStatus.Equals(input.PaymentStatus)
                ) && 
                (
                    this.PaymentMessage == input.PaymentMessage ||
                    (this.PaymentMessage != null &&
                    this.PaymentMessage.Equals(input.PaymentMessage))
                ) && 
                (
                    this.BankReference == input.BankReference ||
                    (this.BankReference != null &&
                    this.BankReference.Equals(input.BankReference))
                ) && 
                (
                    this.AuthId == input.AuthId ||
                    (this.AuthId != null &&
                    this.AuthId.Equals(input.AuthId))
                ) && 
                (
                    this.Authorization == input.Authorization ||
                    (this.Authorization != null &&
                    this.Authorization.Equals(input.Authorization))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CfPaymentId.GetHashCode();
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCaptured.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderAmount.GetHashCode();
                if (this.PaymentGroup != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentGroup.GetHashCode();
                }
                if (this.PaymentCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentAmount.GetHashCode();
                if (this.PaymentTime != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentStatus.GetHashCode();
                if (this.PaymentMessage != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMessage.GetHashCode();
                }
                if (this.BankReference != null)
                {
                    hashCode = (hashCode * 59) + this.BankReference.GetHashCode();
                }
                if (this.AuthId != null)
                {
                    hashCode = (hashCode * 59) + this.AuthId.GetHashCode();
                }
                if (this.Authorization != null)
                {
                    hashCode = (hashCode * 59) + this.Authorization.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
