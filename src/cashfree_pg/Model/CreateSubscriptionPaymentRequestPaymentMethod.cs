/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;
using System.Reflection;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Payment method. Can be one of [\&quot;upi\&quot;, \&quot;enach\&quot;, \&quot;pnach\&quot;, \&quot;card\&quot;]
    /// </summary>
    [JsonConverter(typeof(CreateSubscriptionPaymentRequestPaymentMethodJsonConverter))]
    [DataContract(Name = "CreateSubscriptionPaymentRequest_payment_method")]
    public class CreateSubscriptionPaymentRequestPaymentMethod : AbstractOpenAPISchema, IEquatable<CreateSubscriptionPaymentRequestPaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionPaymentRequestPaymentMethod" /> class
        /// with the <see cref="CreateSubscriptonPaymentRequestUpi" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CreateSubscriptonPaymentRequestUpi.</param>
        public CreateSubscriptionPaymentRequestPaymentMethod(CreateSubscriptonPaymentRequestUpi actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionPaymentRequestPaymentMethod" /> class
        /// with the <see cref="CreateSubscriptionPaymentRequestEnack" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CreateSubscriptionPaymentRequestEnack.</param>
        public CreateSubscriptionPaymentRequestPaymentMethod(CreateSubscriptionPaymentRequestEnack actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionPaymentRequestPaymentMethod" /> class
        /// with the <see cref="CreateSubscriptionPaymentRequestPnach" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CreateSubscriptionPaymentRequestPnach.</param>
        public CreateSubscriptionPaymentRequestPaymentMethod(CreateSubscriptionPaymentRequestPnach actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionPaymentRequestPaymentMethod" /> class
        /// with the <see cref="CreateSubscriptionPaymentRequestCard" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CreateSubscriptionPaymentRequestCard.</param>
        public CreateSubscriptionPaymentRequestPaymentMethod(CreateSubscriptionPaymentRequestCard actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CreateSubscriptionPaymentRequestCard))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CreateSubscriptionPaymentRequestEnack))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CreateSubscriptionPaymentRequestPnach))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CreateSubscriptonPaymentRequestUpi))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CreateSubscriptionPaymentRequestCard, CreateSubscriptionPaymentRequestEnack, CreateSubscriptionPaymentRequestPnach, CreateSubscriptonPaymentRequestUpi");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `CreateSubscriptonPaymentRequestUpi`. If the actual instance is not `CreateSubscriptonPaymentRequestUpi`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CreateSubscriptonPaymentRequestUpi</returns>
        public CreateSubscriptonPaymentRequestUpi GetCreateSubscriptonPaymentRequestUpi()
        {
            return (CreateSubscriptonPaymentRequestUpi)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CreateSubscriptionPaymentRequestEnack`. If the actual instance is not `CreateSubscriptionPaymentRequestEnack`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CreateSubscriptionPaymentRequestEnack</returns>
        public CreateSubscriptionPaymentRequestEnack GetCreateSubscriptionPaymentRequestEnack()
        {
            return (CreateSubscriptionPaymentRequestEnack)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CreateSubscriptionPaymentRequestPnach`. If the actual instance is not `CreateSubscriptionPaymentRequestPnach`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CreateSubscriptionPaymentRequestPnach</returns>
        public CreateSubscriptionPaymentRequestPnach GetCreateSubscriptionPaymentRequestPnach()
        {
            return (CreateSubscriptionPaymentRequestPnach)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CreateSubscriptionPaymentRequestCard`. If the actual instance is not `CreateSubscriptionPaymentRequestCard`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CreateSubscriptionPaymentRequestCard</returns>
        public CreateSubscriptionPaymentRequestCard GetCreateSubscriptionPaymentRequestCard()
        {
            return (CreateSubscriptionPaymentRequestCard)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSubscriptionPaymentRequestPaymentMethod {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CreateSubscriptionPaymentRequestPaymentMethod.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CreateSubscriptionPaymentRequestPaymentMethod
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CreateSubscriptionPaymentRequestPaymentMethod</returns>
        public static CreateSubscriptionPaymentRequestPaymentMethod FromJson(string jsonString)
        {
            CreateSubscriptionPaymentRequestPaymentMethod newCreateSubscriptionPaymentRequestPaymentMethod = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCreateSubscriptionPaymentRequestPaymentMethod;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();
            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CreateSubscriptionPaymentRequestCard).GetProperty("AdditionalProperties") == null)
                {
                    if(CreateSubscriptionPaymentRequestCard.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptionPaymentRequestCard>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                else
                {
                    if(CreateSubscriptionPaymentRequestCard.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptionPaymentRequestCard>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                matchedTypes.Add("CreateSubscriptionPaymentRequestCard");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CreateSubscriptionPaymentRequestCard: {1}", jsonString, exception.ToString()));
            }
            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CreateSubscriptionPaymentRequestEnack).GetProperty("AdditionalProperties") == null)
                {
                    if(CreateSubscriptionPaymentRequestEnack.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptionPaymentRequestEnack>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                else
                {
                    if(CreateSubscriptionPaymentRequestEnack.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptionPaymentRequestEnack>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                matchedTypes.Add("CreateSubscriptionPaymentRequestEnack");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CreateSubscriptionPaymentRequestEnack: {1}", jsonString, exception.ToString()));
            }
            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CreateSubscriptionPaymentRequestPnach).GetProperty("AdditionalProperties") == null)
                {
                    if(CreateSubscriptionPaymentRequestPnach.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptionPaymentRequestPnach>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                else
                {
                    if(CreateSubscriptionPaymentRequestPnach.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptionPaymentRequestPnach>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                matchedTypes.Add("CreateSubscriptionPaymentRequestPnach");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CreateSubscriptionPaymentRequestPnach: {1}", jsonString, exception.ToString()));
            }
            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CreateSubscriptonPaymentRequestUpi).GetProperty("AdditionalProperties") == null)
                {
                    if(CreateSubscriptonPaymentRequestUpi.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptonPaymentRequestUpi>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                else
                {
                    if(CreateSubscriptonPaymentRequestUpi.checkPresenceOfKey(jsonString)) {
                        dynamic data = JsonConvert.DeserializeObject<CreateSubscriptonPaymentRequestUpi>(jsonString, CreateSubscriptionPaymentRequestPaymentMethod.AdditionalPropertiesSerializerSettings);
                        newCreateSubscriptionPaymentRequestPaymentMethod = new CreateSubscriptionPaymentRequestPaymentMethod(data);
                        return newCreateSubscriptionPaymentRequestPaymentMethod;
                    }
                }
                matchedTypes.Add("CreateSubscriptonPaymentRequestUpi");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CreateSubscriptonPaymentRequestUpi: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCreateSubscriptionPaymentRequestPaymentMethod;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubscriptionPaymentRequestPaymentMethod);
        }

        /// <summary>
        /// Returns true if CreateSubscriptionPaymentRequestPaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubscriptionPaymentRequestPaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscriptionPaymentRequestPaymentMethod input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CreateSubscriptionPaymentRequestPaymentMethod
    /// </summary>
    public class CreateSubscriptionPaymentRequestPaymentMethodJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CreateSubscriptionPaymentRequestPaymentMethod).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return CreateSubscriptionPaymentRequestPaymentMethod.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
