/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// SplitOrderReconSuccessResponseVendorsInner
    /// </summary>
    [DataContract(Name = "SplitOrderReconSuccessResponse_vendors_inner")]
    public class SplitOrderReconSuccessResponseVendorsInner : IEquatable<SplitOrderReconSuccessResponseVendorsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitOrderReconSuccessResponseVendorsInner" /> class.
        /// </summary>
        /// <param name="vendorId">Unique identifier for the vendor..</param>
        /// <param name="settlementId">Settlement ID associated with the vendor..</param>
        /// <param name="settlementAmount">Settlement amount allocated to the vendor..</param>
        /// <param name="settlementEligibilityDate">Date and time when the vendor is eligible for the settlement..</param>
        public SplitOrderReconSuccessResponseVendorsInner(string? vendorId = default(string?), long? settlementId = default(long?), decimal? settlementAmount = default(decimal?), DateTime? settlementEligibilityDate = default(DateTime?))
        {
            this.vendor_id = vendorId;
            this.settlement_id = settlementId;
            this.settlement_amount = settlementAmount;
            this.settlement_eligibility_date = settlementEligibilityDate;
        }

        /// <summary>
        /// Unique identifier for the vendor.
        /// </summary>
        /// <value>Unique identifier for the vendor.</value>
        [DataMember(Name = "vendor_id", EmitDefaultValue = false)]
        public string? vendor_id { get; set; }

        /// <summary>
        /// Settlement ID associated with the vendor.
        /// </summary>
        /// <value>Settlement ID associated with the vendor.</value>
        [DataMember(Name = "settlement_id", EmitDefaultValue = false)]
        public long? settlement_id { get; set; }

        /// <summary>
        /// Settlement amount allocated to the vendor.
        /// </summary>
        /// <value>Settlement amount allocated to the vendor.</value>
        [DataMember(Name = "settlement_amount", EmitDefaultValue = false)]
        public decimal? settlement_amount { get; set; }

        /// <summary>
        /// Date and time when the vendor is eligible for the settlement.
        /// </summary>
        /// <value>Date and time when the vendor is eligible for the settlement.</value>
        [DataMember(Name = "settlement_eligibility_date", EmitDefaultValue = false)]
        public DateTime? settlement_eligibility_date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SplitOrderReconSuccessResponseVendorsInner {\n");
            sb.Append("  vendor_id: ").Append(vendor_id).Append("\n");
            sb.Append("  settlement_id: ").Append(settlement_id).Append("\n");
            sb.Append("  settlement_amount: ").Append(settlement_amount).Append("\n");
            sb.Append("  settlement_eligibility_date: ").Append(settlement_eligibility_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitOrderReconSuccessResponseVendorsInner);
        }

        /// <summary>
        /// Returns true if SplitOrderReconSuccessResponseVendorsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitOrderReconSuccessResponseVendorsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitOrderReconSuccessResponseVendorsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.vendor_id == input.vendor_id ||
                    (this.vendor_id != null &&
                    this.vendor_id.Equals(input.vendor_id))
                ) && 
                (
                    this.settlement_id == input.settlement_id ||
                    this.settlement_id.Equals(input.settlement_id)
                ) && 
                (
                    this.settlement_amount == input.settlement_amount ||
                    this.settlement_amount.Equals(input.settlement_amount)
                ) && 
                (
                    this.settlement_eligibility_date == input.settlement_eligibility_date ||
                    (this.settlement_eligibility_date != null &&
                    this.settlement_eligibility_date.Equals(input.settlement_eligibility_date))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringvendor_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringvendor_id);
            if (deserializedJsonString.ContainsKey("vendor_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.vendor_id != null)
                {
                    hashCode = (hashCode * 59) + this.vendor_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.settlement_id.GetHashCode();
                hashCode = (hashCode * 59) + this.settlement_amount.GetHashCode();
                if (this.settlement_eligibility_date != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_eligibility_date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
