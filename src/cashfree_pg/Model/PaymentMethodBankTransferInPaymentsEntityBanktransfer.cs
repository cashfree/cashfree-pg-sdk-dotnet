/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// PaymentMethodBankTransferInPaymentsEntityBanktransfer
    /// </summary>
    [DataContract(Name = "PaymentMethodBankTransferInPaymentsEntity_banktransfer")]
    public class PaymentMethodBankTransferInPaymentsEntityBanktransfer : IEquatable<PaymentMethodBankTransferInPaymentsEntityBanktransfer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodBankTransferInPaymentsEntityBanktransfer" /> class.
        /// </summary>
        /// <param name="channel">channel.</param>
        /// <param name="banktransferBankName">banktransferBankName.</param>
        /// <param name="banktransferIfsc">banktransferIfsc.</param>
        /// <param name="banktransferAccountNumber">banktransferAccountNumber.</param>
        public PaymentMethodBankTransferInPaymentsEntityBanktransfer(string? channel = default(string?), string? banktransferBankName = default(string?), string? banktransferIfsc = default(string?), string? banktransferAccountNumber = default(string?))
        {
            this.channel = channel;
            this.banktransfer_bank_name = banktransferBankName;
            this.banktransfer_ifsc = banktransferIfsc;
            this.banktransfer_account_number = banktransferAccountNumber;
        }

        /// <summary>
        /// Gets or Sets channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string? channel { get; set; }

        /// <summary>
        /// Gets or Sets banktransfer_bank_name
        /// </summary>
        [DataMember(Name = "banktransfer_bank_name", EmitDefaultValue = false)]
        public string? banktransfer_bank_name { get; set; }

        /// <summary>
        /// Gets or Sets banktransfer_ifsc
        /// </summary>
        [DataMember(Name = "banktransfer_ifsc", EmitDefaultValue = false)]
        public string? banktransfer_ifsc { get; set; }

        /// <summary>
        /// Gets or Sets banktransfer_account_number
        /// </summary>
        [DataMember(Name = "banktransfer_account_number", EmitDefaultValue = false)]
        public string? banktransfer_account_number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodBankTransferInPaymentsEntityBanktransfer {\n");
            sb.Append("  channel: ").Append(channel).Append("\n");
            sb.Append("  banktransfer_bank_name: ").Append(banktransfer_bank_name).Append("\n");
            sb.Append("  banktransfer_ifsc: ").Append(banktransfer_ifsc).Append("\n");
            sb.Append("  banktransfer_account_number: ").Append(banktransfer_account_number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethodBankTransferInPaymentsEntityBanktransfer);
        }

        /// <summary>
        /// Returns true if PaymentMethodBankTransferInPaymentsEntityBanktransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethodBankTransferInPaymentsEntityBanktransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodBankTransferInPaymentsEntityBanktransfer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.channel == input.channel ||
                    (this.channel != null &&
                    this.channel.Equals(input.channel))
                ) && 
                (
                    this.banktransfer_bank_name == input.banktransfer_bank_name ||
                    (this.banktransfer_bank_name != null &&
                    this.banktransfer_bank_name.Equals(input.banktransfer_bank_name))
                ) && 
                (
                    this.banktransfer_ifsc == input.banktransfer_ifsc ||
                    (this.banktransfer_ifsc != null &&
                    this.banktransfer_ifsc.Equals(input.banktransfer_ifsc))
                ) && 
                (
                    this.banktransfer_account_number == input.banktransfer_account_number ||
                    (this.banktransfer_account_number != null &&
                    this.banktransfer_account_number.Equals(input.banktransfer_account_number))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringchannel) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringchannel);
            if (deserializedJsonString.ContainsKey("channel")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.channel != null)
                {
                    hashCode = (hashCode * 59) + this.channel.GetHashCode();
                }
                if (this.banktransfer_bank_name != null)
                {
                    hashCode = (hashCode * 59) + this.banktransfer_bank_name.GetHashCode();
                }
                if (this.banktransfer_ifsc != null)
                {
                    hashCode = (hashCode * 59) + this.banktransfer_ifsc.GetHashCode();
                }
                if (this.banktransfer_account_number != null)
                {
                    hashCode = (hashCode * 59) + this.banktransfer_account_number.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
