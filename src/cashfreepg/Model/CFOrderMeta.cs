/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFOrderMeta
    /// </summary>
    [DataContract(Name = "CFOrderMeta")]
    public partial class CFOrderMeta : IEquatable<CFOrderMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFOrderMeta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CFOrderMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFOrderMeta" /> class.
        /// </summary>
        /// <param name="returnUrl">The URL to which user will be redirected to after the payment on bank OTP page. Maximum length: 250. (required).</param>
        /// <param name="notifyUrl">Notification URL for server-server communication. Useful when user&#39;s connection drops while re-directing. NotifyUrl should be an https URL. Maximum length: 250. (required).</param>
        /// <param name="paymentMethods">Allowed payment modes for this order. Pass comma-separated values among following options - \&quot;cc\&quot;, \&quot;dc\&quot;, \&quot;ccc\&quot;, \&quot;ppc\&quot;, \&quot;nb\&quot;, \&quot;upi\&quot;, \&quot;paypal\&quot;, \&quot;app\&quot;. Leave it blank to show all available payment methods (required).</param>
        public CFOrderMeta(string? returnUrl = default(string?), string? notifyUrl = default(string?), string? paymentMethods = default(string?))
        {
            // to ensure "returnUrl" is required (not null)
            if (returnUrl == null) {
                throw new ArgumentNullException("returnUrl is a required property for CFOrderMeta and cannot be null");
            }
            this.ReturnUrl = returnUrl;
            // to ensure "notifyUrl" is required (not null)
            if (notifyUrl == null) {
                throw new ArgumentNullException("notifyUrl is a required property for CFOrderMeta and cannot be null");
            }
            this.NotifyUrl = notifyUrl;
            // to ensure "paymentMethods" is required (not null)
            this.PaymentMethods = paymentMethods;
        }

        /// <summary>
        /// The URL to which user will be redirected to after the payment on bank OTP page. Maximum length: 250.
        /// </summary>
        /// <value>The URL to which user will be redirected to after the payment on bank OTP page. Maximum length: 250.</value>
        [DataMember(Name = "return_url", IsRequired = true, EmitDefaultValue = false)]
        public string? ReturnUrl { get; set; }

        /// <summary>
        /// Notification URL for server-server communication. Useful when user&#39;s connection drops while re-directing. NotifyUrl should be an https URL. Maximum length: 250.
        /// </summary>
        /// <value>Notification URL for server-server communication. Useful when user&#39;s connection drops while re-directing. NotifyUrl should be an https URL. Maximum length: 250.</value>
        [DataMember(Name = "notify_url", IsRequired = true, EmitDefaultValue = false)]
        public string? NotifyUrl { get; set; }

        /// <summary>
        /// Allowed payment modes for this order. Pass comma-separated values among following options - \&quot;cc\&quot;, \&quot;dc\&quot;, \&quot;ccc\&quot;, \&quot;ppc\&quot;, \&quot;nb\&quot;, \&quot;upi\&quot;, \&quot;paypal\&quot;, \&quot;app\&quot;. Leave it blank to show all available payment methods
        /// </summary>
        /// <value>Allowed payment modes for this order. Pass comma-separated values among following options - \&quot;cc\&quot;, \&quot;dc\&quot;, \&quot;ccc\&quot;, \&quot;ppc\&quot;, \&quot;nb\&quot;, \&quot;upi\&quot;, \&quot;paypal\&quot;, \&quot;app\&quot;. Leave it blank to show all available payment methods</value>
        [DataMember(Name = "payment_methods", IsRequired = false, EmitDefaultValue = false)]
        public string? PaymentMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFOrderMeta {\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFOrderMeta);
        }

        /// <summary>
        /// Returns true if CFOrderMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of CFOrderMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFOrderMeta? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.NotifyUrl == input.NotifyUrl ||
                    (this.NotifyUrl != null &&
                    this.NotifyUrl.Equals(input.NotifyUrl))
                ) && 
                (
                    this.PaymentMethods == input.PaymentMethods ||
                    (this.PaymentMethods != null &&
                    this.PaymentMethods.Equals(input.PaymentMethods))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReturnUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnUrl.GetHashCode();
                }
                if (this.NotifyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.NotifyUrl.GetHashCode();
                }
                if (this.PaymentMethods != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethods.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
