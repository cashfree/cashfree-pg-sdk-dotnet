/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Payment method for card emi
    /// </summary>
    [DataContract(Name = "CardEMI")]
    public class CardEMI : IEquatable<CardEMI>, IValidatableObject
    {
        /// <summary>
        /// Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\&quot;hdfc, \&quot;kotak\&quot;, \&quot;icici\&quot;, \&quot;rbl\&quot;, \&quot;bob\&quot;, \&quot;standard chartered\&quot;, \&quot;axis\&quot;, \&quot;au\&quot;, \&quot;yes\&quot;, \&quot;sbi\&quot;, \&quot;fed\&quot;, \&quot;hsbc\&quot;, \&quot;citi\&quot;, \&quot;amex\&quot;]
        /// </summary>
        /// <value>Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\&quot;hdfc, \&quot;kotak\&quot;, \&quot;icici\&quot;, \&quot;rbl\&quot;, \&quot;bob\&quot;, \&quot;standard chartered\&quot;, \&quot;axis\&quot;, \&quot;au\&quot;, \&quot;yes\&quot;, \&quot;sbi\&quot;, \&quot;fed\&quot;, \&quot;hsbc\&quot;, \&quot;citi\&quot;, \&quot;amex\&quot;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardBankNameEnum
        {
            /// <summary>
            /// Enum Hdfc for value: hdfc
            /// </summary>
            [EnumMember(Value = "hdfc")]
            Hdfc = 1,

            /// <summary>
            /// Enum Kotak for value: kotak
            /// </summary>
            [EnumMember(Value = "kotak")]
            Kotak = 2,

            /// <summary>
            /// Enum Icici for value: icici
            /// </summary>
            [EnumMember(Value = "icici")]
            Icici = 3,

            /// <summary>
            /// Enum Rbl for value: rbl
            /// </summary>
            [EnumMember(Value = "rbl")]
            Rbl = 4,

            /// <summary>
            /// Enum Bob for value: bob
            /// </summary>
            [EnumMember(Value = "bob")]
            Bob = 5,

            /// <summary>
            /// Enum StandardChartered for value: standard chartered
            /// </summary>
            [EnumMember(Value = "standard chartered")]
            StandardChartered = 6,

            /// <summary>
            /// Enum Axis for value: axis
            /// </summary>
            [EnumMember(Value = "axis")]
            Axis = 7,

            /// <summary>
            /// Enum Au for value: au
            /// </summary>
            [EnumMember(Value = "au")]
            Au = 8,

            /// <summary>
            /// Enum Yes for value: yes
            /// </summary>
            [EnumMember(Value = "yes")]
            Yes = 9,

            /// <summary>
            /// Enum Sbi for value: sbi
            /// </summary>
            [EnumMember(Value = "sbi")]
            Sbi = 10,

            /// <summary>
            /// Enum Fed for value: fed
            /// </summary>
            [EnumMember(Value = "fed")]
            Fed = 11,

            /// <summary>
            /// Enum Hsbc for value: hsbc
            /// </summary>
            [EnumMember(Value = "hsbc")]
            Hsbc = 12,

            /// <summary>
            /// Enum Citi for value: citi
            /// </summary>
            [EnumMember(Value = "citi")]
            Citi = 13,

            /// <summary>
            /// Enum Amex for value: amex
            /// </summary>
            [EnumMember(Value = "amex")]
            Amex = 14
        }


        /// <summary>
        /// Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\&quot;hdfc, \&quot;kotak\&quot;, \&quot;icici\&quot;, \&quot;rbl\&quot;, \&quot;bob\&quot;, \&quot;standard chartered\&quot;, \&quot;axis\&quot;, \&quot;au\&quot;, \&quot;yes\&quot;, \&quot;sbi\&quot;, \&quot;fed\&quot;, \&quot;hsbc\&quot;, \&quot;citi\&quot;, \&quot;amex\&quot;]
        /// </summary>
        /// <value>Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\&quot;hdfc, \&quot;kotak\&quot;, \&quot;icici\&quot;, \&quot;rbl\&quot;, \&quot;bob\&quot;, \&quot;standard chartered\&quot;, \&quot;axis\&quot;, \&quot;au\&quot;, \&quot;yes\&quot;, \&quot;sbi\&quot;, \&quot;fed\&quot;, \&quot;hsbc\&quot;, \&quot;citi\&quot;, \&quot;amex\&quot;]</value>
        [DataMember(Name = "card_bank_name", IsRequired = true, EmitDefaultValue = true)]
        public CardBankNameEnum card_bank_name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardEMI" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardEMI() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardEMI" /> class.
        /// </summary>
        /// <param name="channel">The channel for card payments will always be \&quot;link\&quot; (required).</param>
        /// <param name="cardNumber">Customer card number. (required).</param>
        /// <param name="cardHolderName">Customer name mentioned on the card..</param>
        /// <param name="cardExpiryMm">Card expiry month. (required).</param>
        /// <param name="cardExpiryYy">Card expiry year. (required).</param>
        /// <param name="cardCvv">CVV mentioned on the card. (required).</param>
        /// <param name="cardAlias">Card alias as returned by Cashfree Vault API.</param>
        /// <param name="cardBankName">Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of [\&quot;hdfc, \&quot;kotak\&quot;, \&quot;icici\&quot;, \&quot;rbl\&quot;, \&quot;bob\&quot;, \&quot;standard chartered\&quot;, \&quot;axis\&quot;, \&quot;au\&quot;, \&quot;yes\&quot;, \&quot;sbi\&quot;, \&quot;fed\&quot;, \&quot;hsbc\&quot;, \&quot;citi\&quot;, \&quot;amex\&quot;] (required).</param>
        /// <param name="emiTenure">EMI tenure selected by the user (required).</param>
        public CardEMI(string channel = default(string), string cardNumber = default(string), string? cardHolderName = default(string?), string cardExpiryMm = default(string), string cardExpiryYy = default(string), string cardCvv = default(string), string? cardAlias = default(string?), CardBankNameEnum cardBankName = default(CardBankNameEnum), int emiTenure = default(int))
        {
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new ArgumentNullException("channel is a required property for CardEMI and cannot be null");
            }
            this.channel = channel;
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new ArgumentNullException("cardNumber is a required property for CardEMI and cannot be null");
            }
            this.card_number = cardNumber;
            // to ensure "cardExpiryMm" is required (not null)
            if (cardExpiryMm == null)
            {
                throw new ArgumentNullException("cardExpiryMm is a required property for CardEMI and cannot be null");
            }
            this.card_expiry_mm = cardExpiryMm;
            // to ensure "cardExpiryYy" is required (not null)
            if (cardExpiryYy == null)
            {
                throw new ArgumentNullException("cardExpiryYy is a required property for CardEMI and cannot be null");
            }
            this.card_expiry_yy = cardExpiryYy;
            // to ensure "cardCvv" is required (not null)
            if (cardCvv == null)
            {
                throw new ArgumentNullException("cardCvv is a required property for CardEMI and cannot be null");
            }
            this.card_cvv = cardCvv;
            this.card_bank_name = cardBankName;
            this.emi_tenure = emiTenure;
            this.card_holder_name = cardHolderName;
            this.card_alias = cardAlias;
        }

        /// <summary>
        /// The channel for card payments will always be \&quot;link\&quot;
        /// </summary>
        /// <value>The channel for card payments will always be \&quot;link\&quot;</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public string channel { get; set; }

        /// <summary>
        /// Customer card number.
        /// </summary>
        /// <value>Customer card number.</value>
        [DataMember(Name = "card_number", IsRequired = true, EmitDefaultValue = true)]
        public string card_number { get; set; }

        /// <summary>
        /// Customer name mentioned on the card.
        /// </summary>
        /// <value>Customer name mentioned on the card.</value>
        [DataMember(Name = "card_holder_name", EmitDefaultValue = false)]
        public string? card_holder_name { get; set; }

        /// <summary>
        /// Card expiry month.
        /// </summary>
        /// <value>Card expiry month.</value>
        [DataMember(Name = "card_expiry_mm", IsRequired = true, EmitDefaultValue = true)]
        public string card_expiry_mm { get; set; }

        /// <summary>
        /// Card expiry year.
        /// </summary>
        /// <value>Card expiry year.</value>
        [DataMember(Name = "card_expiry_yy", IsRequired = true, EmitDefaultValue = true)]
        public string card_expiry_yy { get; set; }

        /// <summary>
        /// CVV mentioned on the card.
        /// </summary>
        /// <value>CVV mentioned on the card.</value>
        [DataMember(Name = "card_cvv", IsRequired = true, EmitDefaultValue = true)]
        public string card_cvv { get; set; }

        /// <summary>
        /// Card alias as returned by Cashfree Vault API
        /// </summary>
        /// <value>Card alias as returned by Cashfree Vault API</value>
        [DataMember(Name = "card_alias", EmitDefaultValue = false)]
        public string? card_alias { get; set; }

        /// <summary>
        /// EMI tenure selected by the user
        /// </summary>
        /// <value>EMI tenure selected by the user</value>
        [DataMember(Name = "emi_tenure", IsRequired = true, EmitDefaultValue = true)]
        public int emi_tenure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardEMI {\n");
            sb.Append("  channel: ").Append(channel).Append("\n");
            sb.Append("  card_number: ").Append(card_number).Append("\n");
            sb.Append("  card_holder_name: ").Append(card_holder_name).Append("\n");
            sb.Append("  card_expiry_mm: ").Append(card_expiry_mm).Append("\n");
            sb.Append("  card_expiry_yy: ").Append(card_expiry_yy).Append("\n");
            sb.Append("  card_cvv: ").Append(card_cvv).Append("\n");
            sb.Append("  card_alias: ").Append(card_alias).Append("\n");
            sb.Append("  card_bank_name: ").Append(card_bank_name).Append("\n");
            sb.Append("  emi_tenure: ").Append(emi_tenure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardEMI);
        }

        /// <summary>
        /// Returns true if CardEMI instances are equal
        /// </summary>
        /// <param name="input">Instance of CardEMI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardEMI input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.channel == input.channel ||
                    (this.channel != null &&
                    this.channel.Equals(input.channel))
                ) && 
                (
                    this.card_number == input.card_number ||
                    (this.card_number != null &&
                    this.card_number.Equals(input.card_number))
                ) && 
                (
                    this.card_holder_name == input.card_holder_name ||
                    (this.card_holder_name != null &&
                    this.card_holder_name.Equals(input.card_holder_name))
                ) && 
                (
                    this.card_expiry_mm == input.card_expiry_mm ||
                    (this.card_expiry_mm != null &&
                    this.card_expiry_mm.Equals(input.card_expiry_mm))
                ) && 
                (
                    this.card_expiry_yy == input.card_expiry_yy ||
                    (this.card_expiry_yy != null &&
                    this.card_expiry_yy.Equals(input.card_expiry_yy))
                ) && 
                (
                    this.card_cvv == input.card_cvv ||
                    (this.card_cvv != null &&
                    this.card_cvv.Equals(input.card_cvv))
                ) && 
                (
                    this.card_alias == input.card_alias ||
                    (this.card_alias != null &&
                    this.card_alias.Equals(input.card_alias))
                ) && 
                (
                    this.card_bank_name == input.card_bank_name ||
                    this.card_bank_name.Equals(input.card_bank_name)
                ) && 
                (
                    this.emi_tenure == input.emi_tenure ||
                    this.emi_tenure.Equals(input.emi_tenure)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringchannel) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringchannel);
            if (deserializedJsonString.ContainsKey("channel")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.channel != null)
                {
                    hashCode = (hashCode * 59) + this.channel.GetHashCode();
                }
                if (this.card_number != null)
                {
                    hashCode = (hashCode * 59) + this.card_number.GetHashCode();
                }
                if (this.card_holder_name != null)
                {
                    hashCode = (hashCode * 59) + this.card_holder_name.GetHashCode();
                }
                if (this.card_expiry_mm != null)
                {
                    hashCode = (hashCode * 59) + this.card_expiry_mm.GetHashCode();
                }
                if (this.card_expiry_yy != null)
                {
                    hashCode = (hashCode * 59) + this.card_expiry_yy.GetHashCode();
                }
                if (this.card_cvv != null)
                {
                    hashCode = (hashCode * 59) + this.card_cvv.GetHashCode();
                }
                if (this.card_alias != null)
                {
                    hashCode = (hashCode * 59) + this.card_alias.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.card_bank_name.GetHashCode();
                hashCode = (hashCode * 59) + this.emi_tenure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
