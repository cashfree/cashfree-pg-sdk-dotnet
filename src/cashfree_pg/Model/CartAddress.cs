/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Address given for cart details.
    /// </summary>
    [DataContract(Name = "CartAddress")]
    public class CartAddress : IEquatable<CartAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartAddress" /> class.
        /// </summary>
        /// <param name="fullName">fullName.</param>
        /// <param name="country">country.</param>
        /// <param name="city">city.</param>
        /// <param name="state">state.</param>
        /// <param name="pincode">pincode.</param>
        /// <param name="address1">address1.</param>
        /// <param name="address2">address2.</param>
        public CartAddress(string? fullName = default(string?), string? country = default(string?), string? city = default(string?), string? state = default(string?), string? pincode = default(string?), string? address1 = default(string?), string? address2 = default(string?))
        {
            this.full_name = fullName;
            this.country = country;
            this.city = city;
            this.state = state;
            this.pincode = pincode;
            this.address_1 = address1;
            this.address_2 = address2;
        }

        /// <summary>
        /// Gets or Sets full_name
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = false)]
        public string? full_name { get; set; }

        /// <summary>
        /// Gets or Sets country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string? country { get; set; }

        /// <summary>
        /// Gets or Sets city
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string? city { get; set; }

        /// <summary>
        /// Gets or Sets state
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string? state { get; set; }

        /// <summary>
        /// Gets or Sets pincode
        /// </summary>
        [DataMember(Name = "pincode", EmitDefaultValue = false)]
        public string? pincode { get; set; }

        /// <summary>
        /// Gets or Sets address_1
        /// </summary>
        [DataMember(Name = "address_1", EmitDefaultValue = false)]
        public string? address_1 { get; set; }

        /// <summary>
        /// Gets or Sets address_2
        /// </summary>
        [DataMember(Name = "address_2", EmitDefaultValue = false)]
        public string? address_2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartAddress {\n");
            sb.Append("  full_name: ").Append(full_name).Append("\n");
            sb.Append("  country: ").Append(country).Append("\n");
            sb.Append("  city: ").Append(city).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  pincode: ").Append(pincode).Append("\n");
            sb.Append("  address_1: ").Append(address_1).Append("\n");
            sb.Append("  address_2: ").Append(address_2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartAddress);
        }

        /// <summary>
        /// Returns true if CartAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CartAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.full_name == input.full_name ||
                    (this.full_name != null &&
                    this.full_name.Equals(input.full_name))
                ) && 
                (
                    this.country == input.country ||
                    (this.country != null &&
                    this.country.Equals(input.country))
                ) && 
                (
                    this.city == input.city ||
                    (this.city != null &&
                    this.city.Equals(input.city))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.pincode == input.pincode ||
                    (this.pincode != null &&
                    this.pincode.Equals(input.pincode))
                ) && 
                (
                    this.address_1 == input.address_1 ||
                    (this.address_1 != null &&
                    this.address_1.Equals(input.address_1))
                ) && 
                (
                    this.address_2 == input.address_2 ||
                    (this.address_2 != null &&
                    this.address_2.Equals(input.address_2))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringfull_name) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringfull_name);
            if (deserializedJsonString.ContainsKey("full_name")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.full_name != null)
                {
                    hashCode = (hashCode * 59) + this.full_name.GetHashCode();
                }
                if (this.country != null)
                {
                    hashCode = (hashCode * 59) + this.country.GetHashCode();
                }
                if (this.city != null)
                {
                    hashCode = (hashCode * 59) + this.city.GetHashCode();
                }
                if (this.state != null)
                {
                    hashCode = (hashCode * 59) + this.state.GetHashCode();
                }
                if (this.pincode != null)
                {
                    hashCode = (hashCode * 59) + this.pincode.GetHashCode();
                }
                if (this.address_1 != null)
                {
                    hashCode = (hashCode * 59) + this.address_1.GetHashCode();
                }
                if (this.address_2 != null)
                {
                    hashCode = (hashCode * 59) + this.address_2.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
