/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// payment method enach.
    /// </summary>
    [DataContract(Name = "CreateSubscriptionPaymentRequestEnack")]
    public class CreateSubscriptionPaymentRequestEnack : IEquatable<CreateSubscriptionPaymentRequestEnack>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionPaymentRequestEnack" /> class.
        /// </summary>
        /// <param name="channel">Channel. can be link.</param>
        /// <param name="authMode">Authentication mode. can be debit_card, aadhaar, or net_banking.</param>
        /// <param name="accountHolderName">Account holder name.</param>
        /// <param name="accountNumber">Account number.</param>
        /// <param name="accountBankCode">Account bank code (required without AccountIFSC).</param>
        /// <param name="accountType">Account type.</param>
        /// <param name="accountIfsc">Account IFSC.</param>
        public CreateSubscriptionPaymentRequestEnack(string? channel = default(string?), string? authMode = default(string?), string? accountHolderName = default(string?), string? accountNumber = default(string?), string? accountBankCode = default(string?), string? accountType = default(string?), string? accountIfsc = default(string?))
        {
            this.channel = channel;
            this.auth_mode = authMode;
            this.account_holder_name = accountHolderName;
            this.account_number = accountNumber;
            this.account_bank_code = accountBankCode;
            this.account_type = accountType;
            this.account_ifsc = accountIfsc;
        }

        /// <summary>
        /// Channel. can be link
        /// </summary>
        /// <value>Channel. can be link</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string? channel { get; set; }

        /// <summary>
        /// Authentication mode. can be debit_card, aadhaar, or net_banking
        /// </summary>
        /// <value>Authentication mode. can be debit_card, aadhaar, or net_banking</value>
        [DataMember(Name = "auth_mode", EmitDefaultValue = false)]
        public string? auth_mode { get; set; }

        /// <summary>
        /// Account holder name
        /// </summary>
        /// <value>Account holder name</value>
        [DataMember(Name = "account_holder_name", EmitDefaultValue = false)]
        public string? account_holder_name { get; set; }

        /// <summary>
        /// Account number
        /// </summary>
        /// <value>Account number</value>
        [DataMember(Name = "account_number", EmitDefaultValue = false)]
        public string? account_number { get; set; }

        /// <summary>
        /// Account bank code (required without AccountIFSC)
        /// </summary>
        /// <value>Account bank code (required without AccountIFSC)</value>
        [DataMember(Name = "account_bank_code", EmitDefaultValue = false)]
        public string? account_bank_code { get; set; }

        /// <summary>
        /// Account type
        /// </summary>
        /// <value>Account type</value>
        [DataMember(Name = "account_type", EmitDefaultValue = false)]
        public string? account_type { get; set; }

        /// <summary>
        /// Account IFSC
        /// </summary>
        /// <value>Account IFSC</value>
        [DataMember(Name = "account_ifsc", EmitDefaultValue = false)]
        public string? account_ifsc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSubscriptionPaymentRequestEnack {\n");
            sb.Append("  channel: ").Append(channel).Append("\n");
            sb.Append("  auth_mode: ").Append(auth_mode).Append("\n");
            sb.Append("  account_holder_name: ").Append(account_holder_name).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  account_bank_code: ").Append(account_bank_code).Append("\n");
            sb.Append("  account_type: ").Append(account_type).Append("\n");
            sb.Append("  account_ifsc: ").Append(account_ifsc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubscriptionPaymentRequestEnack);
        }

        /// <summary>
        /// Returns true if CreateSubscriptionPaymentRequestEnack instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubscriptionPaymentRequestEnack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscriptionPaymentRequestEnack input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.channel == input.channel ||
                    (this.channel != null &&
                    this.channel.Equals(input.channel))
                ) && 
                (
                    this.auth_mode == input.auth_mode ||
                    (this.auth_mode != null &&
                    this.auth_mode.Equals(input.auth_mode))
                ) && 
                (
                    this.account_holder_name == input.account_holder_name ||
                    (this.account_holder_name != null &&
                    this.account_holder_name.Equals(input.account_holder_name))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.account_bank_code == input.account_bank_code ||
                    (this.account_bank_code != null &&
                    this.account_bank_code.Equals(input.account_bank_code))
                ) && 
                (
                    this.account_type == input.account_type ||
                    (this.account_type != null &&
                    this.account_type.Equals(input.account_type))
                ) && 
                (
                    this.account_ifsc == input.account_ifsc ||
                    (this.account_ifsc != null &&
                    this.account_ifsc.Equals(input.account_ifsc))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringchannel) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringchannel);
            if (deserializedJsonString.ContainsKey("channel")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.channel != null)
                {
                    hashCode = (hashCode * 59) + this.channel.GetHashCode();
                }
                if (this.auth_mode != null)
                {
                    hashCode = (hashCode * 59) + this.auth_mode.GetHashCode();
                }
                if (this.account_holder_name != null)
                {
                    hashCode = (hashCode * 59) + this.account_holder_name.GetHashCode();
                }
                if (this.account_number != null)
                {
                    hashCode = (hashCode * 59) + this.account_number.GetHashCode();
                }
                if (this.account_bank_code != null)
                {
                    hashCode = (hashCode * 59) + this.account_bank_code.GetHashCode();
                }
                if (this.account_type != null)
                {
                    hashCode = (hashCode * 59) + this.account_type.GetHashCode();
                }
                if (this.account_ifsc != null)
                {
                    hashCode = (hashCode * 59) + this.account_ifsc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
