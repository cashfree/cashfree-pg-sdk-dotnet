/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// ScheduleOption
    /// </summary>
    [DataContract(Name = "ScheduleOption")]
    public class ScheduleOption : IEquatable<ScheduleOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleOption" /> class.
        /// </summary>
        /// <param name="settlementScheduleMessage">settlementScheduleMessage.</param>
        /// <param name="scheduleId">scheduleId.</param>
        /// <param name="merchantDefault">merchantDefault.</param>
        public ScheduleOption(string? settlementScheduleMessage = default(string?), decimal? scheduleId = default(decimal?), bool? merchantDefault = default(bool?))
        {
            this.settlement_schedule_message = settlementScheduleMessage;
            this.schedule_id = scheduleId;
            this.merchant_default = merchantDefault;
        }

        /// <summary>
        /// Gets or Sets settlement_schedule_message
        /// </summary>
        [DataMember(Name = "settlement_schedule_message", EmitDefaultValue = false)]
        public string? settlement_schedule_message { get; set; }

        /// <summary>
        /// Gets or Sets schedule_id
        /// </summary>
        [DataMember(Name = "schedule_id", EmitDefaultValue = false)]
        public decimal? schedule_id { get; set; }

        /// <summary>
        /// Gets or Sets merchant_default
        /// </summary>
        [DataMember(Name = "merchant_default", EmitDefaultValue = true)]
        public bool? merchant_default { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleOption {\n");
            sb.Append("  settlement_schedule_message: ").Append(settlement_schedule_message).Append("\n");
            sb.Append("  schedule_id: ").Append(schedule_id).Append("\n");
            sb.Append("  merchant_default: ").Append(merchant_default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleOption);
        }

        /// <summary>
        /// Returns true if ScheduleOption instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleOption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.settlement_schedule_message == input.settlement_schedule_message ||
                    (this.settlement_schedule_message != null &&
                    this.settlement_schedule_message.Equals(input.settlement_schedule_message))
                ) && 
                (
                    this.schedule_id == input.schedule_id ||
                    this.schedule_id.Equals(input.schedule_id)
                ) && 
                (
                    this.merchant_default == input.merchant_default ||
                    this.merchant_default.Equals(input.merchant_default)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringsettlement_schedule_message) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringsettlement_schedule_message);
            if (deserializedJsonString.ContainsKey("settlement_schedule_message")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.settlement_schedule_message != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_schedule_message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.schedule_id.GetHashCode();
                hashCode = (hashCode * 59) + this.merchant_default.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
