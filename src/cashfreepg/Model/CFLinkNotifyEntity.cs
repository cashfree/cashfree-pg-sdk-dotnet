/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFLinkNotifyEntity
    /// </summary>
    [DataContract(Name = "CFLinkNotifyEntity")]
    public partial class CFLinkNotifyEntity : IEquatable<CFLinkNotifyEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFLinkNotifyEntity" /> class.
        /// </summary>
        /// <param name="sendSms">If \&quot;true\&quot;, Cashfree will send sms on customer_phone.</param>
        /// <param name="sendEmail">If \&quot;true\&quot;, Cashfree will send email on customer_email.</param>
        public CFLinkNotifyEntity(bool sendSms = default(bool), bool sendEmail = default(bool))
        {
            this.SendSms = sendSms;
            this.SendEmail = sendEmail;
        }

        /// <summary>
        /// If \&quot;true\&quot;, Cashfree will send sms on customer_phone
        /// </summary>
        /// <value>If \&quot;true\&quot;, Cashfree will send sms on customer_phone</value>
        [DataMember(Name = "send_sms", EmitDefaultValue = true)]
        public bool SendSms { get; set; }

        /// <summary>
        /// If \&quot;true\&quot;, Cashfree will send email on customer_email
        /// </summary>
        /// <value>If \&quot;true\&quot;, Cashfree will send email on customer_email</value>
        [DataMember(Name = "send_email", EmitDefaultValue = true)]
        public bool SendEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFLinkNotifyEntity {\n");
            sb.Append("  SendSms: ").Append(SendSms).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFLinkNotifyEntity);
        }

        /// <summary>
        /// Returns true if CFLinkNotifyEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of CFLinkNotifyEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFLinkNotifyEntity? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SendSms == input.SendSms ||
                    this.SendSms.Equals(input.SendSms)
                ) && 
                (
                    this.SendEmail == input.SendEmail ||
                    this.SendEmail.Equals(input.SendEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SendSms.GetHashCode();
                hashCode = (hashCode * 59) + this.SendEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
