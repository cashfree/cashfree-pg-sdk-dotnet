/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// UPI payment method for pay api
    /// </summary>
    [DataContract(Name = "PaymentMethodUPIInPaymentsEntity")]
    public class PaymentMethodUPIInPaymentsEntity : IEquatable<PaymentMethodUPIInPaymentsEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodUPIInPaymentsEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMethodUPIInPaymentsEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodUPIInPaymentsEntity" /> class.
        /// </summary>
        /// <param name="channel">channel (required).</param>
        /// <param name="upiId">upiId.</param>
        public PaymentMethodUPIInPaymentsEntity(string channel = default(string), string upiId = default(string))
        {
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new ArgumentNullException("channel is a required property for PaymentMethodUPIInPaymentsEntity and cannot be null");
            }
            this.channel = channel;
            this.upi_id = upiId;
        }

        /// <summary>
        /// Gets or Sets channel
        /// </summary>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public string channel { get; set; }

        /// <summary>
        /// Gets or Sets upi_id
        /// </summary>
        [DataMember(Name = "upi_id", EmitDefaultValue = false)]
        public string upi_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodUPIInPaymentsEntity {\n");
            sb.Append("  channel: ").Append(channel).Append("\n");
            sb.Append("  upi_id: ").Append(upi_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethodUPIInPaymentsEntity);
        }

        /// <summary>
        /// Returns true if PaymentMethodUPIInPaymentsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethodUPIInPaymentsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodUPIInPaymentsEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.channel == input.channel ||
                    (this.channel != null &&
                    this.channel.Equals(input.channel))
                ) && 
                (
                    this.upi_id == input.upi_id ||
                    (this.upi_id != null &&
                    this.upi_id.Equals(input.upi_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.channel != null)
                {
                    hashCode = (hashCode * 59) + this.channel.GetHashCode();
                }
                if (this.upi_id != null)
                {
                    hashCode = (hashCode * 59) + this.upi_id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
