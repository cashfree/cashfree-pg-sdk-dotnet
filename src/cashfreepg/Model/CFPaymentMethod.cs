/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;
using System.Reflection;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFPaymentMethod
    /// </summary>
    [JsonConverter(typeof(CFPaymentMethodJsonConverter))]
    [DataContract(Name = "CFPaymentMethod")]
    public partial class CFPaymentMethod : AbstractOpenAPISchema, IEquatable<CFPaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentMethod" /> class
        /// with the <see cref="CFAppPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFAppPayment.</param>
        public CFPaymentMethod(CFAppPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentMethod" /> class
        /// with the <see cref="CFCardPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFCardPayment.</param>
        public CFPaymentMethod(CFCardPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentMethod" /> class
        /// with the <see cref="CFCardlessEMIPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFCardlessEMIPayment.</param>
        public CFPaymentMethod(CFCardlessEMIPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentMethod" /> class
        /// with the <see cref="CFEMIPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFEMIPayment.</param>
        public CFPaymentMethod(CFEMIPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentMethod" /> class
        /// with the <see cref="CFNetbankingPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFNetbankingPayment.</param>
        public CFPaymentMethod(CFNetbankingPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentMethod" /> class
        /// with the <see cref="CFPaylaterPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFPaylaterPayment.</param>
        public CFPaymentMethod(CFPaylaterPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentMethod" /> class
        /// with the <see cref="CFUPIPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFUPIPayment.</param>
        public CFPaymentMethod(CFUPIPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object? _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object? ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CFAppPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFCardPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFCardlessEMIPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFEMIPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFNetbankingPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFPaylaterPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFUPIPayment))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CFAppPayment, CFCardPayment, CFCardlessEMIPayment, CFEMIPayment, CFNetbankingPayment, CFPaylaterPayment, CFUPIPayment");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `CFAppPayment`. If the actual instance is not `CFAppPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFAppPayment</returns>
        public CFAppPayment? GetCFAppPayment()
        {
            return (CFAppPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFCardPayment`. If the actual instance is not `CFCardPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFCardPayment</returns>
        public CFCardPayment? GetCFCardPayment()
        {
            return (CFCardPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFCardlessEMIPayment`. If the actual instance is not `CFCardlessEMIPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFCardlessEMIPayment</returns>
        public CFCardlessEMIPayment? GetCFCardlessEMIPayment()
        {
            return (CFCardlessEMIPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFEMIPayment`. If the actual instance is not `CFEMIPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFEMIPayment</returns>
        public CFEMIPayment? GetCFEMIPayment()
        {
            return (CFEMIPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFNetbankingPayment`. If the actual instance is not `CFNetbankingPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFNetbankingPayment</returns>
        public CFNetbankingPayment? GetCFNetbankingPayment()
        {
            return (CFNetbankingPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFPaylaterPayment`. If the actual instance is not `CFPaylaterPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFPaylaterPayment</returns>
        public CFPaylaterPayment? GetCFPaylaterPayment()
        {
            return (CFPaylaterPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFUPIPayment`. If the actual instance is not `CFUPIPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFUPIPayment</returns>
        public CFUPIPayment? GetCFUPIPayment()
        {
            return (CFUPIPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CFPaymentMethod {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CFPaymentMethod.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CFPaymentMethod
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CFPaymentMethod</returns>
        public static CFPaymentMethod? FromJson(string jsonString)
        {
            CFPaymentMethod? newCFPaymentMethod = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCFPaymentMethod;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFAppPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFAppPayment>(jsonString, CFPaymentMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFAppPayment>(jsonString, CFPaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFAppPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFAppPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFCardPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFCardPayment>(jsonString, CFPaymentMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFCardPayment>(jsonString, CFPaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFCardPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFCardPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFCardlessEMIPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFCardlessEMIPayment>(jsonString, CFPaymentMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFCardlessEMIPayment>(jsonString, CFPaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFCardlessEMIPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFCardlessEMIPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFEMIPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFEMIPayment>(jsonString, CFPaymentMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFEMIPayment>(jsonString, CFPaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFEMIPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFEMIPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFNetbankingPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFNetbankingPayment>(jsonString, CFPaymentMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFNetbankingPayment>(jsonString, CFPaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFNetbankingPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFNetbankingPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFPaylaterPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFPaylaterPayment>(jsonString, CFPaymentMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFPaylaterPayment>(jsonString, CFPaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFPaylaterPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFPaylaterPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFUPIPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFUPIPayment>(jsonString, CFPaymentMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentMethod = new CFPaymentMethod(JsonConvert.DeserializeObject<CFUPIPayment>(jsonString, CFPaymentMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFUPIPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFUPIPayment: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCFPaymentMethod;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFPaymentMethod);
        }

        /// <summary>
        /// Returns true if CFPaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of CFPaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFPaymentMethod? input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CFPaymentMethod
    /// </summary>
    public class CFPaymentMethodJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CFPaymentMethod).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object? ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return CFPaymentMethod.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
