/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Payment link Notify Object for SMS and Email
    /// </summary>
    [DataContract(Name = "LinkNotifyEntity")]
    public class LinkNotifyEntity : IEquatable<LinkNotifyEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkNotifyEntity" /> class.
        /// </summary>
        /// <param name="sendSms">If \&quot;true\&quot;, Cashfree will send sms on customer_phone.</param>
        /// <param name="sendEmail">If \&quot;true\&quot;, Cashfree will send email on customer_email.</param>
        public LinkNotifyEntity(bool sendSms = default(bool), bool sendEmail = default(bool))
        {
            this.send_sms = sendSms;
            this.send_email = sendEmail;
        }

        /// <summary>
        /// If \&quot;true\&quot;, Cashfree will send sms on customer_phone
        /// </summary>
        /// <value>If \&quot;true\&quot;, Cashfree will send sms on customer_phone</value>
        [DataMember(Name = "send_sms", EmitDefaultValue = true)]
        public bool send_sms { get; set; }

        /// <summary>
        /// If \&quot;true\&quot;, Cashfree will send email on customer_email
        /// </summary>
        /// <value>If \&quot;true\&quot;, Cashfree will send email on customer_email</value>
        [DataMember(Name = "send_email", EmitDefaultValue = true)]
        public bool send_email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkNotifyEntity {\n");
            sb.Append("  send_sms: ").Append(send_sms).Append("\n");
            sb.Append("  send_email: ").Append(send_email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkNotifyEntity);
        }

        /// <summary>
        /// Returns true if LinkNotifyEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkNotifyEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkNotifyEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.send_sms == input.send_sms ||
                    this.send_sms.Equals(input.send_sms)
                ) && 
                (
                    this.send_email == input.send_email ||
                    this.send_email.Equals(input.send_email)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringsend_sms) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringsend_sms);
            if (deserializedJsonString.ContainsKey("send_sms")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.send_sms.GetHashCode();
                hashCode = (hashCode * 59) + this.send_email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
