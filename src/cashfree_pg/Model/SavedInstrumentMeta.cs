/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Card instrument meta information
    /// </summary>
    [DataContract(Name = "SavedInstrumentMeta")]
    public class SavedInstrumentMeta : IEquatable<SavedInstrumentMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SavedInstrumentMeta" /> class.
        /// </summary>
        /// <param name="cardNetwork">card scheme/network of the saved card. Example visa, mastercard.</param>
        /// <param name="cardBankName">Issuing bank name of saved card.</param>
        /// <param name="cardCountry">Issuing country of saved card.</param>
        /// <param name="cardType">Type of saved card.</param>
        /// <param name="cardTokenDetails">cardTokenDetails.</param>
        public SavedInstrumentMeta(string? cardNetwork = default(string?), string? cardBankName = default(string?), string? cardCountry = default(string?), string? cardType = default(string?), Object? cardTokenDetails = default(Object?))
        {
            this.card_network = cardNetwork;
            this.card_bank_name = cardBankName;
            this.card_country = cardCountry;
            this.card_type = cardType;
            this.card_token_details = cardTokenDetails;
        }

        /// <summary>
        /// card scheme/network of the saved card. Example visa, mastercard
        /// </summary>
        /// <value>card scheme/network of the saved card. Example visa, mastercard</value>
        /// <example>VISA</example>
        [DataMember(Name = "card_network", EmitDefaultValue = false)]
        public string? card_network { get; set; }

        /// <summary>
        /// Issuing bank name of saved card
        /// </summary>
        /// <value>Issuing bank name of saved card</value>
        /// <example>HDFC Bank</example>
        [DataMember(Name = "card_bank_name", EmitDefaultValue = false)]
        public string? card_bank_name { get; set; }

        /// <summary>
        /// Issuing country of saved card
        /// </summary>
        /// <value>Issuing country of saved card</value>
        /// <example>IN</example>
        [DataMember(Name = "card_country", EmitDefaultValue = false)]
        public string? card_country { get; set; }

        /// <summary>
        /// Type of saved card
        /// </summary>
        /// <value>Type of saved card</value>
        /// <example>DEBIT_CARD</example>
        [DataMember(Name = "card_type", EmitDefaultValue = false)]
        public string? card_type { get; set; }

        /// <summary>
        /// Gets or Sets card_token_details
        /// </summary>
        /// <example>{&quot;par&quot;:&quot;somepar&quot;,&quot;expiry_month&quot;:&quot;12&quot;,&quot;expiry_year&quot;:&quot;23&quot;}</example>
        [DataMember(Name = "card_token_details", EmitDefaultValue = false)]
        public Object? card_token_details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SavedInstrumentMeta {\n");
            sb.Append("  card_network: ").Append(card_network).Append("\n");
            sb.Append("  card_bank_name: ").Append(card_bank_name).Append("\n");
            sb.Append("  card_country: ").Append(card_country).Append("\n");
            sb.Append("  card_type: ").Append(card_type).Append("\n");
            sb.Append("  card_token_details: ").Append(card_token_details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SavedInstrumentMeta);
        }

        /// <summary>
        /// Returns true if SavedInstrumentMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of SavedInstrumentMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedInstrumentMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.card_network == input.card_network ||
                    (this.card_network != null &&
                    this.card_network.Equals(input.card_network))
                ) && 
                (
                    this.card_bank_name == input.card_bank_name ||
                    (this.card_bank_name != null &&
                    this.card_bank_name.Equals(input.card_bank_name))
                ) && 
                (
                    this.card_country == input.card_country ||
                    (this.card_country != null &&
                    this.card_country.Equals(input.card_country))
                ) && 
                (
                    this.card_type == input.card_type ||
                    (this.card_type != null &&
                    this.card_type.Equals(input.card_type))
                ) && 
                (
                    this.card_token_details == input.card_token_details ||
                    (this.card_token_details != null &&
                    this.card_token_details.Equals(input.card_token_details))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringcard_network) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringcard_network);
            if (deserializedJsonString.ContainsKey("card_network")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.card_network != null)
                {
                    hashCode = (hashCode * 59) + this.card_network.GetHashCode();
                }
                if (this.card_bank_name != null)
                {
                    hashCode = (hashCode * 59) + this.card_bank_name.GetHashCode();
                }
                if (this.card_country != null)
                {
                    hashCode = (hashCode * 59) + this.card_country.GetHashCode();
                }
                if (this.card_type != null)
                {
                    hashCode = (hashCode * 59) + this.card_type.GetHashCode();
                }
                if (this.card_token_details != null)
                {
                    hashCode = (hashCode * 59) + this.card_token_details.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
