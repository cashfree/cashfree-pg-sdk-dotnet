/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFUPIAuthorizeDetails
    /// </summary>
    [DataContract(Name = "CFUPIAuthorizeDetails")]
    public partial class CFUPIAuthorizeDetails : IEquatable<CFUPIAuthorizeDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFUPIAuthorizeDetails" /> class.
        /// </summary>
        /// <param name="approveBy">Time by which this authorization should be approved by the customer..</param>
        /// <param name="startTime">This is the time when the UPI one time mandate will start.</param>
        /// <param name="endTime">This is the time when the UPI mandate will be over. If the mandate has not been executed by this time, the funds will be returned back to the customer after this time..</param>
        public CFUPIAuthorizeDetails(string? approveBy = default(string?), string? startTime = default(string?), string? endTime = default(string?))
        {
            this.ApproveBy = approveBy;
            this.StartTime = startTime;
            this.EndTime = endTime;
        }

        /// <summary>
        /// Time by which this authorization should be approved by the customer.
        /// </summary>
        /// <value>Time by which this authorization should be approved by the customer.</value>
        [DataMember(Name = "approve_by", EmitDefaultValue = false)]
        public string? ApproveBy { get; set; }

        /// <summary>
        /// This is the time when the UPI one time mandate will start
        /// </summary>
        /// <value>This is the time when the UPI one time mandate will start</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string? StartTime { get; set; }

        /// <summary>
        /// This is the time when the UPI mandate will be over. If the mandate has not been executed by this time, the funds will be returned back to the customer after this time.
        /// </summary>
        /// <value>This is the time when the UPI mandate will be over. If the mandate has not been executed by this time, the funds will be returned back to the customer after this time.</value>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public string? EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFUPIAuthorizeDetails {\n");
            sb.Append("  ApproveBy: ").Append(ApproveBy).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFUPIAuthorizeDetails);
        }

        /// <summary>
        /// Returns true if CFUPIAuthorizeDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CFUPIAuthorizeDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFUPIAuthorizeDetails? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApproveBy == input.ApproveBy ||
                    (this.ApproveBy != null &&
                    this.ApproveBy.Equals(input.ApproveBy))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApproveBy != null)
                {
                    hashCode = (hashCode * 59) + this.ApproveBy.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
