/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// netbanking payment method object for pay
    /// </summary>
    [DataContract(Name = "PaymentMethodNetBankingInPaymentsEntity")]
    public class PaymentMethodNetBankingInPaymentsEntity : IEquatable<PaymentMethodNetBankingInPaymentsEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodNetBankingInPaymentsEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMethodNetBankingInPaymentsEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodNetBankingInPaymentsEntity" /> class.
        /// </summary>
        /// <param name="channel">channel (required).</param>
        /// <param name="netbankingBankCode">netbankingBankCode (required).</param>
        /// <param name="netbankingBankName">netbankingBankName (required).</param>
        public PaymentMethodNetBankingInPaymentsEntity(string channel = default(string), int netbankingBankCode = default(int), string netbankingBankName = default(string))
        {
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new ArgumentNullException("channel is a required property for PaymentMethodNetBankingInPaymentsEntity and cannot be null");
            }
            this.channel = channel;
            this.netbanking_bank_code = netbankingBankCode;
            // to ensure "netbankingBankName" is required (not null)
            if (netbankingBankName == null)
            {
                throw new ArgumentNullException("netbankingBankName is a required property for PaymentMethodNetBankingInPaymentsEntity and cannot be null");
            }
            this.netbanking_bank_name = netbankingBankName;
        }

        /// <summary>
        /// Gets or Sets channel
        /// </summary>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public string channel { get; set; }

        /// <summary>
        /// Gets or Sets netbanking_bank_code
        /// </summary>
        [DataMember(Name = "netbanking_bank_code", IsRequired = true, EmitDefaultValue = true)]
        public int netbanking_bank_code { get; set; }

        /// <summary>
        /// Gets or Sets netbanking_bank_name
        /// </summary>
        [DataMember(Name = "netbanking_bank_name", IsRequired = true, EmitDefaultValue = true)]
        public string netbanking_bank_name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethodNetBankingInPaymentsEntity {\n");
            sb.Append("  channel: ").Append(channel).Append("\n");
            sb.Append("  netbanking_bank_code: ").Append(netbanking_bank_code).Append("\n");
            sb.Append("  netbanking_bank_name: ").Append(netbanking_bank_name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethodNetBankingInPaymentsEntity);
        }

        /// <summary>
        /// Returns true if PaymentMethodNetBankingInPaymentsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethodNetBankingInPaymentsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodNetBankingInPaymentsEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.channel == input.channel ||
                    (this.channel != null &&
                    this.channel.Equals(input.channel))
                ) && 
                (
                    this.netbanking_bank_code == input.netbanking_bank_code ||
                    this.netbanking_bank_code.Equals(input.netbanking_bank_code)
                ) && 
                (
                    this.netbanking_bank_name == input.netbanking_bank_name ||
                    (this.netbanking_bank_name != null &&
                    this.netbanking_bank_name.Equals(input.netbanking_bank_name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.channel != null)
                {
                    hashCode = (hashCode * 59) + this.channel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.netbanking_bank_code.GetHashCode();
                if (this.netbanking_bank_name != null)
                {
                    hashCode = (hashCode * 59) + this.netbanking_bank_name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
