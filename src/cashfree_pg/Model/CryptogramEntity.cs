/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Crytogram Card object
    /// </summary>
    [DataContract(Name = "CryptogramEntity")]
    public class CryptogramEntity : IEquatable<CryptogramEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptogramEntity" /> class.
        /// </summary>
        /// <param name="instrumentId">instrument_id of saved instrument.</param>
        /// <param name="tokenRequestorId">TRID issued by card networks.</param>
        /// <param name="cardNumber">token pan number.</param>
        /// <param name="cardExpiryMm">token pan expiry month.</param>
        /// <param name="cardExpiryYy">token pan expiry year.</param>
        /// <param name="cryptogram">cryptogram.</param>
        /// <param name="cardDisplay">last 4 digits of original card number.</param>
        public CryptogramEntity(string instrumentId = default(string), string tokenRequestorId = default(string), string cardNumber = default(string), string cardExpiryMm = default(string), string cardExpiryYy = default(string), string cryptogram = default(string), string cardDisplay = default(string))
        {
            this.instrument_id = instrumentId;
            this.token_requestor_id = tokenRequestorId;
            this.card_number = cardNumber;
            this.card_expiry_mm = cardExpiryMm;
            this.card_expiry_yy = cardExpiryYy;
            this.cryptogram = cryptogram;
            this.card_display = cardDisplay;
        }

        /// <summary>
        /// instrument_id of saved instrument
        /// </summary>
        /// <value>instrument_id of saved instrument</value>
        [DataMember(Name = "instrument_id", EmitDefaultValue = false)]
        public string instrument_id { get; set; }

        /// <summary>
        /// TRID issued by card networks
        /// </summary>
        /// <value>TRID issued by card networks</value>
        [DataMember(Name = "token_requestor_id", EmitDefaultValue = false)]
        public string token_requestor_id { get; set; }

        /// <summary>
        /// token pan number
        /// </summary>
        /// <value>token pan number</value>
        [DataMember(Name = "card_number", EmitDefaultValue = false)]
        public string card_number { get; set; }

        /// <summary>
        /// token pan expiry month
        /// </summary>
        /// <value>token pan expiry month</value>
        [DataMember(Name = "card_expiry_mm", EmitDefaultValue = false)]
        public string card_expiry_mm { get; set; }

        /// <summary>
        /// token pan expiry year
        /// </summary>
        /// <value>token pan expiry year</value>
        [DataMember(Name = "card_expiry_yy", EmitDefaultValue = false)]
        public string card_expiry_yy { get; set; }

        /// <summary>
        /// cryptogram
        /// </summary>
        /// <value>cryptogram</value>
        [DataMember(Name = "cryptogram", EmitDefaultValue = false)]
        public string cryptogram { get; set; }

        /// <summary>
        /// last 4 digits of original card number
        /// </summary>
        /// <value>last 4 digits of original card number</value>
        [DataMember(Name = "card_display", EmitDefaultValue = false)]
        public string card_display { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CryptogramEntity {\n");
            sb.Append("  instrument_id: ").Append(instrument_id).Append("\n");
            sb.Append("  token_requestor_id: ").Append(token_requestor_id).Append("\n");
            sb.Append("  card_number: ").Append(card_number).Append("\n");
            sb.Append("  card_expiry_mm: ").Append(card_expiry_mm).Append("\n");
            sb.Append("  card_expiry_yy: ").Append(card_expiry_yy).Append("\n");
            sb.Append("  cryptogram: ").Append(cryptogram).Append("\n");
            sb.Append("  card_display: ").Append(card_display).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptogramEntity);
        }

        /// <summary>
        /// Returns true if CryptogramEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptogramEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptogramEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.instrument_id == input.instrument_id ||
                    (this.instrument_id != null &&
                    this.instrument_id.Equals(input.instrument_id))
                ) && 
                (
                    this.token_requestor_id == input.token_requestor_id ||
                    (this.token_requestor_id != null &&
                    this.token_requestor_id.Equals(input.token_requestor_id))
                ) && 
                (
                    this.card_number == input.card_number ||
                    (this.card_number != null &&
                    this.card_number.Equals(input.card_number))
                ) && 
                (
                    this.card_expiry_mm == input.card_expiry_mm ||
                    (this.card_expiry_mm != null &&
                    this.card_expiry_mm.Equals(input.card_expiry_mm))
                ) && 
                (
                    this.card_expiry_yy == input.card_expiry_yy ||
                    (this.card_expiry_yy != null &&
                    this.card_expiry_yy.Equals(input.card_expiry_yy))
                ) && 
                (
                    this.cryptogram == input.cryptogram ||
                    (this.cryptogram != null &&
                    this.cryptogram.Equals(input.cryptogram))
                ) && 
                (
                    this.card_display == input.card_display ||
                    (this.card_display != null &&
                    this.card_display.Equals(input.card_display))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringinstrument_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringinstrument_id);
            if (deserializedJsonString.ContainsKey("instrument_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.instrument_id != null)
                {
                    hashCode = (hashCode * 59) + this.instrument_id.GetHashCode();
                }
                if (this.token_requestor_id != null)
                {
                    hashCode = (hashCode * 59) + this.token_requestor_id.GetHashCode();
                }
                if (this.card_number != null)
                {
                    hashCode = (hashCode * 59) + this.card_number.GetHashCode();
                }
                if (this.card_expiry_mm != null)
                {
                    hashCode = (hashCode * 59) + this.card_expiry_mm.GetHashCode();
                }
                if (this.card_expiry_yy != null)
                {
                    hashCode = (hashCode * 59) + this.card_expiry_yy.GetHashCode();
                }
                if (this.cryptogram != null)
                {
                    hashCode = (hashCode * 59) + this.cryptogram.GetHashCode();
                }
                if (this.card_display != null)
                {
                    hashCode = (hashCode * 59) + this.card_display.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
