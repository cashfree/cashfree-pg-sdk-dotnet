/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFCard
    /// </summary>
    [DataContract(Name = "CFCard")]
    public partial class CFCard : IEquatable<CFCard>, IValidatableObject
    {
        /// <summary>
        /// One of [\&quot;Kotak\&quot;, \&quot;ICICI\&quot;, \&quot;RBL\&quot;, \&quot;BOB\&quot;, \&quot;Standard Chartered\&quot;]. Card bank name, required for EMI payments. This is the bank user has selected for EMI
        /// </summary>
        /// <value>One of [\&quot;Kotak\&quot;, \&quot;ICICI\&quot;, \&quot;RBL\&quot;, \&quot;BOB\&quot;, \&quot;Standard Chartered\&quot;]. Card bank name, required for EMI payments. This is the bank user has selected for EMI</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardBankNameEnum
        {
            /// <summary>
            /// Enum Kotak for value: Kotak
            /// </summary>
            [EnumMember(Value = "Kotak")]
            Kotak = 1,

            /// <summary>
            /// Enum ICICI for value: ICICI
            /// </summary>
            [EnumMember(Value = "ICICI")]
            ICICI = 2,

            /// <summary>
            /// Enum RBL for value: RBL
            /// </summary>
            [EnumMember(Value = "RBL")]
            RBL = 3,

            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 4,

            /// <summary>
            /// Enum StandardChartered for value: Standard Chartered
            /// </summary>
            [EnumMember(Value = "Standard Chartered")]
            StandardChartered = 5

        }


        /// <summary>
        /// One of [\&quot;Kotak\&quot;, \&quot;ICICI\&quot;, \&quot;RBL\&quot;, \&quot;BOB\&quot;, \&quot;Standard Chartered\&quot;]. Card bank name, required for EMI payments. This is the bank user has selected for EMI
        /// </summary>
        /// <value>One of [\&quot;Kotak\&quot;, \&quot;ICICI\&quot;, \&quot;RBL\&quot;, \&quot;BOB\&quot;, \&quot;Standard Chartered\&quot;]. Card bank name, required for EMI payments. This is the bank user has selected for EMI</value>
        [DataMember(Name = "card_bank_name", IsRequired = true, EmitDefaultValue = false)]
        public CardBankNameEnum? CardBankName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CFCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFCard" /> class.
        /// </summary>
        /// <param name="channel">The channel for card payments will always be \&quot;link\&quot; (required).</param>
        /// <param name="cardNumber">Customer card number for plain card transactions. Token pan number for tokenized card transactions. (required).</param>
        /// <param name="cardHolderName">Customer name mentioned on the card. (required).</param>
        /// <param name="cardExpiryMm">Card expiry month for plain card transactions. Token expiry month for tokenized card transactions. (required).</param>
        /// <param name="cardExpiryYy">Card expiry year for plain card transactions. Token expiry year for tokenized card transactions. (required).</param>
        /// <param name="cardCvv">CVV mentioned on the card. (required).</param>
        /// <param name="instrumentId">instrument id of saved card. Required only to make payment using saved instrument. (required).</param>
        /// <param name="cryptogram">cryptogram received from card network. Required only for tokenized card transactions. (required).</param>
        /// <param name="tokenRequestorId">TRID issued by card networks. Required only for tokenized card transactions. (required).</param>
        /// <param name="cardDisplay">last 4 digits of original card number. Required only for tokenized card transactions. (required).</param>
        /// <param name="cardAlias">Card alias as returned by Cashfree Vault API. (required).</param>
        /// <param name="cardBankName">One of [\&quot;Kotak\&quot;, \&quot;ICICI\&quot;, \&quot;RBL\&quot;, \&quot;BOB\&quot;, \&quot;Standard Chartered\&quot;]. Card bank name, required for EMI payments. This is the bank user has selected for EMI (required).</param>
        /// <param name="emiTenure">EMI tenure selected by the user (required).</param>
        public CFCard(string channel = "link", string? cardNumber = default(string?), string? cardHolderName = default(string?), string? cardExpiryMm = default(string?), string? cardExpiryYy = default(string?), string? cardCvv = default(string?), string? instrumentId = default(string?), string? cryptogram = default(string?), string? tokenRequestorId = default(string?), string? cardDisplay = default(string?), string? cardAlias = default(string?), CardBankNameEnum? cardBankName = default(CardBankNameEnum?), int? emiTenure = default(int?))
        {
            // to ensure "channel" is required (not null)
            if (channel == null) {
                throw new ArgumentNullException("channel is a required property for CFCard and cannot be null");
            }
            this.Channel = channel;
            // to ensure "cardNumber" is required (not null)
            this.CardNumber = cardNumber;
            // to ensure "cardHolderName" is required (not null)
            this.CardHolderName = cardHolderName;
            // to ensure "cardExpiryMm" is required (not null)
            this.CardExpiryMm = cardExpiryMm;
            // to ensure "cardExpiryYy" is required (not null)
            this.CardExpiryYy = cardExpiryYy;
            // to ensure "cardCvv" is required (not null)
            this.CardCvv = cardCvv;
            // to ensure "instrumentId" is required (not null)
            this.InstrumentId = instrumentId;
            // to ensure "cryptogram" is required (not null)
            this.Cryptogram = cryptogram;
            // to ensure "tokenRequestorId" is required (not null)
            this.TokenRequestorId = tokenRequestorId;
            // to ensure "cardDisplay" is required (not null)
            this.CardDisplay = cardDisplay;
            // to ensure "cardAlias" is required (not null)
            this.CardAlias = cardAlias;
            this.CardBankName = cardBankName;
            this.EmiTenure = emiTenure;
        }

        /// <summary>
        /// The channel for card payments will always be \&quot;link\&quot;
        /// </summary>
        /// <value>The channel for card payments will always be \&quot;link\&quot;</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = false)]
        public string? Channel { get; set; }

        /// <summary>
        /// Customer card number for plain card transactions. Token pan number for tokenized card transactions.
        /// </summary>
        /// <value>Customer card number for plain card transactions. Token pan number for tokenized card transactions.</value>
        [DataMember(Name = "card_number", IsRequired = true, EmitDefaultValue = false)]
        public string? CardNumber { get; set; }

        /// <summary>
        /// Customer name mentioned on the card.
        /// </summary>
        /// <value>Customer name mentioned on the card.</value>
        [DataMember(Name = "card_holder_name", IsRequired = true, EmitDefaultValue = false)]
        public string? CardHolderName { get; set; }

        /// <summary>
        /// Card expiry month for plain card transactions. Token expiry month for tokenized card transactions.
        /// </summary>
        /// <value>Card expiry month for plain card transactions. Token expiry month for tokenized card transactions.</value>
        [DataMember(Name = "card_expiry_mm", IsRequired = true, EmitDefaultValue = false)]
        public string? CardExpiryMm { get; set; }

        /// <summary>
        /// Card expiry year for plain card transactions. Token expiry year for tokenized card transactions.
        /// </summary>
        /// <value>Card expiry year for plain card transactions. Token expiry year for tokenized card transactions.</value>
        [DataMember(Name = "card_expiry_yy", IsRequired = true, EmitDefaultValue = false)]
        public string? CardExpiryYy { get; set; }

        /// <summary>
        /// CVV mentioned on the card.
        /// </summary>
        /// <value>CVV mentioned on the card.</value>
        [DataMember(Name = "card_cvv", IsRequired = true, EmitDefaultValue = false)]
        public string? CardCvv { get; set; }

        /// <summary>
        /// instrument id of saved card. Required only to make payment using saved instrument.
        /// </summary>
        /// <value>instrument id of saved card. Required only to make payment using saved instrument.</value>
        [DataMember(Name = "instrument_id", IsRequired = true, EmitDefaultValue = false)]
        public string? InstrumentId { get; set; }

        /// <summary>
        /// cryptogram received from card network. Required only for tokenized card transactions.
        /// </summary>
        /// <value>cryptogram received from card network. Required only for tokenized card transactions.</value>
        [DataMember(Name = "cryptogram", IsRequired = true, EmitDefaultValue = false)]
        public string? Cryptogram { get; set; }

        /// <summary>
        /// TRID issued by card networks. Required only for tokenized card transactions.
        /// </summary>
        /// <value>TRID issued by card networks. Required only for tokenized card transactions.</value>
        [DataMember(Name = "token_requestor_id", IsRequired = true, EmitDefaultValue = false)]
        public string? TokenRequestorId { get; set; }

        /// <summary>
        /// last 4 digits of original card number. Required only for tokenized card transactions.
        /// </summary>
        /// <value>last 4 digits of original card number. Required only for tokenized card transactions.</value>
        [DataMember(Name = "card_display", IsRequired = true, EmitDefaultValue = false)]
        public string? CardDisplay { get; set; }

        /// <summary>
        /// Card alias as returned by Cashfree Vault API.
        /// </summary>
        /// <value>Card alias as returned by Cashfree Vault API.</value>
        [DataMember(Name = "card_alias", IsRequired = true, EmitDefaultValue = false)]
        public string? CardAlias { get; set; }

        /// <summary>
        /// EMI tenure selected by the user
        /// </summary>
        /// <value>EMI tenure selected by the user</value>
        [DataMember(Name = "emi_tenure", IsRequired = true, EmitDefaultValue = false)]
        public int? EmiTenure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFCard {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  CardExpiryMm: ").Append(CardExpiryMm).Append("\n");
            sb.Append("  CardExpiryYy: ").Append(CardExpiryYy).Append("\n");
            sb.Append("  CardCvv: ").Append(CardCvv).Append("\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  Cryptogram: ").Append(Cryptogram).Append("\n");
            sb.Append("  TokenRequestorId: ").Append(TokenRequestorId).Append("\n");
            sb.Append("  CardDisplay: ").Append(CardDisplay).Append("\n");
            sb.Append("  CardAlias: ").Append(CardAlias).Append("\n");
            sb.Append("  CardBankName: ").Append(CardBankName).Append("\n");
            sb.Append("  EmiTenure: ").Append(EmiTenure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFCard);
        }

        /// <summary>
        /// Returns true if CFCard instances are equal
        /// </summary>
        /// <param name="input">Instance of CFCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFCard? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.CardExpiryMm == input.CardExpiryMm ||
                    (this.CardExpiryMm != null &&
                    this.CardExpiryMm.Equals(input.CardExpiryMm))
                ) && 
                (
                    this.CardExpiryYy == input.CardExpiryYy ||
                    (this.CardExpiryYy != null &&
                    this.CardExpiryYy.Equals(input.CardExpiryYy))
                ) && 
                (
                    this.CardCvv == input.CardCvv ||
                    (this.CardCvv != null &&
                    this.CardCvv.Equals(input.CardCvv))
                ) && 
                (
                    this.InstrumentId == input.InstrumentId ||
                    (this.InstrumentId != null &&
                    this.InstrumentId.Equals(input.InstrumentId))
                ) && 
                (
                    this.Cryptogram == input.Cryptogram ||
                    (this.Cryptogram != null &&
                    this.Cryptogram.Equals(input.Cryptogram))
                ) && 
                (
                    this.TokenRequestorId == input.TokenRequestorId ||
                    (this.TokenRequestorId != null &&
                    this.TokenRequestorId.Equals(input.TokenRequestorId))
                ) && 
                (
                    this.CardDisplay == input.CardDisplay ||
                    (this.CardDisplay != null &&
                    this.CardDisplay.Equals(input.CardDisplay))
                ) && 
                (
                    this.CardAlias == input.CardAlias ||
                    (this.CardAlias != null &&
                    this.CardAlias.Equals(input.CardAlias))
                ) && 
                (
                    this.CardBankName == input.CardBankName ||
                    this.CardBankName.Equals(input.CardBankName)
                ) && 
                (
                    this.EmiTenure == input.EmiTenure ||
                    this.EmiTenure.Equals(input.EmiTenure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Channel != null)
                {
                    hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                }
                if (this.CardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CardNumber.GetHashCode();
                }
                if (this.CardHolderName != null)
                {
                    hashCode = (hashCode * 59) + this.CardHolderName.GetHashCode();
                }
                if (this.CardExpiryMm != null)
                {
                    hashCode = (hashCode * 59) + this.CardExpiryMm.GetHashCode();
                }
                if (this.CardExpiryYy != null)
                {
                    hashCode = (hashCode * 59) + this.CardExpiryYy.GetHashCode();
                }
                if (this.CardCvv != null)
                {
                    hashCode = (hashCode * 59) + this.CardCvv.GetHashCode();
                }
                if (this.InstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentId.GetHashCode();
                }
                if (this.Cryptogram != null)
                {
                    hashCode = (hashCode * 59) + this.Cryptogram.GetHashCode();
                }
                if (this.TokenRequestorId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenRequestorId.GetHashCode();
                }
                if (this.CardDisplay != null)
                {
                    hashCode = (hashCode * 59) + this.CardDisplay.GetHashCode();
                }
                if (this.CardAlias != null)
                {
                    hashCode = (hashCode * 59) + this.CardAlias.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CardBankName.GetHashCode();
                hashCode = (hashCode * 59) + this.EmiTenure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
