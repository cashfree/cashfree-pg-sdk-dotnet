/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFLink
    /// </summary>
    [DataContract(Name = "CFLink")]
    public partial class CFLink : IEquatable<CFLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFLink" /> class.
        /// </summary>
        /// <param name="cfLinkId">cfLinkId.</param>
        /// <param name="linkId">linkId.</param>
        /// <param name="linkStatus">linkStatus.</param>
        /// <param name="linkCurrency">linkCurrency.</param>
        /// <param name="linkAmount">linkAmount.</param>
        /// <param name="linkAmountPaid">linkAmountPaid.</param>
        /// <param name="linkPartialPayments">linkPartialPayments.</param>
        /// <param name="linkMinimumPartialAmount">linkMinimumPartialAmount.</param>
        /// <param name="linkPurpose">linkPurpose.</param>
        /// <param name="linkCreatedAt">linkCreatedAt.</param>
        /// <param name="customerDetails">customerDetails.</param>
        /// <param name="linkMeta">linkMeta.</param>
        /// <param name="linkUrl">linkUrl.</param>
        /// <param name="linkExpiryTime">linkExpiryTime.</param>
        /// <param name="linkNotes">Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs.</param>
        /// <param name="linkAutoReminders">linkAutoReminders.</param>
        /// <param name="linkNotify">linkNotify.</param>
        public CFLink(int? cfLinkId = default(int?), string? linkId = default(string?), string? linkStatus = default(string?), string? linkCurrency = default(string?), decimal? linkAmount = default(decimal?), decimal? linkAmountPaid = default(decimal?), bool? linkPartialPayments = default(bool?), decimal? linkMinimumPartialAmount = default(decimal?), string? linkPurpose = default(string?), string? linkCreatedAt = default(string?), CFLinkCustomerDetailsEntity? customerDetails = default(CFLinkCustomerDetailsEntity?), CFLinkMetaEntity? linkMeta = default(CFLinkMetaEntity?), string? linkUrl = default(string?), string? linkExpiryTime = default(string?), Dictionary<string, string>? linkNotes = default(Dictionary<string, string>?), bool? linkAutoReminders = default(bool?), CFLinkNotifyEntity? linkNotify = default(CFLinkNotifyEntity?))
        {
            this.CfLinkId = cfLinkId;
            this.LinkId = linkId;
            this.LinkStatus = linkStatus;
            this.LinkCurrency = linkCurrency;
            this.LinkAmount = linkAmount;
            this.LinkAmountPaid = linkAmountPaid;
            this.LinkPartialPayments = linkPartialPayments;
            this.LinkMinimumPartialAmount = linkMinimumPartialAmount;
            this.LinkPurpose = linkPurpose;
            this.LinkCreatedAt = linkCreatedAt;
            this.CustomerDetails = customerDetails;
            this.LinkMeta = linkMeta;
            this.LinkUrl = linkUrl;
            this.LinkExpiryTime = linkExpiryTime;
            this.LinkNotes = linkNotes;
            this.LinkAutoReminders = linkAutoReminders;
            this.LinkNotify = linkNotify;
        }

        /// <summary>
        /// Gets or Sets CfLinkId
        /// </summary>
        [DataMember(Name = "cf_link_id", EmitDefaultValue = false)]
        public int? CfLinkId { get; set; }

        /// <summary>
        /// Gets or Sets LinkId
        /// </summary>
        [DataMember(Name = "link_id", EmitDefaultValue = false)]
        public string? LinkId { get; set; }

        /// <summary>
        /// Gets or Sets LinkStatus
        /// </summary>
        [DataMember(Name = "link_status", EmitDefaultValue = false)]
        public string? LinkStatus { get; set; }

        /// <summary>
        /// Gets or Sets LinkCurrency
        /// </summary>
        [DataMember(Name = "link_currency", EmitDefaultValue = false)]
        public string? LinkCurrency { get; set; }

        /// <summary>
        /// Gets or Sets LinkAmount
        /// </summary>
        [DataMember(Name = "link_amount", EmitDefaultValue = false)]
        public decimal? LinkAmount { get; set; }

        /// <summary>
        /// Gets or Sets LinkAmountPaid
        /// </summary>
        [DataMember(Name = "link_amount_paid", EmitDefaultValue = false)]
        public decimal? LinkAmountPaid { get; set; }

        /// <summary>
        /// Gets or Sets LinkPartialPayments
        /// </summary>
        [DataMember(Name = "link_partial_payments", EmitDefaultValue = true)]
        public bool? LinkPartialPayments { get; set; }

        /// <summary>
        /// Gets or Sets LinkMinimumPartialAmount
        /// </summary>
        [DataMember(Name = "link_minimum_partial_amount", EmitDefaultValue = false)]
        public decimal? LinkMinimumPartialAmount { get; set; }

        /// <summary>
        /// Gets or Sets LinkPurpose
        /// </summary>
        [DataMember(Name = "link_purpose", EmitDefaultValue = false)]
        public string? LinkPurpose { get; set; }

        /// <summary>
        /// Gets or Sets LinkCreatedAt
        /// </summary>
        [DataMember(Name = "link_created_at", EmitDefaultValue = false)]
        public string? LinkCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomerDetails
        /// </summary>
        [DataMember(Name = "customer_details", EmitDefaultValue = false)]
        public CFLinkCustomerDetailsEntity? CustomerDetails { get; set; }

        /// <summary>
        /// Gets or Sets LinkMeta
        /// </summary>
        [DataMember(Name = "link_meta", EmitDefaultValue = false)]
        public CFLinkMetaEntity? LinkMeta { get; set; }

        /// <summary>
        /// Gets or Sets LinkUrl
        /// </summary>
        [DataMember(Name = "link_url", EmitDefaultValue = false)]
        public string? LinkUrl { get; set; }

        /// <summary>
        /// Gets or Sets LinkExpiryTime
        /// </summary>
        [DataMember(Name = "link_expiry_time", EmitDefaultValue = false)]
        public string? LinkExpiryTime { get; set; }

        /// <summary>
        /// Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs
        /// </summary>
        /// <value>Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs</value>
        [DataMember(Name = "link_notes", EmitDefaultValue = false)]
        public Dictionary<string, string>? LinkNotes { get; set; }

        /// <summary>
        /// Gets or Sets LinkAutoReminders
        /// </summary>
        [DataMember(Name = "link_auto_reminders", EmitDefaultValue = true)]
        public bool? LinkAutoReminders { get; set; }

        /// <summary>
        /// Gets or Sets LinkNotify
        /// </summary>
        [DataMember(Name = "link_notify", EmitDefaultValue = false)]
        public CFLinkNotifyEntity? LinkNotify { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFLink {\n");
            sb.Append("  CfLinkId: ").Append(CfLinkId).Append("\n");
            sb.Append("  LinkId: ").Append(LinkId).Append("\n");
            sb.Append("  LinkStatus: ").Append(LinkStatus).Append("\n");
            sb.Append("  LinkCurrency: ").Append(LinkCurrency).Append("\n");
            sb.Append("  LinkAmount: ").Append(LinkAmount).Append("\n");
            sb.Append("  LinkAmountPaid: ").Append(LinkAmountPaid).Append("\n");
            sb.Append("  LinkPartialPayments: ").Append(LinkPartialPayments).Append("\n");
            sb.Append("  LinkMinimumPartialAmount: ").Append(LinkMinimumPartialAmount).Append("\n");
            sb.Append("  LinkPurpose: ").Append(LinkPurpose).Append("\n");
            sb.Append("  LinkCreatedAt: ").Append(LinkCreatedAt).Append("\n");
            sb.Append("  CustomerDetails: ").Append(CustomerDetails).Append("\n");
            sb.Append("  LinkMeta: ").Append(LinkMeta).Append("\n");
            sb.Append("  LinkUrl: ").Append(LinkUrl).Append("\n");
            sb.Append("  LinkExpiryTime: ").Append(LinkExpiryTime).Append("\n");
            sb.Append("  LinkNotes: ").Append(LinkNotes).Append("\n");
            sb.Append("  LinkAutoReminders: ").Append(LinkAutoReminders).Append("\n");
            sb.Append("  LinkNotify: ").Append(LinkNotify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFLink);
        }

        /// <summary>
        /// Returns true if CFLink instances are equal
        /// </summary>
        /// <param name="input">Instance of CFLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFLink? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CfLinkId == input.CfLinkId ||
                    this.CfLinkId.Equals(input.CfLinkId)
                ) && 
                (
                    this.LinkId == input.LinkId ||
                    (this.LinkId != null &&
                    this.LinkId.Equals(input.LinkId))
                ) && 
                (
                    this.LinkStatus == input.LinkStatus ||
                    (this.LinkStatus != null &&
                    this.LinkStatus.Equals(input.LinkStatus))
                ) && 
                (
                    this.LinkCurrency == input.LinkCurrency ||
                    (this.LinkCurrency != null &&
                    this.LinkCurrency.Equals(input.LinkCurrency))
                ) && 
                (
                    this.LinkAmount == input.LinkAmount ||
                    this.LinkAmount.Equals(input.LinkAmount)
                ) && 
                (
                    this.LinkAmountPaid == input.LinkAmountPaid ||
                    this.LinkAmountPaid.Equals(input.LinkAmountPaid)
                ) && 
                (
                    this.LinkPartialPayments == input.LinkPartialPayments ||
                    this.LinkPartialPayments.Equals(input.LinkPartialPayments)
                ) && 
                (
                    this.LinkMinimumPartialAmount == input.LinkMinimumPartialAmount ||
                    this.LinkMinimumPartialAmount.Equals(input.LinkMinimumPartialAmount)
                ) && 
                (
                    this.LinkPurpose == input.LinkPurpose ||
                    (this.LinkPurpose != null &&
                    this.LinkPurpose.Equals(input.LinkPurpose))
                ) && 
                (
                    this.LinkCreatedAt == input.LinkCreatedAt ||
                    (this.LinkCreatedAt != null &&
                    this.LinkCreatedAt.Equals(input.LinkCreatedAt))
                ) && 
                (
                    this.CustomerDetails == input.CustomerDetails ||
                    (this.CustomerDetails != null &&
                    this.CustomerDetails.Equals(input.CustomerDetails))
                ) && 
                (
                    this.LinkMeta == input.LinkMeta ||
                    (this.LinkMeta != null &&
                    this.LinkMeta.Equals(input.LinkMeta))
                ) && 
                (
                    this.LinkUrl == input.LinkUrl ||
                    (this.LinkUrl != null &&
                    this.LinkUrl.Equals(input.LinkUrl))
                ) && 
                (
                    this.LinkExpiryTime == input.LinkExpiryTime ||
                    (this.LinkExpiryTime != null &&
                    this.LinkExpiryTime.Equals(input.LinkExpiryTime))
                ) && 
                (
                    this.LinkNotes == input.LinkNotes ||
                    this.LinkNotes != null &&
                    input.LinkNotes != null &&
                    this.LinkNotes.SequenceEqual(input.LinkNotes)
                ) && 
                (
                    this.LinkAutoReminders == input.LinkAutoReminders ||
                    this.LinkAutoReminders.Equals(input.LinkAutoReminders)
                ) && 
                (
                    this.LinkNotify == input.LinkNotify ||
                    (this.LinkNotify != null &&
                    this.LinkNotify.Equals(input.LinkNotify))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CfLinkId.GetHashCode();
                if (this.LinkId != null)
                {
                    hashCode = (hashCode * 59) + this.LinkId.GetHashCode();
                }
                if (this.LinkStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LinkStatus.GetHashCode();
                }
                if (this.LinkCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.LinkCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LinkAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.LinkAmountPaid.GetHashCode();
                hashCode = (hashCode * 59) + this.LinkPartialPayments.GetHashCode();
                hashCode = (hashCode * 59) + this.LinkMinimumPartialAmount.GetHashCode();
                if (this.LinkPurpose != null)
                {
                    hashCode = (hashCode * 59) + this.LinkPurpose.GetHashCode();
                }
                if (this.LinkCreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LinkCreatedAt.GetHashCode();
                }
                if (this.CustomerDetails != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerDetails.GetHashCode();
                }
                if (this.LinkMeta != null)
                {
                    hashCode = (hashCode * 59) + this.LinkMeta.GetHashCode();
                }
                if (this.LinkUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LinkUrl.GetHashCode();
                }
                if (this.LinkExpiryTime != null)
                {
                    hashCode = (hashCode * 59) + this.LinkExpiryTime.GetHashCode();
                }
                if (this.LinkNotes != null)
                {
                    hashCode = (hashCode * 59) + this.LinkNotes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LinkAutoReminders.GetHashCode();
                if (this.LinkNotify != null)
                {
                    hashCode = (hashCode * 59) + this.LinkNotify.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
