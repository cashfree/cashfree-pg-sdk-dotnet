/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Request body to create a plan.
    /// </summary>
    [DataContract(Name = "CreatePlanRequest")]
    public class CreatePlanRequest : IEquatable<CreatePlanRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePlanRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePlanRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePlanRequest" /> class.
        /// </summary>
        /// <param name="planId">Unique ID to identify the plan. Only alpha-numerics, dot, hyphen and underscore allowed. (required).</param>
        /// <param name="planName">Name of the plan. (required).</param>
        /// <param name="planType">Type of the plan. Possible values - PERIODIC, ON_DEMAND. (required).</param>
        /// <param name="planCurrency">Currency of the plan..</param>
        /// <param name="planRecurringAmount">Recurring amount for the plan. Required for PERIODIC plan_type..</param>
        /// <param name="planMaxAmount">Maximum amount for the plan. (required).</param>
        /// <param name="planMaxCycles">Maximum number of payment cycles for the plan..</param>
        /// <param name="planIntervals">Number of billing cycles between charges. For instance, if set to 2 and the interval type is &#39;week&#39;, the service will be billed every 2 weeks. Similarly, if set to 3 and the interval type is &#39;month&#39;, the service will be billed every 3 months. Required for PERIODIC plan_type..</param>
        /// <param name="planIntervalType">Interval type for the plan. Possible values - DAY, WEEK, MONTH, YEAR..</param>
        /// <param name="planNote">Note for the plan..</param>
        public CreatePlanRequest(string planId = default(string), string planName = default(string), string planType = default(string), string? planCurrency = default(string?), decimal? planRecurringAmount = default(decimal?), decimal planMaxAmount = default(decimal), int? planMaxCycles = default(int?), int? planIntervals = default(int?), string? planIntervalType = default(string?), string? planNote = default(string?))
        {
            // to ensure "planId" is required (not null)
            if (planId == null)
            {
                throw new ArgumentNullException("planId is a required property for CreatePlanRequest and cannot be null");
            }
            this.plan_id = planId;
            // to ensure "planName" is required (not null)
            if (planName == null)
            {
                throw new ArgumentNullException("planName is a required property for CreatePlanRequest and cannot be null");
            }
            this.plan_name = planName;
            // to ensure "planType" is required (not null)
            if (planType == null)
            {
                throw new ArgumentNullException("planType is a required property for CreatePlanRequest and cannot be null");
            }
            this.plan_type = planType;
            this.plan_max_amount = planMaxAmount;
            this.plan_currency = planCurrency;
            this.plan_recurring_amount = planRecurringAmount;
            this.plan_max_cycles = planMaxCycles;
            this.plan_intervals = planIntervals;
            this.plan_interval_type = planIntervalType;
            this.plan_note = planNote;
        }

        /// <summary>
        /// Unique ID to identify the plan. Only alpha-numerics, dot, hyphen and underscore allowed.
        /// </summary>
        /// <value>Unique ID to identify the plan. Only alpha-numerics, dot, hyphen and underscore allowed.</value>
        [DataMember(Name = "plan_id", IsRequired = true, EmitDefaultValue = true)]
        public string plan_id { get; set; }

        /// <summary>
        /// Name of the plan.
        /// </summary>
        /// <value>Name of the plan.</value>
        [DataMember(Name = "plan_name", IsRequired = true, EmitDefaultValue = true)]
        public string plan_name { get; set; }

        /// <summary>
        /// Type of the plan. Possible values - PERIODIC, ON_DEMAND.
        /// </summary>
        /// <value>Type of the plan. Possible values - PERIODIC, ON_DEMAND.</value>
        [DataMember(Name = "plan_type", IsRequired = true, EmitDefaultValue = true)]
        public string plan_type { get; set; }

        /// <summary>
        /// Currency of the plan.
        /// </summary>
        /// <value>Currency of the plan.</value>
        [DataMember(Name = "plan_currency", EmitDefaultValue = false)]
        public string? plan_currency { get; set; }

        /// <summary>
        /// Recurring amount for the plan. Required for PERIODIC plan_type.
        /// </summary>
        /// <value>Recurring amount for the plan. Required for PERIODIC plan_type.</value>
        [DataMember(Name = "plan_recurring_amount", EmitDefaultValue = false)]
        public decimal? plan_recurring_amount { get; set; }

        /// <summary>
        /// Maximum amount for the plan.
        /// </summary>
        /// <value>Maximum amount for the plan.</value>
        [DataMember(Name = "plan_max_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal plan_max_amount { get; set; }

        /// <summary>
        /// Maximum number of payment cycles for the plan.
        /// </summary>
        /// <value>Maximum number of payment cycles for the plan.</value>
        [DataMember(Name = "plan_max_cycles", EmitDefaultValue = false)]
        public int? plan_max_cycles { get; set; }

        /// <summary>
        /// Number of billing cycles between charges. For instance, if set to 2 and the interval type is &#39;week&#39;, the service will be billed every 2 weeks. Similarly, if set to 3 and the interval type is &#39;month&#39;, the service will be billed every 3 months. Required for PERIODIC plan_type.
        /// </summary>
        /// <value>Number of billing cycles between charges. For instance, if set to 2 and the interval type is &#39;week&#39;, the service will be billed every 2 weeks. Similarly, if set to 3 and the interval type is &#39;month&#39;, the service will be billed every 3 months. Required for PERIODIC plan_type.</value>
        [DataMember(Name = "plan_intervals", EmitDefaultValue = false)]
        public int? plan_intervals { get; set; }

        /// <summary>
        /// Interval type for the plan. Possible values - DAY, WEEK, MONTH, YEAR.
        /// </summary>
        /// <value>Interval type for the plan. Possible values - DAY, WEEK, MONTH, YEAR.</value>
        [DataMember(Name = "plan_interval_type", EmitDefaultValue = false)]
        public string? plan_interval_type { get; set; }

        /// <summary>
        /// Note for the plan.
        /// </summary>
        /// <value>Note for the plan.</value>
        [DataMember(Name = "plan_note", EmitDefaultValue = false)]
        public string? plan_note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePlanRequest {\n");
            sb.Append("  plan_id: ").Append(plan_id).Append("\n");
            sb.Append("  plan_name: ").Append(plan_name).Append("\n");
            sb.Append("  plan_type: ").Append(plan_type).Append("\n");
            sb.Append("  plan_currency: ").Append(plan_currency).Append("\n");
            sb.Append("  plan_recurring_amount: ").Append(plan_recurring_amount).Append("\n");
            sb.Append("  plan_max_amount: ").Append(plan_max_amount).Append("\n");
            sb.Append("  plan_max_cycles: ").Append(plan_max_cycles).Append("\n");
            sb.Append("  plan_intervals: ").Append(plan_intervals).Append("\n");
            sb.Append("  plan_interval_type: ").Append(plan_interval_type).Append("\n");
            sb.Append("  plan_note: ").Append(plan_note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePlanRequest);
        }

        /// <summary>
        /// Returns true if CreatePlanRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePlanRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePlanRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.plan_id == input.plan_id ||
                    (this.plan_id != null &&
                    this.plan_id.Equals(input.plan_id))
                ) && 
                (
                    this.plan_name == input.plan_name ||
                    (this.plan_name != null &&
                    this.plan_name.Equals(input.plan_name))
                ) && 
                (
                    this.plan_type == input.plan_type ||
                    (this.plan_type != null &&
                    this.plan_type.Equals(input.plan_type))
                ) && 
                (
                    this.plan_currency == input.plan_currency ||
                    (this.plan_currency != null &&
                    this.plan_currency.Equals(input.plan_currency))
                ) && 
                (
                    this.plan_recurring_amount == input.plan_recurring_amount ||
                    this.plan_recurring_amount.Equals(input.plan_recurring_amount)
                ) && 
                (
                    this.plan_max_amount == input.plan_max_amount ||
                    this.plan_max_amount.Equals(input.plan_max_amount)
                ) && 
                (
                    this.plan_max_cycles == input.plan_max_cycles ||
                    this.plan_max_cycles.Equals(input.plan_max_cycles)
                ) && 
                (
                    this.plan_intervals == input.plan_intervals ||
                    this.plan_intervals.Equals(input.plan_intervals)
                ) && 
                (
                    this.plan_interval_type == input.plan_interval_type ||
                    (this.plan_interval_type != null &&
                    this.plan_interval_type.Equals(input.plan_interval_type))
                ) && 
                (
                    this.plan_note == input.plan_note ||
                    (this.plan_note != null &&
                    this.plan_note.Equals(input.plan_note))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringplan_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringplan_id);
            if (deserializedJsonString.ContainsKey("plan_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.plan_id != null)
                {
                    hashCode = (hashCode * 59) + this.plan_id.GetHashCode();
                }
                if (this.plan_name != null)
                {
                    hashCode = (hashCode * 59) + this.plan_name.GetHashCode();
                }
                if (this.plan_type != null)
                {
                    hashCode = (hashCode * 59) + this.plan_type.GetHashCode();
                }
                if (this.plan_currency != null)
                {
                    hashCode = (hashCode * 59) + this.plan_currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.plan_recurring_amount.GetHashCode();
                hashCode = (hashCode * 59) + this.plan_max_amount.GetHashCode();
                hashCode = (hashCode * 59) + this.plan_max_cycles.GetHashCode();
                hashCode = (hashCode * 59) + this.plan_intervals.GetHashCode();
                if (this.plan_interval_type != null)
                {
                    hashCode = (hashCode * 59) + this.plan_interval_type.GetHashCode();
                }
                if (this.plan_note != null)
                {
                    hashCode = (hashCode * 59) + this.plan_note.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // plan_id (string) maxLength
            if (this.plan_id != null && this.plan_id.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for plan_id, length must be less than 40.", new [] { "plan_id" });
            }

            // plan_id (string) minLength
            if (this.plan_id != null && this.plan_id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for plan_id, length must be greater than 1.", new [] { "plan_id" });
            }

            // plan_name (string) maxLength
            if (this.plan_name != null && this.plan_name.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for plan_name, length must be less than 40.", new [] { "plan_name" });
            }

            // plan_name (string) minLength
            if (this.plan_name != null && this.plan_name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for plan_name, length must be greater than 1.", new [] { "plan_name" });
            }

            yield break;
        }
    }

}
