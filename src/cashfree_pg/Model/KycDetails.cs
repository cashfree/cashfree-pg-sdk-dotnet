/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// KycDetails
    /// </summary>
    [DataContract(Name = "KycDetails")]
    public class KycDetails : IEquatable<KycDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KycDetails" /> class.
        /// </summary>
        /// <param name="accountType">accountType.</param>
        /// <param name="businessType">businessType.</param>
        /// <param name="uidai">uidai.</param>
        /// <param name="gst">gst.</param>
        /// <param name="cin">cin.</param>
        /// <param name="pan">pan.</param>
        /// <param name="passportNumber">passportNumber.</param>
        /// <param name="drivingLicense">drivingLicense.</param>
        /// <param name="voterId">voterId.</param>
        public KycDetails(string? accountType = default(string?), string? businessType = default(string?), decimal? uidai = default(decimal?), string? gst = default(string?), string? cin = default(string?), string? pan = default(string?), string? passportNumber = default(string?), string? drivingLicense = default(string?), string? voterId = default(string?))
        {
            this.account_type = accountType;
            this.business_type = businessType;
            this.uidai = uidai;
            this.gst = gst;
            this.cin = cin;
            this.pan = pan;
            this.passport_number = passportNumber;
            this.driving_license = drivingLicense;
            this.voter_id = voterId;
        }

        /// <summary>
        /// Gets or Sets account_type
        /// </summary>
        [DataMember(Name = "account_type", EmitDefaultValue = false)]
        public string? account_type { get; set; }

        /// <summary>
        /// Gets or Sets business_type
        /// </summary>
        [DataMember(Name = "business_type", EmitDefaultValue = false)]
        public string? business_type { get; set; }

        /// <summary>
        /// Gets or Sets uidai
        /// </summary>
        [DataMember(Name = "uidai", EmitDefaultValue = false)]
        public decimal? uidai { get; set; }

        /// <summary>
        /// Gets or Sets gst
        /// </summary>
        [DataMember(Name = "gst", EmitDefaultValue = false)]
        public string? gst { get; set; }

        /// <summary>
        /// Gets or Sets cin
        /// </summary>
        [DataMember(Name = "cin", EmitDefaultValue = false)]
        public string? cin { get; set; }

        /// <summary>
        /// Gets or Sets pan
        /// </summary>
        [DataMember(Name = "pan", EmitDefaultValue = false)]
        public string? pan { get; set; }

        /// <summary>
        /// Gets or Sets passport_number
        /// </summary>
        [DataMember(Name = "passport_number", EmitDefaultValue = false)]
        public string? passport_number { get; set; }

        /// <summary>
        /// Gets or Sets driving_license
        /// </summary>
        [DataMember(Name = "driving_license", EmitDefaultValue = false)]
        public string? driving_license { get; set; }

        /// <summary>
        /// Gets or Sets voter_id
        /// </summary>
        [DataMember(Name = "voter_id", EmitDefaultValue = false)]
        public string? voter_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KycDetails {\n");
            sb.Append("  account_type: ").Append(account_type).Append("\n");
            sb.Append("  business_type: ").Append(business_type).Append("\n");
            sb.Append("  uidai: ").Append(uidai).Append("\n");
            sb.Append("  gst: ").Append(gst).Append("\n");
            sb.Append("  cin: ").Append(cin).Append("\n");
            sb.Append("  pan: ").Append(pan).Append("\n");
            sb.Append("  passport_number: ").Append(passport_number).Append("\n");
            sb.Append("  driving_license: ").Append(driving_license).Append("\n");
            sb.Append("  voter_id: ").Append(voter_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KycDetails);
        }

        /// <summary>
        /// Returns true if KycDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of KycDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.account_type == input.account_type ||
                    (this.account_type != null &&
                    this.account_type.Equals(input.account_type))
                ) && 
                (
                    this.business_type == input.business_type ||
                    (this.business_type != null &&
                    this.business_type.Equals(input.business_type))
                ) && 
                (
                    this.uidai == input.uidai ||
                    this.uidai.Equals(input.uidai)
                ) && 
                (
                    this.gst == input.gst ||
                    (this.gst != null &&
                    this.gst.Equals(input.gst))
                ) && 
                (
                    this.cin == input.cin ||
                    (this.cin != null &&
                    this.cin.Equals(input.cin))
                ) && 
                (
                    this.pan == input.pan ||
                    (this.pan != null &&
                    this.pan.Equals(input.pan))
                ) && 
                (
                    this.passport_number == input.passport_number ||
                    (this.passport_number != null &&
                    this.passport_number.Equals(input.passport_number))
                ) && 
                (
                    this.driving_license == input.driving_license ||
                    (this.driving_license != null &&
                    this.driving_license.Equals(input.driving_license))
                ) && 
                (
                    this.voter_id == input.voter_id ||
                    (this.voter_id != null &&
                    this.voter_id.Equals(input.voter_id))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringaccount_type) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringaccount_type);
            if (deserializedJsonString.ContainsKey("account_type")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.account_type != null)
                {
                    hashCode = (hashCode * 59) + this.account_type.GetHashCode();
                }
                if (this.business_type != null)
                {
                    hashCode = (hashCode * 59) + this.business_type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.uidai.GetHashCode();
                if (this.gst != null)
                {
                    hashCode = (hashCode * 59) + this.gst.GetHashCode();
                }
                if (this.cin != null)
                {
                    hashCode = (hashCode * 59) + this.cin.GetHashCode();
                }
                if (this.pan != null)
                {
                    hashCode = (hashCode * 59) + this.pan.GetHashCode();
                }
                if (this.passport_number != null)
                {
                    hashCode = (hashCode * 59) + this.passport_number.GetHashCode();
                }
                if (this.driving_license != null)
                {
                    hashCode = (hashCode * 59) + this.driving_license.GetHashCode();
                }
                if (this.voter_id != null)
                {
                    hashCode = (hashCode * 59) + this.voter_id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
