/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// PGCreatePAR200Response
    /// </summary>
    [DataContract(Name = "PGCreatePAR_200_response")]
    public class PGCreatePAR200Response : IEquatable<PGCreatePAR200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PGCreatePAR200Response" /> class.
        /// </summary>
        /// <param name="par">par.</param>
        public PGCreatePAR200Response(string? par = default(string?))
        {
            this.par = par;
        }

        /// <summary>
        /// Gets or Sets par
        /// </summary>
        /// <example>V0010014623022637739353641436</example>
        [DataMember(Name = "par", EmitDefaultValue = false)]
        public string? par { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PGCreatePAR200Response {\n");
            sb.Append("  par: ").Append(par).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PGCreatePAR200Response);
        }

        /// <summary>
        /// Returns true if PGCreatePAR200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of PGCreatePAR200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PGCreatePAR200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.par == input.par ||
                    (this.par != null &&
                    this.par.Equals(input.par))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringpar) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringpar);
            if (deserializedJsonString.ContainsKey("par")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.par != null)
                {
                    hashCode = (hashCode * 59) + this.par.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
