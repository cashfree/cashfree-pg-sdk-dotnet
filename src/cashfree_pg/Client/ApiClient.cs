/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Text;
using System.Threading;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Security.Cryptography;
using Sentry;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using RestSharp;
using RestSharp.Serializers;
using RestSharpMethod = RestSharp.Method;
using Polly;
using cashfree_pg.Model;

using Sentry.Extensibility;
using System.Collections.Generic;
using Sentry.Integrations;
using Sentry.Internal;
using Sentry.Internal.Extensions;
using Sentry.Protocol;
using System.Linq;

namespace cashfree_pg.Client
{

    public enum CFEnvironment {
        SANDBOX,
        PRODUCTION
    }

    public class PGWebhookEvent
    {
        String type;
        String rawBody;
        dynamic obj;

        public PGWebhookEvent(String type, String rawBody, dynamic obj)
        {
            this.type = type;
            this.rawBody = rawBody;
            this.obj = obj;
        }
    }

    class CashfreeEventProcessor : ISentryEventProcessor
    {
         public bool XEnableErrorAnalytics = true;
         public CashfreeEventProcessor(bool XEnableErrorAnalytics) {
             this.XEnableErrorAnalytics = XEnableErrorAnalytics;
         }
        public SentryEvent? Process(SentryEvent @event)
        {
            // Add anything to the event here
            // returning `null` will drop the event
            List<SentryException> exceptionList = @event.SentryExceptions.ToList();
            if (exceptionList.Count > 0 &&  exceptionList[0].Stacktrace.Frames.Count > 0 && exceptionList[0].Stacktrace.Frames[0].FileName.Contains("cashfree"))
            {
                if(this.XEnableErrorAnalytics) {
                    return @event;
                }
                return null;
            }
            return null;
        }
    }

    public class Cashfree {

        public string XClientId = "";
        public string XClientSecret = "";
        public string XPartnerApiKey = "";
        public string XPartnerMerchantId = "";
        public string XClientSignature = "";
        public CFEnvironment XEnvironment = CFEnvironment.SANDBOX;
        public bool XEnableErrorAnalytics = true;

        public static CFEnvironment SANDBOX = CFEnvironment.SANDBOX;
        public static CFEnvironment PRODUCTION = CFEnvironment.PRODUCTION;

        string XApiVersion = "2025-01-01";

        public Cashfree(CFEnvironment XEnvironment, string XClientId, string XClientSecret, string XPartnerApiKey, string XPartnerMerchantId, string XClientSignature, bool XEnableErrorAnalytics) {
            if(XClientId != "") {
                this.XClientId = XClientId;
            }
            if(XClientSecret != "") {
                this.XClientSecret = XClientSecret;
            }
            if(XPartnerApiKey != "") {
                this.XPartnerApiKey = XPartnerApiKey;
            }
            if(XPartnerMerchantId != "") {
                this.XPartnerMerchantId = XPartnerMerchantId;
            }
            if(XClientSignature != "") {
                this.XClientSignature = XClientSignature;
            }
            this.XEnvironment = XEnvironment;
            this.XEnableErrorAnalytics = XEnableErrorAnalytics;
            if(this.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = XEnvironment == CFEnvironment.SANDBOX ? "sandbox" : "production";
                    o.Release = "5.0.3-beta-2";
                    o.AddEventProcessor(new CashfreeEventProcessor(this.XEnableErrorAnalytics));
                }));
            }
        }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        private cashfree_pg.Client.ISynchronousClient Client { get; set; }

        private cashfree_pg.Client.ExceptionFactory ExceptionFactory = (name, response) => null;

        /// <summary>
        /// Signature that is received through webhooks can be verified using this method
        /// </summary>
        /// <exception cref="Exception">Thrown when fails to make API call</exception>
        /// <param name="signature">x-webhook-signature that is present in the header of a webhook received from Cashfree</param>
        /// <param name="rawBody">The body of the request in string format</param>
        /// <param name="timestamp">x-webhook-timestamp that is present in the header of a webhook received from Cashfree</param>
        /// <returns>Response of PGWebhookEvent</returns>
        public PGWebhookEvent PGVerifyWebhookSignature(string signature, string rawBody, string timestamp)
        {
            string secretKey = this.XClientSecret;
            string body = timestamp + rawBody;
            using (var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey)))
            {
                byte[] hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(body));
                string generatedSignature = Convert.ToBase64String(hashBytes);
                if (generatedSignature == signature)
                {
                    dynamic deserializedRawBody = JsonConvert.DeserializeObject<dynamic>(rawBody);
                    return new PGWebhookEvent(deserializedRawBody["type"] as String, rawBody, deserializedRawBody);
                }
                throw new Exception("Generated signature and received signature did not match.");
            }
        }

        /// <summary>
        /// Create Customer at Cashfree Create Customer at Cashfree
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createCustomerRequest">Request to create a new customer at Cashfree</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of CustomerEntity</returns>
        public cashfree_pg.Client.ApiResponse<CustomerEntity> PGCreateCustomer(CreateCustomerRequest createCustomerRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling CustomersApi->PGCreateCustomer");

            // verify the required parameter 'createCustomerRequest' is set
            if (createCustomerRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createCustomerRequest' when calling CustomersApi->PGCreateCustomer");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createCustomerRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomerEntity>("/customers", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCreateCustomer", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Accept Dispute by Dispute ID Use this API to get accept the Dispute by specifying the Dispute ID.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="disputeId"></param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of DisputesEntityMerchantAccepted</returns>
        public cashfree_pg.Client.ApiResponse<DisputesEntityMerchantAccepted> PGAcceptDisputeByID(int disputeId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling DisputesApi->PGAcceptDisputeByID");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dispute_id", cashfree_pg.Client.ClientUtils.ParameterToString(disputeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Put<DisputesEntityMerchantAccepted>("/disputes/{dispute_id}/accept", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGAcceptDisputeByID", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Disputes by Dispute ID Use this API to get Dispute details by specifying the Dispute ID.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="disputeId"></param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of DisputesEntity</returns>
        public cashfree_pg.Client.ApiResponse<DisputesEntity> PGFetchDisputeByID(int disputeId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling DisputesApi->PGFetchDisputeByID");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dispute_id", cashfree_pg.Client.ClientUtils.ParameterToString(disputeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<DisputesEntity>("/disputes/{dispute_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchDisputeByID", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Disputes by Order Id Use this API to get all Dispute details by specifying the Order ID.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId"></param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;DisputesEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<DisputesEntity>> PGFetchOrderDisputes(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling DisputesApi->PGFetchOrderDisputes");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling DisputesApi->PGFetchOrderDisputes");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DisputesEntity>>("/orders/{order_id}/disputes", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchOrderDisputes", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Disputes by Payment ID Use this API to get all Dispute details by specifying the Payment ID.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="cfPaymentId"></param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;DisputesEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<DisputesEntity>> PGFetchPaymentDisputes(int cfPaymentId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling DisputesApi->PGFetchPaymentDisputes");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cf_payment_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfPaymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DisputesEntity>>("/payments/{cf_payment_id}/disputes", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchPaymentDisputes", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Submit Evidence to contest the Dispute by Dispute ID Use this API to Submit the Evidences to contest the Dispute by specifying the Dispute ID.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="disputeId"></param>
        /// <param name="file">File types supported are jpeg, jpg, png, pdf and maximum file size allowed is 20 MB.</param>
        /// <param name="docType">Mention the type of the document you are uploading. Possible values :- Delivery/Service Proof, Shipping Proof, Statement of Service, Proof of Service Used, Cancellation of Service Proof, Refund Proof, Business model explanation, Extra Charges Declaration, Terms &amp; Conditions, Customer Withdrawal Letter, Certificate of Authenticity, Reseller Agreement. You can use get evidences to contest dispute API to fetch set of documents required to contest particular dispute.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="note"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DisputesEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<DisputesEntity>> PGUploadDisputesDocuments(int disputeId, string file, string docType, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), string? note = default(string?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling DisputesApi->PGUploadDisputesDocuments");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'file' when calling DisputesApi->PGUploadDisputesDocuments");

            // verify the required parameter 'docType' is set
            if (docType == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'docType' when calling DisputesApi->PGUploadDisputesDocuments");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dispute_id", cashfree_pg.Client.ClientUtils.ParameterToString(disputeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("file", cashfree_pg.Client.ClientUtils.ParameterToString(file)); // form parameter
            localVarRequestOptions.FormParameters.Add("doc_type", cashfree_pg.Client.ClientUtils.ParameterToString(docType)); // form parameter
            if (note != null)
            {
                localVarRequestOptions.FormParameters.Add("note", cashfree_pg.Client.ClientUtils.ParameterToString(note)); // form parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DisputesEntity>>("/disputes/{dispute_id}/documents", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGUploadDisputesDocuments", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Adjustment The Create Adjustment API will create a adjustment request either from vendor to the merchant or from merchant to the vendor.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="vendorAdjustmentRequest">Vendor Adjustment Request Body. (optional)</param>
        /// <returns>ApiResponse of VendorAdjustmentSuccessResponse</returns>
        public cashfree_pg.Client.ApiResponse<VendorAdjustmentSuccessResponse> PGESCreateAdjustment(string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), VendorAdjustmentRequest? vendorAdjustmentRequest = default(VendorAdjustmentRequest?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESCreateAdjustment");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESCreateAdjustment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = vendorAdjustmentRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<VendorAdjustmentSuccessResponse>("/easy-split/vendors/{vendor_id}/adjustment", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESCreateAdjustment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create On Demand Transfer The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="adjustVendorBalanceRequest">Adjust Vendor Balance Request Body. (optional)</param>
        /// <returns>ApiResponse of AdjustVendorBalanceResponse</returns>
        public cashfree_pg.Client.ApiResponse<AdjustVendorBalanceResponse> PGESCreateOnDemandTransfer(string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), AdjustVendorBalanceRequest? adjustVendorBalanceRequest = default(AdjustVendorBalanceRequest?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESCreateOnDemandTransfer");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESCreateOnDemandTransfer");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = adjustVendorBalanceRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<AdjustVendorBalanceResponse>("/easy-split/vendors/{vendor_id}/transfer", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESCreateOnDemandTransfer", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create vendor Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="createVendorRequest">Create Vendor Request Body. (optional)</param>
        /// <returns>ApiResponse of CreateVendorResponse</returns>
        public cashfree_pg.Client.ApiResponse<CreateVendorResponse> PGESCreateVendors(string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), CreateVendorRequest? createVendorRequest = default(CreateVendorRequest?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESCreateVendors");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createVendorRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateVendorResponse>("/easy-split/vendors", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESCreateVendors", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Download Vendor Documents Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="docType">Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of VendorDocumentDownloadResponse</returns>
        public cashfree_pg.Client.ApiResponse<VendorDocumentDownloadResponse> PGESDownloadVendorsDocs(string docType, string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESDownloadVendorsDocs");

            // verify the required parameter 'docType' is set
            if (docType == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'docType' when calling EasySplitApi->PGESDownloadVendorsDocs");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESDownloadVendorsDocs");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("doc_type", cashfree_pg.Client.ClientUtils.ParameterToString(docType)); // path parameter
            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<VendorDocumentDownloadResponse>("/easy-split/vendor-docs/{vendor_id}/download/{doc_type}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESDownloadVendorsDocs", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Vendor All Details Use this API to get the details of a specific vendor associated with your Easy Split account.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of VendorEntity</returns>
        public cashfree_pg.Client.ApiResponse<VendorEntity> PGESFetchVendors(string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESFetchVendors");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESFetchVendors");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<VendorEntity>("/easy-split/vendors/{vendor_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESFetchVendors", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get On Demand Balance This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of VendorBalance</returns>
        public cashfree_pg.Client.ApiResponse<VendorBalance> PGESGetVendorBalance(string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESGetVendorBalance");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESGetVendorBalance");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<VendorBalance>("/easy-split/vendors/{vendor_id}/balances", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESGetVendorBalance", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Vendor Balance Transfer Charges This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="amount">Specify the amount for which you want to view the service charges and service taxes in the response.</param>
        /// <param name="rateType">Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of VendorBalanceTransferCharges</returns>
        public cashfree_pg.Client.ApiResponse<VendorBalanceTransferCharges> PGESGetVendorBalanceTransferCharges(decimal amount, string rateType, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESGetVendorBalanceTransferCharges");

            // verify the required parameter 'rateType' is set
            if (rateType == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'rateType' when calling EasySplitApi->PGESGetVendorBalanceTransferCharges");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("amount", cashfree_pg.Client.ClientUtils.ParameterToString(amount)); // path parameter
            localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "rate_type", rateType));
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<VendorBalanceTransferCharges>("/easy-split/amount/{amount}/charges", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESGetVendorBalanceTransferCharges", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Vendor All Documents Status Use this API to fetch the details of all the KYC details of a particular vendor.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of VendorDocumentsResponse</returns>
        public cashfree_pg.Client.ApiResponse<VendorDocumentsResponse> PGESGetVendorsDocs(string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESGetVendorsDocs");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESGetVendorsDocs");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<VendorDocumentsResponse>("/easy-split/vendor-docs/{vendor_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESGetVendorsDocs", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Split and Settlement Details by OrderID v2.0 Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="eSOrderReconRequest">Get Split and Settlement Details by OrderID v2.0 (optional)</param>
        /// <returns>ApiResponse of ESOrderReconResponse</returns>
        public cashfree_pg.Client.ApiResponse<ESOrderReconResponse> PGESOrderRecon(string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), ESOrderReconRequest? eSOrderReconRequest = default(ESOrderReconRequest?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESOrderRecon");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = eSOrderReconRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<ESOrderReconResponse>("/split/order/vendor/recon", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESOrderRecon", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Update vendor Details Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="updateVendorRequest">Create Vendor Request Body. (optional)</param>
        /// <returns>ApiResponse of UpdateVendorResponse</returns>
        public cashfree_pg.Client.ApiResponse<UpdateVendorResponse> PGESUpdateVendors(string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), UpdateVendorRequest? updateVendorRequest = default(UpdateVendorRequest?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESUpdateVendors");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESUpdateVendors");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = updateVendorRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateVendorResponse>("/easy-split/vendors/{vendor_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESUpdateVendors", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Upload Vendor Docs Use this API to upload KYC documents of a specific vendor.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="vendorId">The id which uniquely identifies your vendor.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="docType">Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file. (optional)</param>
        /// <param name="docValue">Enter the display name of the uploaded file. (optional)</param>
        /// <param name="file">Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size. (optional)</param>
        /// <returns>ApiResponse of UploadVendorDocumentsResponse</returns>
        public cashfree_pg.Client.ApiResponse<UploadVendorDocumentsResponse> PGESUploadVendorsDocs(string vendorId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), string? docType = default(string?), string? docValue = default(string?), System.IO.Stream? file = default(System.IO.Stream?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGESUploadVendorsDocs");

            // verify the required parameter 'vendorId' is set
            if (vendorId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'vendorId' when calling EasySplitApi->PGESUploadVendorsDocs");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vendor_id", cashfree_pg.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (docType != null)
            {
                localVarRequestOptions.FormParameters.Add("doc_type", cashfree_pg.Client.ClientUtils.ParameterToString(docType)); // form parameter
            }
            if (docValue != null)
            {
                localVarRequestOptions.FormParameters.Add("doc_value", cashfree_pg.Client.ClientUtils.ParameterToString(docValue)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadVendorDocumentsResponse>("/easy-split/vendor-docs/{vendor_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGESUploadVendorsDocs", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Split After Payment Split After Payment API splits the payments to vendors after successful payment from the customers.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="splitAfterPaymentRequest">Request Body to Create Split for an order. (optional)</param>
        /// <returns>ApiResponse of SplitAfterPaymentResponse</returns>
        public cashfree_pg.Client.ApiResponse<SplitAfterPaymentResponse> PGOrderSplitAfterPayment(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), SplitAfterPaymentRequest? splitAfterPaymentRequest = default(SplitAfterPaymentRequest?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGOrderSplitAfterPayment");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling EasySplitApi->PGOrderSplitAfterPayment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = splitAfterPaymentRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SplitAfterPaymentResponse>("/easy-split/orders/{order_id}/split", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderSplitAfterPayment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Static Split Configuration This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="staticSplitRequest">Static Split (optional)</param>
        /// <returns>ApiResponse of StaticSplitResponse</returns>
        public cashfree_pg.Client.ApiResponse<StaticSplitResponse> PGOrderStaticSplit(string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), StaticSplitRequest? staticSplitRequest = default(StaticSplitRequest?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGOrderStaticSplit");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = staticSplitRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<StaticSplitResponse>("/easy-split/static-split", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderStaticSplit", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Split and Settlement Details by OrderID Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SplitOrderReconSuccessResponse</returns>
        public cashfree_pg.Client.ApiResponse<SplitOrderReconSuccessResponse> PGSplitOrderRecon(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EasySplitApi->PGSplitOrderRecon");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling EasySplitApi->PGSplitOrderRecon");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<SplitOrderReconSuccessResponse>("/easy-split/orders/{order_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGSplitOrderRecon", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Eligible Cardless EMI Payment Methods for a customer on an order Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="eligibilityFetchCardlessEMIRequest">Request Body to get eligible cardless emi options for a customer and order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;EligibilityCardlessEMIEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<EligibilityCardlessEMIEntity>> PGEligibilityFetchCardlessEMI(EligibilityFetchCardlessEMIRequest eligibilityFetchCardlessEMIRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EligibilityApi->PGEligibilityFetchCardlessEMI");

            // verify the required parameter 'eligibilityFetchCardlessEMIRequest' is set
            if (eligibilityFetchCardlessEMIRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'eligibilityFetchCardlessEMIRequest' when calling EligibilityApi->PGEligibilityFetchCardlessEMI");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = eligibilityFetchCardlessEMIRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<EligibilityCardlessEMIEntity>>("/eligibility/cardlessemi", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGEligibilityFetchCardlessEMI", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Eligible Offers for an Order Use this API to get eligible offers for an order_id or order amount.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="eligibilityFetchOffersRequest">Request Body to get eligible offers for a customer and order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;EligibilityOfferEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<EligibilityOfferEntity>> PGEligibilityFetchOffers(EligibilityFetchOffersRequest eligibilityFetchOffersRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EligibilityApi->PGEligibilityFetchOffers");

            // verify the required parameter 'eligibilityFetchOffersRequest' is set
            if (eligibilityFetchOffersRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'eligibilityFetchOffersRequest' when calling EligibilityApi->PGEligibilityFetchOffers");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = eligibilityFetchOffersRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<EligibilityOfferEntity>>("/eligibility/offers", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGEligibilityFetchOffers", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Eligible Paylater for a customer on an order Use this API to get eligible Paylater Payment Methods for a customer on an order.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="eligibilityFetchPaylaterRequest">Request Body to get eligible paylater options for a customer and order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;EligibilityPaylaterEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<EligibilityPaylaterEntity>> PGEligibilityFetchPaylater(EligibilityFetchPaylaterRequest eligibilityFetchPaylaterRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EligibilityApi->PGEligibilityFetchPaylater");

            // verify the required parameter 'eligibilityFetchPaylaterRequest' is set
            if (eligibilityFetchPaylaterRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'eligibilityFetchPaylaterRequest' when calling EligibilityApi->PGEligibilityFetchPaylater");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = eligibilityFetchPaylaterRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<EligibilityPaylaterEntity>>("/eligibility/paylater", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGEligibilityFetchPaylater", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get eligible Payment Methods Use this API to get eligible Payment Methods
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="eligibilityFetchPaymentMethodsRequest">Request Body to get eligible payment methods for an account and order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;EligibilityPaymentMethodsEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<EligibilityPaymentMethodsEntity>> PGEligibilityFetchPaymentMethods(EligibilityFetchPaymentMethodsRequest eligibilityFetchPaymentMethodsRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling EligibilityApi->PGEligibilityFetchPaymentMethods");

            // verify the required parameter 'eligibilityFetchPaymentMethodsRequest' is set
            if (eligibilityFetchPaymentMethodsRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'eligibilityFetchPaymentMethodsRequest' when calling EligibilityApi->PGEligibilityFetchPaymentMethods");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = eligibilityFetchPaymentMethodsRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<EligibilityPaymentMethodsEntity>>("/eligibility/payment_methods", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGEligibilityFetchPaymentMethods", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Offer Use this API to create offers with Cashfree from your backend
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createOfferRequest">Request body to create an offer at Cashfree</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of OfferEntity</returns>
        public cashfree_pg.Client.ApiResponse<OfferEntity> PGCreateOffer(CreateOfferRequest createOfferRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OffersApi->PGCreateOffer");

            // verify the required parameter 'createOfferRequest' is set
            if (createOfferRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createOfferRequest' when calling OffersApi->PGCreateOffer");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createOfferRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<OfferEntity>("/offers", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCreateOffer", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Offer by ID Use this API to get offer by offer_id
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="offerId">The offer ID for which you want to view the offer details.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of OfferEntity</returns>
        public cashfree_pg.Client.ApiResponse<OfferEntity> PGFetchOffer(string offerId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OffersApi->PGFetchOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'offerId' when calling OffersApi->PGFetchOffer");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("offer_id", cashfree_pg.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<OfferEntity>("/offers/{offer_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchOffer", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Order ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a &#x60;payment_sessions_id&#x60;.  You can use the &#x60;payment_sessions_id&#x60; to create a transaction for the order. 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createOrderRequest">Request body to create an order at cashfree</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of OrderEntity</returns>
        public cashfree_pg.Client.ApiResponse<OrderEntity> PGCreateOrder(CreateOrderRequest createOrderRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OrdersApi->PGCreateOrder");

            // verify the required parameter 'createOrderRequest' is set
            if (createOrderRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createOrderRequest' when calling OrdersApi->PGCreateOrder");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createOrderRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderEntity>("/orders", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCreateOrder", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Order Use this API to fetch the order that was created at Cashfree&#39;s using the &#x60;order_id&#x60;.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to &#x60;return_url&#x60; 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of OrderEntity</returns>
        public cashfree_pg.Client.ApiResponse<OrderEntity> PGFetchOrder(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OrdersApi->PGFetchOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->PGFetchOrder");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderEntity>("/orders/{order_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchOrder", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Order Extended Use this API to fetch the order related data like address,cart,offers,customer details etc using the Cashfree&#39;s &#x60;order_id&#x60;. ## When to use this API - To get the extended data associated with order. - Once the order is PAID - Once your customer returns to &#x60;return_url&#x60; 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of OrderExtendedDataEntity</returns>
        public cashfree_pg.Client.ApiResponse<OrderExtendedDataEntity> PGFetchOrderExtendedData(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OrdersApi->PGFetchOrderExtendedData");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->PGFetchOrderExtendedData");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderExtendedDataEntity>("/orders/{order_id}/extended", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchOrderExtendedData", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Terminate Order Use this API to terminate the order that was created at Cashfree&#39;s using the &#x60;order_id&#x60;.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="terminateOrderRequest">Request body to terminate an order at cashfree</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of OrderEntity</returns>
        public cashfree_pg.Client.ApiResponse<OrderEntity> PGTerminateOrder(string orderId, TerminateOrderRequest terminateOrderRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OrdersApi->PGTerminateOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->PGTerminateOrder");

            // verify the required parameter 'terminateOrderRequest' is set
            if (terminateOrderRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'terminateOrderRequest' when calling OrdersApi->PGTerminateOrder");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = terminateOrderRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Patch<OrderEntity>("/orders/{order_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGTerminateOrder", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Update Order Extended Use this api to update the order related data like shipment details,order delivery status etc. ## When to use this API - To provide/update the shipment details or order delivery status. - Once the order is PAID. 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="updateOrderExtendedRequest">Request Body to Update extended data related to order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of UpdateOrderExtendedDataEntity</returns>
        public cashfree_pg.Client.ApiResponse<UpdateOrderExtendedDataEntity> PGUpdateOrderExtendedData(string orderId, UpdateOrderExtendedRequest updateOrderExtendedRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OrdersApi->PGUpdateOrderExtendedData");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->PGUpdateOrderExtendedData");

            // verify the required parameter 'updateOrderExtendedRequest' is set
            if (updateOrderExtendedRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'updateOrderExtendedRequest' when calling OrdersApi->PGUpdateOrderExtendedData");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = updateOrderExtendedRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateOrderExtendedDataEntity>("/orders/{order_id}/extended", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGUpdateOrderExtendedData", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// PG Reconciliation - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="fetchReconRequest">Request Body for the reconciliation</param>
        /// <param name="contentType">application/json (optional)</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="accept">application/json (optional)</param>
        /// <returns>ApiResponse of ReconEntity</returns>
        public cashfree_pg.Client.ApiResponse<ReconEntity> PGFetchRecon(FetchReconRequest fetchReconRequest, string? contentType = default(string?), string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), string? accept = default(string?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PGReconciliationApi->PGFetchRecon");

            // verify the required parameter 'fetchReconRequest' is set
            if (fetchReconRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'fetchReconRequest' when calling PGReconciliationApi->PGFetchRecon");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", cashfree_pg.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", cashfree_pg.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            localVarRequestOptions.Data = fetchReconRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReconEntity>("/recon", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchRecon", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Cancel Payment Link Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="linkId">The payment link ID for which you want to view the details.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of LinkEntity</returns>
        public cashfree_pg.Client.ApiResponse<LinkEntity> PGCancelLink(string linkId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentLinksApi->PGCancelLink");

            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->PGCancelLink");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("link_id", cashfree_pg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<LinkEntity>("/links/{link_id}/cancel", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCancelLink", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Payment Link Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createLinkRequest">Request Body to Create Payment Links</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of LinkEntity</returns>
        public cashfree_pg.Client.ApiResponse<LinkEntity> PGCreateLink(CreateLinkRequest createLinkRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentLinksApi->PGCreateLink");

            // verify the required parameter 'createLinkRequest' is set
            if (createLinkRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createLinkRequest' when calling PaymentLinksApi->PGCreateLink");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createLinkRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<LinkEntity>("/links", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCreateLink", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch Payment Link Details Use this API to view all details and status of a payment link.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="linkId">The payment link ID for which you want to view the details.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of LinkEntity</returns>
        public cashfree_pg.Client.ApiResponse<LinkEntity> PGFetchLink(string linkId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentLinksApi->PGFetchLink");

            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->PGFetchLink");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("link_id", cashfree_pg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<LinkEntity>("/links/{link_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchLink", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Orders for a Payment Link Use this API to view all order details for a payment link.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="linkId">The payment link ID for which you want to view the details.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="status">Mention What is status of orders you want to fetch, default is PAID. Possible value: ALL, PAID (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentLinkOrderEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<PaymentLinkOrderEntity>> PGLinkFetchOrders(string linkId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), string? status = default(string?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentLinksApi->PGLinkFetchOrders");

            // verify the required parameter 'linkId' is set
            if (linkId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->PGLinkFetchOrders");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("link_id", cashfree_pg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PaymentLinkOrderEntity>>("/links/{link_id}/orders", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGLinkFetchOrders", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Preauthorization Use this API to capture or void a preauthorized payment
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="authorizeOrderRequest">Request to Capture or Void Transactions</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of PaymentEntity</returns>
        public cashfree_pg.Client.ApiResponse<PaymentEntity> PGAuthorizeOrder(string orderId, AuthorizeOrderRequest authorizeOrderRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentsApi->PGAuthorizeOrder");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling PaymentsApi->PGAuthorizeOrder");

            // verify the required parameter 'authorizeOrderRequest' is set
            if (authorizeOrderRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'authorizeOrderRequest' when calling PaymentsApi->PGAuthorizeOrder");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = authorizeOrderRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentEntity>("/orders/{order_id}/authorization", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGAuthorizeOrder", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Submit or Resend OTP If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="cfPaymentId">The Cashfree payment or transaction ID.</param>
        /// <param name="orderAuthenticatePaymentRequest">Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of OrderAuthenticateEntity</returns>
        public cashfree_pg.Client.ApiResponse<OrderAuthenticateEntity> PGOrderAuthenticatePayment(string cfPaymentId, OrderAuthenticatePaymentRequest orderAuthenticatePaymentRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentsApi->PGOrderAuthenticatePayment");

            // verify the required parameter 'cfPaymentId' is set
            if (cfPaymentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfPaymentId' when calling PaymentsApi->PGOrderAuthenticatePayment");

            // verify the required parameter 'orderAuthenticatePaymentRequest' is set
            if (orderAuthenticatePaymentRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderAuthenticatePaymentRequest' when calling PaymentsApi->PGOrderAuthenticatePayment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cf_payment_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfPaymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = orderAuthenticatePaymentRequest;


            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderAuthenticateEntity>("/orders/pay/authenticate/{cf_payment_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderAuthenticatePayment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Payment by ID Use this API to view payment details of an order for a payment ID.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="cfPaymentId">The Cashfree payment or transaction ID.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of PaymentEntity</returns>
        public cashfree_pg.Client.ApiResponse<PaymentEntity> PGOrderFetchPayment(string orderId, string cfPaymentId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentsApi->PGOrderFetchPayment");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling PaymentsApi->PGOrderFetchPayment");

            // verify the required parameter 'cfPaymentId' is set
            if (cfPaymentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfPaymentId' when calling PaymentsApi->PGOrderFetchPayment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cf_payment_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfPaymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentEntity>("/orders/{order_id}/payments/{cf_payment_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderFetchPayment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Payments for an Order Use this API to view all payment details for an order.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<PaymentEntity>> PGOrderFetchPayments(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentsApi->PGOrderFetchPayments");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling PaymentsApi->PGOrderFetchPayments");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PaymentEntity>>("/orders/{order_id}/payments", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderFetchPayments", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Order Pay Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \&quot;care@cashfree.com\&quot;. 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="payOrderRequest">Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of PayOrderEntity</returns>
        public cashfree_pg.Client.ApiResponse<PayOrderEntity> PGPayOrder(PayOrderRequest payOrderRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling PaymentsApi->PGPayOrder");

            // verify the required parameter 'payOrderRequest' is set
            if (payOrderRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'payOrderRequest' when calling PaymentsApi->PGPayOrder");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = payOrderRequest;


            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<PayOrderEntity>("/orders/sessions", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGPayOrder", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Refund Use this API to initiate refunds.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="orderCreateRefundRequest">Request Body to Create Refunds</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of RefundEntity</returns>
        public cashfree_pg.Client.ApiResponse<RefundEntity> PGOrderCreateRefund(string orderId, OrderCreateRefundRequest orderCreateRefundRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling RefundsApi->PGOrderCreateRefund");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling RefundsApi->PGOrderCreateRefund");

            // verify the required parameter 'orderCreateRefundRequest' is set
            if (orderCreateRefundRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderCreateRefundRequest' when calling RefundsApi->PGOrderCreateRefund");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = orderCreateRefundRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<RefundEntity>("/orders/{order_id}/refunds", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderCreateRefund", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Refund Use this API to fetch a specific refund processed on your Cashfree Account.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="refundId">Refund Id of the refund you want to fetch.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of RefundEntity</returns>
        public cashfree_pg.Client.ApiResponse<RefundEntity> PGOrderFetchRefund(string orderId, string refundId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling RefundsApi->PGOrderFetchRefund");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling RefundsApi->PGOrderFetchRefund");

            // verify the required parameter 'refundId' is set
            if (refundId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'refundId' when calling RefundsApi->PGOrderFetchRefund");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("refund_id", cashfree_pg.Client.ClientUtils.ParameterToString(refundId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefundEntity>("/orders/{order_id}/refunds/{refund_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderFetchRefund", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get All Refunds for an Order Use this API to fetch all refunds processed against an order.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;RefundEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<RefundEntity>> PGOrderFetchRefunds(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling RefundsApi->PGOrderFetchRefunds");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling RefundsApi->PGOrderFetchRefunds");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RefundEntity>>("/orders/{order_id}/refunds", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderFetchRefunds", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get All Settlements Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="fetchSettlementsRequest">Request Body to get the settlements</param>
        /// <param name="contentType">application/json (optional)</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="accept">application/json (optional)</param>
        /// <returns>ApiResponse of SettlementEntity</returns>
        public cashfree_pg.Client.ApiResponse<SettlementEntity> PGFetchSettlements(FetchSettlementsRequest fetchSettlementsRequest, string? contentType = default(string?), string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), string? accept = default(string?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SettlementReconciliationApi->PGFetchSettlements");

            // verify the required parameter 'fetchSettlementsRequest' is set
            if (fetchSettlementsRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'fetchSettlementsRequest' when calling SettlementReconciliationApi->PGFetchSettlements");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", cashfree_pg.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", cashfree_pg.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            localVarRequestOptions.Data = fetchSettlementsRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SettlementEntity>("/settlements", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchSettlements", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Settlement Reconciliation - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="settlementFetchReconRequest">Request Body for the settlement reconciliation</param>
        /// <param name="contentType">application/json (optional)</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="accept">application/json (optional)</param>
        /// <returns>ApiResponse of SettlementReconEntity</returns>
        public cashfree_pg.Client.ApiResponse<SettlementReconEntity> PGSettlementFetchRecon(SettlementFetchReconRequest settlementFetchReconRequest, string? contentType = default(string?), string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), string? accept = default(string?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SettlementReconciliationApi->PGSettlementFetchRecon");

            // verify the required parameter 'settlementFetchReconRequest' is set
            if (settlementFetchReconRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'settlementFetchReconRequest' when calling SettlementReconciliationApi->PGSettlementFetchRecon");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", cashfree_pg.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", cashfree_pg.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            localVarRequestOptions.Data = settlementFetchReconRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SettlementReconEntity>("/settlement/recon", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGSettlementFetchRecon", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Mark Order For Settlement Use this API to pass the CBRICS ID to Cashfree and mark an order for settlement.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <param name="createOrderSettlementRequestBody">Create Order Settlement Request Body. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public cashfree_pg.Client.ApiResponse<Object> MarkForSettlement(string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), CreateOrderSettlementRequestBody? createOrderSettlementRequestBody = default(CreateOrderSettlementRequestBody?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SettlementsApi->MarkForSettlement");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createOrderSettlementRequestBody;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/orders/settlements", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkForSettlement", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Settlements by Order ID Use this API to view all the settlements of a particular order.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="orderId">The id which uniquely identifies your order</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SettlementEntity</returns>
        public cashfree_pg.Client.ApiResponse<SettlementEntity> PGOrderFetchSettlement(string orderId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SettlementsApi->PGOrderFetchSettlement");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'orderId' when calling SettlementsApi->PGOrderFetchSettlement");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("order_id", cashfree_pg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<SettlementEntity>("/orders/{order_id}/settlements", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGOrderFetchSettlement", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch Simulation Use this API to fetch simulated payment details.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="simulationId">Provide the SimulationId for which the details have to be fetched.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SimulationResponse</returns>
        public cashfree_pg.Client.ApiResponse<SimulationResponse> PGFetchSimulation(string simulationId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SimulationApi->PGFetchSimulation");

            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'simulationId' when calling SimulationApi->PGFetchSimulation");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("simulation_id", cashfree_pg.Client.ClientUtils.ParameterToString(simulationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<SimulationResponse>("/simulate/{simulation_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGFetchSimulation", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Simulate Payment Use this API to simulate payment. To use this API you should first create an order using the Create Order API. Also, you need to create a payment with the same order.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="simulateRequest">Request Body to Make Simulation</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SimulationResponse</returns>
        public cashfree_pg.Client.ApiResponse<SimulationResponse> PGSimulatePayment(SimulateRequest simulateRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SimulationApi->PGSimulatePayment");

            // verify the required parameter 'simulateRequest' is set
            if (simulateRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'simulateRequest' when calling SimulationApi->PGSimulatePayment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = simulateRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulationResponse>("/simulate", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGSimulatePayment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Terminal Use this API to create new terminals to use softPOS.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createTerminalRequest">Request Body to Create Terminal for SPOS</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of TerminalEntity</returns>
        public cashfree_pg.Client.ApiResponse<TerminalEntity> SposCreateTerminal(CreateTerminalRequest createTerminalRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposCreateTerminal");

            // verify the required parameter 'createTerminalRequest' is set
            if (createTerminalRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createTerminalRequest' when calling SoftPOSApi->SposCreateTerminal");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createTerminalRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<TerminalEntity>("/terminal", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposCreateTerminal", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Terminal Transaction Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createTerminalTransactionRequest">Request body to create a terminal transaction</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of TerminalTransactionEntity</returns>
        public cashfree_pg.Client.ApiResponse<TerminalTransactionEntity> SposCreateTerminalTransaction(CreateTerminalTransactionRequest createTerminalTransactionRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposCreateTerminalTransaction");

            // verify the required parameter 'createTerminalTransactionRequest' is set
            if (createTerminalTransactionRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createTerminalTransactionRequest' when calling SoftPOSApi->SposCreateTerminalTransaction");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createTerminalTransactionRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<TerminalTransactionEntity>("/terminal/transactions", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposCreateTerminalTransaction", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Demap Soundbox Vpa Use this API to demap a device from soundbox.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="demapSoundboxVpaRequest">Request body to demap soundbox vpa</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;SoundboxVpaEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<SoundboxVpaEntity>> SposDemapSoundboxVpa(DemapSoundboxVpaRequest demapSoundboxVpaRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposDemapSoundboxVpa");

            // verify the required parameter 'demapSoundboxVpaRequest' is set
            if (demapSoundboxVpaRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'demapSoundboxVpaRequest' when calling SoftPOSApi->SposDemapSoundboxVpa");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = demapSoundboxVpaRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SoundboxVpaEntity>>("/terminal/demap/soundbox", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposDemapSoundboxVpa", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Terminal Status using Phone Number Use this API to view all details of a terminal.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="terminalPhoneNo">The terminal for which you want to view the order details.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of TerminalEntity</returns>
        public cashfree_pg.Client.ApiResponse<TerminalEntity> SposFetchTerminal(string terminalPhoneNo, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposFetchTerminal");

            // verify the required parameter 'terminalPhoneNo' is set
            if (terminalPhoneNo == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'terminalPhoneNo' when calling SoftPOSApi->SposFetchTerminal");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("terminal_phone_no", cashfree_pg.Client.ClientUtils.ParameterToString(terminalPhoneNo)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<TerminalEntity>("/terminal/{terminal_phone_no}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposFetchTerminal", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch Terminal QR Codes You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="terminalPhoneNo">Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.</param>
        /// <param name="cfTerminalId">Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;FetchTerminalQRCodesEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<FetchTerminalQRCodesEntity>> SposFetchTerminalQRCodes(string terminalPhoneNo, string cfTerminalId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposFetchTerminalQRCodes");

            // verify the required parameter 'terminalPhoneNo' is set
            if (terminalPhoneNo == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'terminalPhoneNo' when calling SoftPOSApi->SposFetchTerminalQRCodes");

            // verify the required parameter 'cfTerminalId' is set
            if (cfTerminalId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfTerminalId' when calling SoftPOSApi->SposFetchTerminalQRCodes");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "terminal_phone_no", terminalPhoneNo));
            localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "cf_terminal_id", cfTerminalId));
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FetchTerminalQRCodesEntity>>("/terminal/qrcodes", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposFetchTerminalQRCodes", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch Terminal Soundbox vpa You can fetch all the active and mapped SoundboxVpa corresponding to given terminal id or deviceSerialNo. Provide either the device_serial_no or cf_terminal_id in the request.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="deviceSerialNo">Device Serial No assinged. Required if you are not providing the cf_terminal_id in the request.</param>
        /// <param name="cfTerminalId">Cashfree terminal id for which you want to get Soundbox Vpa. Required if you are not providing the device_serial_no in the request.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;SoundboxVpaEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<SoundboxVpaEntity>> SposFetchTerminalSoundboxVpa(string deviceSerialNo, string cfTerminalId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposFetchTerminalSoundboxVpa");

            // verify the required parameter 'deviceSerialNo' is set
            if (deviceSerialNo == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'deviceSerialNo' when calling SoftPOSApi->SposFetchTerminalSoundboxVpa");

            // verify the required parameter 'cfTerminalId' is set
            if (cfTerminalId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfTerminalId' when calling SoftPOSApi->SposFetchTerminalSoundboxVpa");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "device_serial_no", deviceSerialNo));
            localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "cf_terminal_id", cfTerminalId));
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SoundboxVpaEntity>>("/terminal/soundbox/qrcodes", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposFetchTerminalSoundboxVpa", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Terminal Transaction Use this API to get  terminal transaction.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="utr">Utr of the transaction.</param>
        /// <param name="cfTerminalId">Provide the Cashfree terminal ID for which the details have to be updated.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of TerminalPaymentEntity</returns>
        public cashfree_pg.Client.ApiResponse<TerminalPaymentEntity> SposFetchTerminalTransaction(string utr, string cfTerminalId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposFetchTerminalTransaction");

            // verify the required parameter 'utr' is set
            if (utr == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'utr' when calling SoftPOSApi->SposFetchTerminalTransaction");

            // verify the required parameter 'cfTerminalId' is set
            if (cfTerminalId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfTerminalId' when calling SoftPOSApi->SposFetchTerminalTransaction");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cf_terminal_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfTerminalId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "utr", utr));
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<TerminalPaymentEntity>("/terminal/{cf_terminal_id}/payments", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposFetchTerminalTransaction", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Onboard Soundbox Vpa Use this API to onboard a terminal Vpa to soundbox.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="onboardSoundboxVpaRequest">Request body to onboard soundbox vpa</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SoundboxVpaEntity</returns>
        public cashfree_pg.Client.ApiResponse<SoundboxVpaEntity> SposOnboardSoundboxVpa(OnboardSoundboxVpaRequest onboardSoundboxVpaRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposOnboardSoundboxVpa");

            // verify the required parameter 'onboardSoundboxVpaRequest' is set
            if (onboardSoundboxVpaRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'onboardSoundboxVpaRequest' when calling SoftPOSApi->SposOnboardSoundboxVpa");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = onboardSoundboxVpaRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SoundboxVpaEntity>("/terminal/soundbox", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposOnboardSoundboxVpa", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Update Soundbox Vpa Use this API to update a terminal Vpa to soundbox.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="cfTerminalId">Provide the Cashfree terminal ID for which the details have to be updated.</param>
        /// <param name="updateSoundboxVpaRequest">Request body to update soundbox vpa</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SoundboxVpaEntity</returns>
        public cashfree_pg.Client.ApiResponse<SoundboxVpaEntity> SposUpdateSoundboxVpa(string cfTerminalId, UpdateSoundboxVpaRequest updateSoundboxVpaRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposUpdateSoundboxVpa");

            // verify the required parameter 'cfTerminalId' is set
            if (cfTerminalId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfTerminalId' when calling SoftPOSApi->SposUpdateSoundboxVpa");

            // verify the required parameter 'updateSoundboxVpaRequest' is set
            if (updateSoundboxVpaRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'updateSoundboxVpaRequest' when calling SoftPOSApi->SposUpdateSoundboxVpa");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cf_terminal_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfTerminalId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = updateSoundboxVpaRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SoundboxVpaEntity>("/terminal/{cf_terminal_id}/soundbox", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposUpdateSoundboxVpa", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Update Terminal Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \&quot;Storefront\&quot;. Only account status change is possible in case of \&quot;Agent\&quot;.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="cfTerminalId">Provide the Cashfree terminal ID for which the details have to be updated.</param>
        /// <param name="updateTerminalRequest">Request Body to update terminal for SPOS.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;UpdateTerminalEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<UpdateTerminalEntity>> SposUpdateTerminal(string cfTerminalId, UpdateTerminalRequest updateTerminalRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposUpdateTerminal");

            // verify the required parameter 'cfTerminalId' is set
            if (cfTerminalId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfTerminalId' when calling SoftPOSApi->SposUpdateTerminal");

            // verify the required parameter 'updateTerminalRequest' is set
            if (updateTerminalRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'updateTerminalRequest' when calling SoftPOSApi->SposUpdateTerminal");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cf_terminal_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfTerminalId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = updateTerminalRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<UpdateTerminalEntity>>("/terminal/{cf_terminal_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposUpdateTerminal", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Update Terminal Status Use this API to update the terminal status.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="cfTerminalId">Provide the Cashfree terminal ID for which the details have to be updated.</param>
        /// <param name="updateTerminalStatusRequest">Request Body to update terminal status for SPOS.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;UpdateTerminalEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<UpdateTerminalEntity>> SposUpdateTerminalStatus(string cfTerminalId, UpdateTerminalStatusRequest updateTerminalStatusRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposUpdateTerminalStatus");

            // verify the required parameter 'cfTerminalId' is set
            if (cfTerminalId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfTerminalId' when calling SoftPOSApi->SposUpdateTerminalStatus");

            // verify the required parameter 'updateTerminalStatusRequest' is set
            if (updateTerminalStatusRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'updateTerminalStatusRequest' when calling SoftPOSApi->SposUpdateTerminalStatus");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cf_terminal_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfTerminalId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = updateTerminalStatusRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<UpdateTerminalEntity>>("/terminal/{cf_terminal_id}/status", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposUpdateTerminalStatus", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Upload Terminal Docs Use this API to upload the terminal documents.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="cfTerminalId">Provide the Cashfree terminal ID for which the details have to be updated.</param>
        /// <param name="uploadTerminalDocs">Request Body to update terminal documents for SPOS.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;UploadTerminalDocsEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<UploadTerminalDocsEntity>> SposUploadTerminalDocs(string cfTerminalId, UploadTerminalDocs uploadTerminalDocs, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SoftPOSApi->SposUploadTerminalDocs");

            // verify the required parameter 'cfTerminalId' is set
            if (cfTerminalId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'cfTerminalId' when calling SoftPOSApi->SposUploadTerminalDocs");

            // verify the required parameter 'uploadTerminalDocs' is set
            if (uploadTerminalDocs == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'uploadTerminalDocs' when calling SoftPOSApi->SposUploadTerminalDocs");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cf_terminal_id", cashfree_pg.Client.ClientUtils.ParameterToString(cfTerminalId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = uploadTerminalDocs;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<UploadTerminalDocsEntity>>("/terminal/{cf_terminal_id}/docs", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SposUploadTerminalDocs", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Raise a charge or create an auth. Use this API to create an auth or to raise a charge.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createSubscriptionPaymentRequest">Request body to create a subscription payment.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of CreateSubscriptionPaymentResponse</returns>
        public cashfree_pg.Client.ApiResponse<CreateSubscriptionPaymentResponse> SubsCreatePayment(CreateSubscriptionPaymentRequest createSubscriptionPaymentRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsCreatePayment");

            // verify the required parameter 'createSubscriptionPaymentRequest' is set
            if (createSubscriptionPaymentRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createSubscriptionPaymentRequest' when calling SubscriptionApi->SubsCreatePayment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createSubscriptionPaymentRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubscriptionPaymentResponse>("/subscriptions/pay", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsCreatePayment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create a plan. A plan allows your customer to identify the features you offer along with your pricing. You can create plans as per the pricing you support for your services. For each plan, you can set a pre-decided frequency and amount with which they’ll be charged. Example: Netflix Plans - Premium, Basic, Standard, Mobile. Each plan differs and caters for a particular set of audiences.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createPlanRequest">Request body to create a plan.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of PlanEntity</returns>
        public cashfree_pg.Client.ApiResponse<PlanEntity> SubsCreatePlan(CreatePlanRequest createPlanRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsCreatePlan");

            // verify the required parameter 'createPlanRequest' is set
            if (createPlanRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createPlanRequest' when calling SubscriptionApi->SubsCreatePlan");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createPlanRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlanEntity>("/plans", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsCreatePlan", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create a refund. This API allows you to create refund on a successful payment. Refund amount can be partial or the full amount of the payment.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionId">Provide the SubscriptionId using which the subscription was created.</param>
        /// <param name="createSubscriptionRefundRequest">Request body to create a subscription refund.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionPaymentRefundEntity</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionPaymentRefundEntity> SubsCreateRefund(string subscriptionId, CreateSubscriptionRefundRequest createSubscriptionRefundRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsCreateRefund");

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->SubsCreateRefund");

            // verify the required parameter 'createSubscriptionRefundRequest' is set
            if (createSubscriptionRefundRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createSubscriptionRefundRequest' when calling SubscriptionApi->SubsCreateRefund");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscription_id", cashfree_pg.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createSubscriptionRefundRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionPaymentRefundEntity>("/subscriptions/{subscription_id}/refunds", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsCreateRefund", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create Subscription Use this API to create a new subscription.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="createSubscriptionRequest">Request body to create a subscription.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionEntity</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionEntity> SubsCreateSubscription(CreateSubscriptionRequest createSubscriptionRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsCreateSubscription");

            // verify the required parameter 'createSubscriptionRequest' is set
            if (createSubscriptionRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'createSubscriptionRequest' when calling SubscriptionApi->SubsCreateSubscription");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = createSubscriptionRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionEntity>("/subscriptions", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsCreateSubscription", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch Plan Use this API to fetch plan details.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="planId">Provide the PlanId for which the details have to be fetched.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of PlanEntity</returns>
        public cashfree_pg.Client.ApiResponse<PlanEntity> SubsFetchPlan(string planId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsFetchPlan");

            // verify the required parameter 'planId' is set
            if (planId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'planId' when calling SubscriptionApi->SubsFetchPlan");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("plan_id", cashfree_pg.Client.ClientUtils.ParameterToString(planId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlanEntity>("/plans/{plan_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsFetchPlan", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch Subscription Use this API to fetch subscription details.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionId">Provide the SubscriptionId using which the subscription was created.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionEntity</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionEntity> SubsFetchSubscription(string subscriptionId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsFetchSubscription");

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->SubsFetchSubscription");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscription_id", cashfree_pg.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionEntity>("/subscriptions/{subscription_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsFetchSubscription", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch details of a single payment. Use this API to fetch details of a single payment of a subscription.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionId">Provide the SubscriptionId using which the subscription was created.</param>
        /// <param name="paymentId">Provide the PaymentId using which the payment was created.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionPaymentEntity</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionPaymentEntity> SubsFetchSubscriptionPayment(string subscriptionId, string paymentId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsFetchSubscriptionPayment");

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->SubsFetchSubscriptionPayment");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'paymentId' when calling SubscriptionApi->SubsFetchSubscriptionPayment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscription_id", cashfree_pg.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_id", cashfree_pg.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionPaymentEntity>("/subscriptions/{subscription_id}/payments/{payment_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsFetchSubscriptionPayment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch details of all payments of a subscription. Use this API to fetch all payments of a subscription.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionId">Provide the SubscriptionId using which the subscription was created.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;SubscriptionPaymentEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<SubscriptionPaymentEntity>> SubsFetchSubscriptionPayments(string subscriptionId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsFetchSubscriptionPayments");

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->SubsFetchSubscriptionPayments");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscription_id", cashfree_pg.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubscriptionPaymentEntity>>("/subscriptions/{subscription_id}/payments", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsFetchSubscriptionPayments", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch details of a refund. Use this API to fetch details of a refund of a subscription payment.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionId">Provide the SubscriptionId using which the subscription was created.</param>
        /// <param name="refundId">Provide the PaymentId for which the details have to be fetched.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionPaymentRefundEntity</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionPaymentRefundEntity> SubsFetchSubscriptionRefund(string subscriptionId, string refundId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsFetchSubscriptionRefund");

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->SubsFetchSubscriptionRefund");

            // verify the required parameter 'refundId' is set
            if (refundId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'refundId' when calling SubscriptionApi->SubsFetchSubscriptionRefund");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscription_id", cashfree_pg.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("refund_id", cashfree_pg.Client.ClientUtils.ParameterToString(refundId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionPaymentRefundEntity>("/subscriptions/{subscription_id}/refunds/{refund_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsFetchSubscriptionRefund", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Manage a subscription. Use this API to manage a subscription. You can cancel, pause, activate or change the plan of a subscription.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionId">Provide the SubscriptionId using which the subscription was created.</param>
        /// <param name="manageSubscriptionRequest">Request body to manage a subscription.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionEntity</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionEntity> SubsManageSubscription(string subscriptionId, ManageSubscriptionRequest manageSubscriptionRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsManageSubscription");

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->SubsManageSubscription");

            // verify the required parameter 'manageSubscriptionRequest' is set
            if (manageSubscriptionRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'manageSubscriptionRequest' when calling SubscriptionApi->SubsManageSubscription");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscription_id", cashfree_pg.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manageSubscriptionRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionEntity>("/subscriptions/{subscription_id}/manage", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsManageSubscription", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Manage a single payment. Use this API to manage a payment of a subscription. A payment can be cancelled or retried with this API.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionId">Provide the SubscriptionId using which the subscription was created.</param>
        /// <param name="paymentId">Provide the PaymentId using which the payment was created.</param>
        /// <param name="manageSubscriptionPaymentRequest">Request body to manage a subscription payment.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionPaymentEntity</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionPaymentEntity> SubsManageSubscriptionPayment(string subscriptionId, string paymentId, ManageSubscriptionPaymentRequest manageSubscriptionPaymentRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubsManageSubscriptionPayment");

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionApi->SubsManageSubscriptionPayment");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'paymentId' when calling SubscriptionApi->SubsManageSubscriptionPayment");

            // verify the required parameter 'manageSubscriptionPaymentRequest' is set
            if (manageSubscriptionPaymentRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'manageSubscriptionPaymentRequest' when calling SubscriptionApi->SubsManageSubscriptionPayment");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscription_id", cashfree_pg.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_id", cashfree_pg.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manageSubscriptionPaymentRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionPaymentEntity>("/subscriptions/{subscription_id}/payments/{payment_id}/manage", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubsManageSubscriptionPayment", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// API to upload file for Physical Nach Authorization. Use this API to upload file for Physical Nach Authorization.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="paymentId">Provide the PaymentId using which the payment was created.</param>
        /// <param name="file">Select the .jpg file that should be uploaded or provide the path of that file. You cannot upload a file that is more than 1MB in size.</param>
        /// <param name="paymentId2">Authorization Payment Id for physical nach authorization</param>
        /// <param name="action">Action to be performed on the file. Can be SUBMIT_DOCUMENT</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of UploadPnachImageResponse</returns>
        public cashfree_pg.Client.ApiResponse<UploadPnachImageResponse> SubscriptionDocumentUpload(string paymentId, System.IO.Stream file, string paymentId2, string action, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubscriptionDocumentUpload");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'paymentId' when calling SubscriptionApi->SubscriptionDocumentUpload");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'file' when calling SubscriptionApi->SubscriptionDocumentUpload");

            // verify the required parameter 'paymentId2' is set
            if (paymentId2 == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'paymentId2' when calling SubscriptionApi->SubscriptionDocumentUpload");

            // verify the required parameter 'action' is set
            if (action == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'action' when calling SubscriptionApi->SubscriptionDocumentUpload");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("payment_id", cashfree_pg.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("payment_id", cashfree_pg.Client.ClientUtils.ParameterToString(paymentId2)); // form parameter
            localVarRequestOptions.FormParameters.Add("action", cashfree_pg.Client.ClientUtils.ParameterToString(action)); // form parameter

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadPnachImageResponse>("/subscriptions/pay/documents/{payment_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionDocumentUpload", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// API to get all the payment method details available for subscription payments. Use this API to check if a payment method is enabled for your account.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="subscriptionEligibilityRequest">Request body to fetch subscription eligibile payment method details.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of SubscriptionEligibilityResponse</returns>
        public cashfree_pg.Client.ApiResponse<SubscriptionEligibilityResponse> SubscriptionEligibility(SubscriptionEligibilityRequest subscriptionEligibilityRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling SubscriptionApi->SubscriptionEligibility");

            // verify the required parameter 'subscriptionEligibilityRequest' is set
            if (subscriptionEligibilityRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'subscriptionEligibilityRequest' when calling SubscriptionApi->SubscriptionEligibility");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = subscriptionEligibilityRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionEligibilityResponse>("/subscriptions/eligibility/payment_methods", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionEligibility", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Delete Saved Card Instrument Use this API to delete a saved card instrument for a customer_id and instrument_id
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="customerId">Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;</param>
        /// <param name="instrumentId">The instrument_id which needs to be deleted</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of InstrumentEntity</returns>
        public cashfree_pg.Client.ApiResponse<InstrumentEntity> PGCustomerDeleteInstrument(string customerId, string instrumentId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TokenVaultApi->PGCustomerDeleteInstrument");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->PGCustomerDeleteInstrument");

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->PGCustomerDeleteInstrument");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("customer_id", cashfree_pg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfree_pg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<InstrumentEntity>("/customers/{customer_id}/instruments/{instrument_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCustomerDeleteInstrument", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch Specific Saved Card Instrument Use this API to fetch a single specific saved card for a customer_id by it&#39;s instrument_id
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="customerId">Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;</param>
        /// <param name="instrumentId">The instrument_id of the saved instrument which needs to be queried</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of InstrumentEntity</returns>
        public cashfree_pg.Client.ApiResponse<InstrumentEntity> PGCustomerFetchInstrument(string customerId, string instrumentId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TokenVaultApi->PGCustomerFetchInstrument");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->PGCustomerFetchInstrument");

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->PGCustomerFetchInstrument");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("customer_id", cashfree_pg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfree_pg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<InstrumentEntity>("/customers/{customer_id}/instruments/{instrument_id}", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCustomerFetchInstrument", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch All Saved Card Instrument Use this API to fetch saved cards for a customer_id 
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="customerId">Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;</param>
        /// <param name="instrumentType">Payment mode or type of saved instrument </param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of List&lt;InstrumentEntity&gt;</returns>
        public cashfree_pg.Client.ApiResponse<List<InstrumentEntity>> PGCustomerFetchInstruments(string customerId, string instrumentType, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TokenVaultApi->PGCustomerFetchInstruments");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->PGCustomerFetchInstruments");

            // verify the required parameter 'instrumentType' is set
            if (instrumentType == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'instrumentType' when calling TokenVaultApi->PGCustomerFetchInstruments");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("customer_id", cashfree_pg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(cashfree_pg.Client.ClientUtils.ParameterToMultiMap("", "instrument_type", instrumentType));
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InstrumentEntity>>("/customers/{customer_id}/instruments", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCustomerFetchInstruments", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Fetch cryptogram for a saved card instrument Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="customerId">Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;</param>
        /// <param name="instrumentId">The instrument_id of the saved card instrument which needs to be queried</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of CryptogramEntity</returns>
        public cashfree_pg.Client.ApiResponse<CryptogramEntity> PGCustomerInstrumentsFetchCryptogram(string customerId, string instrumentId, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TokenVaultApi->PGCustomerInstrumentsFetchCryptogram");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->PGCustomerInstrumentsFetchCryptogram");

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->PGCustomerInstrumentsFetchCryptogram");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("customer_id", cashfree_pg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfree_pg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Get<CryptogramEntity>("/customers/{customer_id}/instruments/{instrument_id}/cryptogram", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCustomerInstrumentsFetchCryptogram", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Create PAR at Cashfree Create PAR at Cashfree using card details.
        /// </summary>
        /// <exception cref="cashfree_pg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">API version to be used. Format is in YYYY-MM-DD</param>
        /// <param name="pARRequest">Request payload for creating PAR.</param>
        /// <param name="xRequestId">Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree (optional)</param>
        /// <param name="xIdempotencyKey">An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.   (optional)</param>
        /// <returns>ApiResponse of PGCreatePAR200Response</returns>
        public cashfree_pg.Client.ApiResponse<PGCreatePAR200Response> PGCreatePAR(PARRequest pARRequest, string? xRequestId = default(string?), Guid? xIdempotencyKey = default(Guid?), Configuration? configuration = null)
        {
            string xApiVersion = this.XApiVersion;
            var env = "sandbox";
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_pg.Client.ApiClient("https://sandbox.cashfree.com/pg");
            if(this.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_pg.Client.ApiClient("https://api.cashfree.com/pg");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling UtilitiesApi->PGCreatePAR");

            // verify the required parameter 'pARRequest' is set
            if (pARRequest == null)
                throw new cashfree_pg.Client.ApiException(400, "Missing required parameter 'pARRequest' when calling UtilitiesApi->PGCreatePAR");

            cashfree_pg.Client.RequestOptions localVarRequestOptions = new cashfree_pg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_pg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_pg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_pg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_pg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfree_pg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = pARRequest;

            // authentication (XPartnerAPIKey) required
            
            
            // authentication (XClientSecret) required
            
            
            // authentication (XPartnerMerchantID) required
            
            
            // authentication (XClientID) required
            
            
            // authentication (XClientSignatureHeader) required
            
            

            if (!string.IsNullOrEmpty(this.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", this.XClientId);
            }

            if (!string.IsNullOrEmpty(this.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", this.XClientSecret);
            }

            if (!string.IsNullOrEmpty(this.XPartnerApiKey))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-apikey", this.XPartnerApiKey);
            }

            if (!string.IsNullOrEmpty(this.XPartnerMerchantId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-partner-merchantid", this.XPartnerMerchantId);
            }

            if (!string.IsNullOrEmpty(this.XClientSignature))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-signature", this.XClientSignature);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-5.0.3-beta-2");

            // make the HTTP request
            var localVarResponse = this.Client.Post<PGCreatePAR200Response>("/pg/utilities/pars", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PGCreatePAR", localVarResponse);
                if (_exception != null) {
                    if(this.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }


    /// <summary>
    /// Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
    /// </summary>
    internal class CustomJsonCodec : IRestSerializer, ISerializer, IDeserializer
    {
        private readonly IReadableConfiguration _configuration;
        private readonly JsonSerializerSettings _serializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };

        public CustomJsonCodec(IReadableConfiguration configuration)
        {
            _configuration = configuration;
        }

        public CustomJsonCodec(JsonSerializerSettings serializerSettings, IReadableConfiguration configuration)
        {
            _serializerSettings = serializerSettings;
            _configuration = configuration;
        }

        /// <summary>
        /// Serialize the object into a JSON string.
        /// </summary>
        /// <param name="obj">Object to be serialized.</param>
        /// <returns>A JSON string.</returns>
        public string Serialize(object obj)
        {
            if (obj != null && obj is cashfree_pg.Model.AbstractOpenAPISchema)
            {
                // the object to be serialized is an oneOf/anyOf schema
                return ((cashfree_pg.Model.AbstractOpenAPISchema)obj).ToJson();
            }
            else
            {
                return JsonConvert.SerializeObject(obj, _serializerSettings);
            }
        }

        public string Serialize(Parameter bodyParameter) => Serialize(bodyParameter.Value);

        public T Deserialize<T>(RestResponse response)
        {
            var result = (T)Deserialize(response, typeof(T));
            return result;
        }

        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        internal object Deserialize(RestResponse response, Type type)
        {
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }

            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                var bytes = response.RawBytes;
                if (response.Headers != null)
                {
                    var filePath = string.IsNullOrEmpty(_configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : _configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in response.Headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + ClientUtils.SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, bytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(bytes);
                return stream;
            }

            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content, null, System.Globalization.DateTimeStyles.RoundtripKind);
            }

            if (type == typeof(string) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return Convert.ChangeType(response.Content, type);
            }

            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, _serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        public ISerializer Serializer => this;
        public IDeserializer Deserializer => this;

        public string[] AcceptedContentTypes => RestSharp.ContentType.JsonAccept;

        public SupportsContentType SupportsContentType => contentType =>
            contentType.Value.EndsWith("json", StringComparison.InvariantCultureIgnoreCase) ||
            contentType.Value.EndsWith("javascript", StringComparison.InvariantCultureIgnoreCase);

        public ContentType ContentType { get; set; } = RestSharp.ContentType.Json;

        public DataFormat DataFormat => DataFormat.Json;
    }
    /// <summary>
    /// Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
    /// encapsulating general REST accessor use cases.
    /// </summary>
    internal partial class ApiClient : ISynchronousClient, IAsynchronousClient
    {
        private readonly string _baseUrl;

        /// <summary>
        /// Specifies the settings on a <see cref="JsonSerializer" /> object.
        /// These settings can be adjusted to accommodate custom serialization rules.
        /// </summary>
        public JsonSerializerSettings SerializerSettings { get; set; } = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };

        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(RestRequest request);

        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(RestRequest request, RestResponse response);

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />, defaulting to the global configurations' base url.
        /// </summary>
        public ApiClient()
        {
            _baseUrl = cashfree_pg.Client.GlobalConfiguration.Instance.BasePath;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        public ApiClient(string basePath)
        {
            if (string.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");

            _baseUrl = basePath;
        }

        /// <summary>
        /// Constructs the RestSharp version of an http method
        /// </summary>
        /// <param name="method">Swagger Client Custom HttpMethod</param>
        /// <returns>RestSharp's HttpMethod instance.</returns>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        private RestSharpMethod Method(HttpMethod method)
        {
            RestSharpMethod other;
            switch (method)
            {
                case HttpMethod.Get:
                    other = RestSharpMethod.Get;
                    break;
                case HttpMethod.Post:
                    other = RestSharpMethod.Post;
                    break;
                case HttpMethod.Put:
                    other = RestSharpMethod.Put;
                    break;
                case HttpMethod.Delete:
                    other = RestSharpMethod.Delete;
                    break;
                case HttpMethod.Head:
                    other = RestSharpMethod.Head;
                    break;
                case HttpMethod.Options:
                    other = RestSharpMethod.Options;
                    break;
                case HttpMethod.Patch:
                    other = RestSharpMethod.Patch;
                    break;
                default:
                    throw new ArgumentOutOfRangeException("method", method, null);
            }

            return other;
        }

        /// <summary>
        /// Provides all logic for constructing a new RestSharp <see cref="RestRequest"/>.
        /// At this point, all information for querying the service is known. Here, it is simply
        /// mapped into the RestSharp request.
        /// </summary>
        /// <param name="method">The http verb.</param>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>[private] A new RestRequest instance.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        private RestRequest NewRequest(
            HttpMethod method,
            string path,
            RequestOptions options,
            IReadableConfiguration configuration)
        {
            if (path == null) throw new ArgumentNullException("path");
            if (options == null) throw new ArgumentNullException("options");
            if (configuration == null) throw new ArgumentNullException("configuration");

            RestRequest request = new RestRequest(path, Method(method));

            if (options.PathParameters != null)
            {
                foreach (var pathParam in options.PathParameters)
                {
                    request.AddParameter(pathParam.Key, pathParam.Value, ParameterType.UrlSegment);
                }
            }

            if (options.QueryParameters != null)
            {
                foreach (var queryParam in options.QueryParameters)
                {
                    foreach (var value in queryParam.Value)
                    {
                        request.AddQueryParameter(queryParam.Key, value);
                    }
                }
            }

            if (configuration.DefaultHeaders != null)
            {
                foreach (var headerParam in configuration.DefaultHeaders)
                {
                    request.AddHeader(headerParam.Key, headerParam.Value);
                }
            }

            if (options.HeaderParameters != null)
            {
                foreach (var headerParam in options.HeaderParameters)
                {
                    foreach (var value in headerParam.Value)
                    {
                        request.AddHeader(headerParam.Key, value);
                    }
                }
            }

            if (options.FormParameters != null)
            {
                foreach (var formParam in options.FormParameters)
                {
                    request.AddParameter(formParam.Key, formParam.Value);
                }
            }

            if (options.Data != null)
            {
                if (options.Data is Stream stream)
                {
                    var contentType = "application/octet-stream";
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        contentType = contentTypes[0];
                    }

                    var bytes = ClientUtils.ReadAsBytes(stream);
                    request.AddParameter(contentType, bytes, ParameterType.RequestBody);
                }
                else
                {
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        if (contentTypes == null || contentTypes.Any(header => header.Contains("application/json")))
                        {
                            request.RequestFormat = DataFormat.Json;
                        }
                        else
                        {
                            // TODO: Generated client user should add additional handlers. RestSharp only supports XML and JSON, with XML as default.
                        }
                    }
                    else
                    {
                        // Here, we'll assume JSON APIs are more common. XML can be forced by adding produces/consumes to openapi spec explicitly.
                        request.RequestFormat = DataFormat.Json;
                    }

                    request.AddJsonBody(options.Data);
                }
            }

            if (options.FileParameters != null)
            {
                foreach (var fileParam in options.FileParameters)
                {
                    foreach (var file in fileParam.Value)
                    {
                        var bytes = ClientUtils.ReadAsBytes(file);
                        var fileStream = file as FileStream;
                        if (fileStream != null)
                            request.AddFile(fileParam.Key, bytes, System.IO.Path.GetFileName(fileStream.Name));
                        else
                            request.AddFile(fileParam.Key, bytes, "no_file_name_provided");
                    }
                }
            }

            return request;
        }

        private ApiResponse<T> ToApiResponse<T>(RestResponse<T> response)
        {
            T result = response.Data;
            string rawContent = response.Content;

            var transformed = new ApiResponse<T>(response.StatusCode, new Multimap<string, string>(), result, rawContent)
            {
                ErrorText = response.ErrorMessage,
                Cookies = new List<Cookie>()
            };

            if (response.Headers != null)
            {
                foreach (var responseHeader in response.Headers)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }

            if (response.ContentHeaders != null)
            {
                foreach (var responseHeader in response.ContentHeaders)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }

            if (response.Cookies != null)
            {
                foreach (var responseCookies in response.Cookies.Cast<Cookie>())
                {
                    transformed.Cookies.Add(
                        new Cookie(
                            responseCookies.Name,
                            responseCookies.Value,
                            responseCookies.Path,
                            responseCookies.Domain)
                        );
                }
            }

            return transformed;
        }

        private ApiResponse<T> Exec<T>(RestRequest request, RequestOptions options, IReadableConfiguration configuration)
        {
            var baseUrl = _baseUrl;

            var cookies = new CookieContainer();

            if (options.Cookies != null && options.Cookies.Count > 0)
            {
                foreach (var cookie in options.Cookies)
                {
                    cookies.Add(new Cookie(cookie.Name, cookie.Value));
                }
            }

            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                CookieContainer = cookies,
                MaxTimeout = configuration.Timeout,
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent,
                UseDefaultCredentials = configuration.UseDefaultCredentials,
                RemoteCertificateValidationCallback = configuration.RemoteCertificateValidationCallback
            };

            using (RestClient client = new RestClient(clientOptions,
                configureSerialization: serializerConfig => serializerConfig.UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration))))
            {
                InterceptRequest(request);

                RestResponse<T> response;
                if (RetryConfiguration.RetryPolicy != null)
                {
                    var policy = RetryConfiguration.RetryPolicy;
                    var policyResult = policy.ExecuteAndCapture(() => client.Execute(request));
                    response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result) : new RestResponse<T>(request)
                    {
                        ErrorException = policyResult.FinalException
                    };
                }
                else
                {
                    response = client.Execute<T>(request);
                }

                // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
                if (typeof(cashfree_pg.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
                {
                    try
                    {
                        response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                    }
                    catch (Exception ex)
                    {
                        throw ex.InnerException != null ? ex.InnerException : ex;
                    }
                }
                else if (typeof(T).Name == "Stream") // for binary response
                {
                    response.Data = (T)(object)new MemoryStream(response.RawBytes);
                }
                else if (typeof(T).Name == "Byte[]") // for byte response
                {
                    response.Data = (T)(object)response.RawBytes;
                }
                else if (typeof(T).Name == "String") // for string response
                {
                    response.Data = (T)(object)response.Content;
                }

                InterceptResponse(request, response);

                var result = ToApiResponse(response);
                if (response.ErrorMessage != null)
                {
                    result.ErrorText = response.ErrorMessage;
                }

                if (response.Cookies != null && response.Cookies.Count > 0)
                {
                    if (result.Cookies == null) result.Cookies = new List<Cookie>();
                    foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                    {
                        var cookie = new Cookie(
                            restResponseCookie.Name,
                            restResponseCookie.Value,
                            restResponseCookie.Path,
                            restResponseCookie.Domain
                        )
                        {
                            Comment = restResponseCookie.Comment,
                            CommentUri = restResponseCookie.CommentUri,
                            Discard = restResponseCookie.Discard,
                            Expired = restResponseCookie.Expired,
                            Expires = restResponseCookie.Expires,
                            HttpOnly = restResponseCookie.HttpOnly,
                            Port = restResponseCookie.Port,
                            Secure = restResponseCookie.Secure,
                            Version = restResponseCookie.Version
                        };

                        result.Cookies.Add(cookie);
                    }
                }
                return result;
            }
        }

        private async Task<ApiResponse<T>> ExecAsync<T>(RestRequest request, RequestOptions options, IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var baseUrl = configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;

            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                MaxTimeout = configuration.Timeout,
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent,
                UseDefaultCredentials = configuration.UseDefaultCredentials
            };

            using (RestClient client = new RestClient(clientOptions,
                configureSerialization: serializerConfig => serializerConfig.UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration))))
            {
                InterceptRequest(request);

                RestResponse<T> response;
                if (RetryConfiguration.AsyncRetryPolicy != null)
                {
                    var policy = RetryConfiguration.AsyncRetryPolicy;
                    var policyResult = await policy.ExecuteAndCaptureAsync((ct) => client.ExecuteAsync(request, ct), cancellationToken).ConfigureAwait(false);
                    response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result) : new RestResponse<T>(request)
                    {
                        ErrorException = policyResult.FinalException
                    };
                }
                else
                {
                    response = await client.ExecuteAsync<T>(request, cancellationToken).ConfigureAwait(false);
                }

                // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
                if (typeof(cashfree_pg.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
                {
                    response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                }
                else if (typeof(T).Name == "Stream") // for binary response
                {
                    response.Data = (T)(object)new MemoryStream(response.RawBytes);
                }
                else if (typeof(T).Name == "Byte[]") // for byte response
                {
                    response.Data = (T)(object)response.RawBytes;
                }

                InterceptResponse(request, response);

                var result = ToApiResponse(response);
                if (response.ErrorMessage != null)
                {
                    result.ErrorText = response.ErrorMessage;
                }

                if (response.Cookies != null && response.Cookies.Count > 0)
                {
                    if (result.Cookies == null) result.Cookies = new List<Cookie>();
                    foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                    {
                        var cookie = new Cookie(
                            restResponseCookie.Name,
                            restResponseCookie.Value,
                            restResponseCookie.Path,
                            restResponseCookie.Domain
                        )
                        {
                            Comment = restResponseCookie.Comment,
                            CommentUri = restResponseCookie.CommentUri,
                            Discard = restResponseCookie.Discard,
                            Expired = restResponseCookie.Expired,
                            Expires = restResponseCookie.Expires,
                            HttpOnly = restResponseCookie.HttpOnly,
                            Port = restResponseCookie.Port,
                            Secure = restResponseCookie.Secure,
                            Version = restResponseCookie.Version
                        };

                        result.Cookies.Add(cookie);
                    }
                }
                return result;
            }
        }

        #region IAsynchronousClient
        /// <summary>
        /// Make a HTTP GET request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> GetAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Get, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP POST request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PostAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Post, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP PUT request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PutAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Put, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP DELETE request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> DeleteAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP HEAD request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> HeadAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Head, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP OPTION request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> OptionsAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Options, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP PATCH request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PatchAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config, cancellationToken);
        }
        #endregion IAsynchronousClient

        #region ISynchronousClient
        /// <summary>
        /// Make a HTTP GET request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Get<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Get, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP POST request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Post<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Post, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP PUT request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Put<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Put, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP DELETE request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Delete<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP HEAD request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Head<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Head, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP OPTION request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Options<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Options, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP PATCH request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Patch<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config);
        }
        #endregion ISynchronousClient
    }
}
