/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// SettlementReconEntityDataInner
    /// </summary>
    [DataContract(Name = "SettlementReconEntity_data_inner")]
    public class SettlementReconEntityDataInner : IEquatable<SettlementReconEntityDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementReconEntityDataInner" /> class.
        /// </summary>
        /// <param name="eventId">Unique ID associated with the event..</param>
        /// <param name="eventType">The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT..</param>
        /// <param name="eventSettlementAmount">Amount that is part of the settlement corresponding to the event..</param>
        /// <param name="eventAmount">Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc..</param>
        /// <param name="saleType">Indicates if it is CREDIT/DEBIT sale..</param>
        /// <param name="eventStatus">Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED..</param>
        /// <param name="entity">Recon.</param>
        /// <param name="eventTime">Time associated with the event. Example, transaction time, dispute initiation time.</param>
        /// <param name="eventCurrency">Curreny type - INR..</param>
        /// <param name="orderId">Unique order ID. Alphanumeric and only &#39;-&#39; and &#39;_&#39; allowed..</param>
        /// <param name="orderAmount">The amount which was passed at the order creation time..</param>
        /// <param name="customerPhone">Customer phone number..</param>
        /// <param name="customerEmail">Customer email..</param>
        /// <param name="customerName">Customer name..</param>
        /// <param name="paymentAmount">Payment amount captured..</param>
        /// <param name="paymentUtr">Unique transaction reference number of the payment..</param>
        /// <param name="paymentTime">Date and time when the payment was initiated..</param>
        /// <param name="paymentServiceCharge">Service charge applicable for the payment..</param>
        /// <param name="paymentServiceTax">Service tax applicable on the payment..</param>
        /// <param name="cfPaymentId">Cashfree Payments unique ID to identify a payment..</param>
        /// <param name="cfSettlementId">Unique ID to identify the settlement..</param>
        /// <param name="settlementDate">Date and time when the settlement was processed..</param>
        /// <param name="settlementUtr">Unique transaction reference number of the settlement..</param>
        /// <param name="splitServiceCharge">Service charge that is applicable for splitting the payment..</param>
        /// <param name="splitServiceTax">Service tax applicable for splitting the amount to vendors..</param>
        /// <param name="vendorCommission">Vendor commission applicable for this transaction..</param>
        /// <param name="closedInFavorOf">Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer..</param>
        /// <param name="disputeResolvedOn">Date and time when the dispute was resolved..</param>
        /// <param name="disputeCategory">Category of the dispute - Dispute code and the reason for dispute is shown..</param>
        /// <param name="disputeNote">Note regarding the dispute..</param>
        /// <param name="refundProcessedAt">Date and time when the refund was processed..</param>
        /// <param name="refundArn">The bank reference number for refund..</param>
        /// <param name="refundNote">A refund note for your reference..</param>
        /// <param name="refundId">An unique ID associated with the refund..</param>
        /// <param name="adjustmentRemarks">Other adjustment remarks..</param>
        public SettlementReconEntityDataInner(string? eventId = default(string?), string? eventType = default(string?), decimal? eventSettlementAmount = default(decimal?), decimal? eventAmount = default(decimal?), string? saleType = default(string?), string? eventStatus = default(string?), string? entity = default(string?), string? eventTime = default(string?), string? eventCurrency = default(string?), string? orderId = default(string?), decimal? orderAmount = default(decimal?), string? customerPhone = default(string?), string? customerEmail = default(string?), string? customerName = default(string?), decimal? paymentAmount = default(decimal?), string? paymentUtr = default(string?), string? paymentTime = default(string?), decimal? paymentServiceCharge = default(decimal?), decimal? paymentServiceTax = default(decimal?), string? cfPaymentId = default(string?), string? cfSettlementId = default(string?), string? settlementDate = default(string?), string? settlementUtr = default(string?), decimal? splitServiceCharge = default(decimal?), decimal? splitServiceTax = default(decimal?), decimal? vendorCommission = default(decimal?), string? closedInFavorOf = default(string?), string? disputeResolvedOn = default(string?), string? disputeCategory = default(string?), string? disputeNote = default(string?), string? refundProcessedAt = default(string?), string? refundArn = default(string?), string? refundNote = default(string?), string? refundId = default(string?), string? adjustmentRemarks = default(string?))
        {
            this.event_id = eventId;
            this.event_type = eventType;
            this.event_settlement_amount = eventSettlementAmount;
            this.event_amount = eventAmount;
            this.sale_type = saleType;
            this.event_status = eventStatus;
            this.entity = entity;
            this.event_time = eventTime;
            this.event_currency = eventCurrency;
            this.order_id = orderId;
            this.order_amount = orderAmount;
            this.customer_phone = customerPhone;
            this.customer_email = customerEmail;
            this.customer_name = customerName;
            this.payment_amount = paymentAmount;
            this.payment_utr = paymentUtr;
            this.payment_time = paymentTime;
            this.payment_service_charge = paymentServiceCharge;
            this.payment_service_tax = paymentServiceTax;
            this.cf_payment_id = cfPaymentId;
            this.cf_settlement_id = cfSettlementId;
            this.settlement_date = settlementDate;
            this.settlement_utr = settlementUtr;
            this.split_service_charge = splitServiceCharge;
            this.split_service_tax = splitServiceTax;
            this.vendor_commission = vendorCommission;
            this.closed_in_favor_of = closedInFavorOf;
            this.dispute_resolved_on = disputeResolvedOn;
            this.dispute_category = disputeCategory;
            this.dispute_note = disputeNote;
            this.refund_processed_at = refundProcessedAt;
            this.refund_arn = refundArn;
            this.refund_note = refundNote;
            this.refund_id = refundId;
            this.adjustment_remarks = adjustmentRemarks;
        }

        /// <summary>
        /// Unique ID associated with the event.
        /// </summary>
        /// <value>Unique ID associated with the event.</value>
        [DataMember(Name = "event_id", EmitDefaultValue = false)]
        public string? event_id { get; set; }

        /// <summary>
        /// The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
        /// </summary>
        /// <value>The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.</value>
        [DataMember(Name = "event_type", EmitDefaultValue = false)]
        public string? event_type { get; set; }

        /// <summary>
        /// Amount that is part of the settlement corresponding to the event.
        /// </summary>
        /// <value>Amount that is part of the settlement corresponding to the event.</value>
        [DataMember(Name = "event_settlement_amount", EmitDefaultValue = false)]
        public decimal? event_settlement_amount { get; set; }

        /// <summary>
        /// Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.
        /// </summary>
        /// <value>Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.</value>
        [DataMember(Name = "event_amount", EmitDefaultValue = false)]
        public decimal? event_amount { get; set; }

        /// <summary>
        /// Indicates if it is CREDIT/DEBIT sale.
        /// </summary>
        /// <value>Indicates if it is CREDIT/DEBIT sale.</value>
        [DataMember(Name = "sale_type", EmitDefaultValue = false)]
        public string? sale_type { get; set; }

        /// <summary>
        /// Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
        /// </summary>
        /// <value>Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.</value>
        [DataMember(Name = "event_status", EmitDefaultValue = false)]
        public string? event_status { get; set; }

        /// <summary>
        /// Recon
        /// </summary>
        /// <value>Recon</value>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string? entity { get; set; }

        /// <summary>
        /// Time associated with the event. Example, transaction time, dispute initiation time
        /// </summary>
        /// <value>Time associated with the event. Example, transaction time, dispute initiation time</value>
        [DataMember(Name = "event_time", EmitDefaultValue = false)]
        public string? event_time { get; set; }

        /// <summary>
        /// Curreny type - INR.
        /// </summary>
        /// <value>Curreny type - INR.</value>
        [DataMember(Name = "event_currency", EmitDefaultValue = false)]
        public string? event_currency { get; set; }

        /// <summary>
        /// Unique order ID. Alphanumeric and only &#39;-&#39; and &#39;_&#39; allowed.
        /// </summary>
        /// <value>Unique order ID. Alphanumeric and only &#39;-&#39; and &#39;_&#39; allowed.</value>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string? order_id { get; set; }

        /// <summary>
        /// The amount which was passed at the order creation time.
        /// </summary>
        /// <value>The amount which was passed at the order creation time.</value>
        [DataMember(Name = "order_amount", EmitDefaultValue = false)]
        public decimal? order_amount { get; set; }

        /// <summary>
        /// Customer phone number.
        /// </summary>
        /// <value>Customer phone number.</value>
        [DataMember(Name = "customer_phone", EmitDefaultValue = false)]
        public string? customer_phone { get; set; }

        /// <summary>
        /// Customer email.
        /// </summary>
        /// <value>Customer email.</value>
        [DataMember(Name = "customer_email", EmitDefaultValue = false)]
        public string? customer_email { get; set; }

        /// <summary>
        /// Customer name.
        /// </summary>
        /// <value>Customer name.</value>
        [DataMember(Name = "customer_name", EmitDefaultValue = false)]
        public string? customer_name { get; set; }

        /// <summary>
        /// Payment amount captured.
        /// </summary>
        /// <value>Payment amount captured.</value>
        [DataMember(Name = "payment_amount", EmitDefaultValue = false)]
        public decimal? payment_amount { get; set; }

        /// <summary>
        /// Unique transaction reference number of the payment.
        /// </summary>
        /// <value>Unique transaction reference number of the payment.</value>
        [DataMember(Name = "payment_utr", EmitDefaultValue = false)]
        public string? payment_utr { get; set; }

        /// <summary>
        /// Date and time when the payment was initiated.
        /// </summary>
        /// <value>Date and time when the payment was initiated.</value>
        [DataMember(Name = "payment_time", EmitDefaultValue = false)]
        public string? payment_time { get; set; }

        /// <summary>
        /// Service charge applicable for the payment.
        /// </summary>
        /// <value>Service charge applicable for the payment.</value>
        [DataMember(Name = "payment_service_charge", EmitDefaultValue = false)]
        public decimal? payment_service_charge { get; set; }

        /// <summary>
        /// Service tax applicable on the payment.
        /// </summary>
        /// <value>Service tax applicable on the payment.</value>
        [DataMember(Name = "payment_service_tax", EmitDefaultValue = false)]
        public decimal? payment_service_tax { get; set; }

        /// <summary>
        /// Cashfree Payments unique ID to identify a payment.
        /// </summary>
        /// <value>Cashfree Payments unique ID to identify a payment.</value>
        [DataMember(Name = "cf_payment_id", EmitDefaultValue = false)]
        public string? cf_payment_id { get; set; }

        /// <summary>
        /// Unique ID to identify the settlement.
        /// </summary>
        /// <value>Unique ID to identify the settlement.</value>
        [DataMember(Name = "cf_settlement_id", EmitDefaultValue = false)]
        public string? cf_settlement_id { get; set; }

        /// <summary>
        /// Date and time when the settlement was processed.
        /// </summary>
        /// <value>Date and time when the settlement was processed.</value>
        [DataMember(Name = "settlement_date", EmitDefaultValue = false)]
        public string? settlement_date { get; set; }

        /// <summary>
        /// Unique transaction reference number of the settlement.
        /// </summary>
        /// <value>Unique transaction reference number of the settlement.</value>
        [DataMember(Name = "settlement_utr", EmitDefaultValue = false)]
        public string? settlement_utr { get; set; }

        /// <summary>
        /// Service charge that is applicable for splitting the payment.
        /// </summary>
        /// <value>Service charge that is applicable for splitting the payment.</value>
        [DataMember(Name = "split_service_charge", EmitDefaultValue = false)]
        public decimal? split_service_charge { get; set; }

        /// <summary>
        /// Service tax applicable for splitting the amount to vendors.
        /// </summary>
        /// <value>Service tax applicable for splitting the amount to vendors.</value>
        [DataMember(Name = "split_service_tax", EmitDefaultValue = false)]
        public decimal? split_service_tax { get; set; }

        /// <summary>
        /// Vendor commission applicable for this transaction.
        /// </summary>
        /// <value>Vendor commission applicable for this transaction.</value>
        [DataMember(Name = "vendor_commission", EmitDefaultValue = false)]
        public decimal? vendor_commission { get; set; }

        /// <summary>
        /// Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.
        /// </summary>
        /// <value>Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.</value>
        [DataMember(Name = "closed_in_favor_of", EmitDefaultValue = false)]
        public string? closed_in_favor_of { get; set; }

        /// <summary>
        /// Date and time when the dispute was resolved.
        /// </summary>
        /// <value>Date and time when the dispute was resolved.</value>
        [DataMember(Name = "dispute_resolved_on", EmitDefaultValue = false)]
        public string? dispute_resolved_on { get; set; }

        /// <summary>
        /// Category of the dispute - Dispute code and the reason for dispute is shown.
        /// </summary>
        /// <value>Category of the dispute - Dispute code and the reason for dispute is shown.</value>
        [DataMember(Name = "dispute_category", EmitDefaultValue = false)]
        public string? dispute_category { get; set; }

        /// <summary>
        /// Note regarding the dispute.
        /// </summary>
        /// <value>Note regarding the dispute.</value>
        [DataMember(Name = "dispute_note", EmitDefaultValue = false)]
        public string? dispute_note { get; set; }

        /// <summary>
        /// Date and time when the refund was processed.
        /// </summary>
        /// <value>Date and time when the refund was processed.</value>
        [DataMember(Name = "refund_processed_at", EmitDefaultValue = false)]
        public string? refund_processed_at { get; set; }

        /// <summary>
        /// The bank reference number for refund.
        /// </summary>
        /// <value>The bank reference number for refund.</value>
        [DataMember(Name = "refund_arn", EmitDefaultValue = false)]
        public string? refund_arn { get; set; }

        /// <summary>
        /// A refund note for your reference.
        /// </summary>
        /// <value>A refund note for your reference.</value>
        [DataMember(Name = "refund_note", EmitDefaultValue = false)]
        public string? refund_note { get; set; }

        /// <summary>
        /// An unique ID associated with the refund.
        /// </summary>
        /// <value>An unique ID associated with the refund.</value>
        [DataMember(Name = "refund_id", EmitDefaultValue = false)]
        public string? refund_id { get; set; }

        /// <summary>
        /// Other adjustment remarks.
        /// </summary>
        /// <value>Other adjustment remarks.</value>
        [DataMember(Name = "adjustment_remarks", EmitDefaultValue = false)]
        public string? adjustment_remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementReconEntityDataInner {\n");
            sb.Append("  event_id: ").Append(event_id).Append("\n");
            sb.Append("  event_type: ").Append(event_type).Append("\n");
            sb.Append("  event_settlement_amount: ").Append(event_settlement_amount).Append("\n");
            sb.Append("  event_amount: ").Append(event_amount).Append("\n");
            sb.Append("  sale_type: ").Append(sale_type).Append("\n");
            sb.Append("  event_status: ").Append(event_status).Append("\n");
            sb.Append("  entity: ").Append(entity).Append("\n");
            sb.Append("  event_time: ").Append(event_time).Append("\n");
            sb.Append("  event_currency: ").Append(event_currency).Append("\n");
            sb.Append("  order_id: ").Append(order_id).Append("\n");
            sb.Append("  order_amount: ").Append(order_amount).Append("\n");
            sb.Append("  customer_phone: ").Append(customer_phone).Append("\n");
            sb.Append("  customer_email: ").Append(customer_email).Append("\n");
            sb.Append("  customer_name: ").Append(customer_name).Append("\n");
            sb.Append("  payment_amount: ").Append(payment_amount).Append("\n");
            sb.Append("  payment_utr: ").Append(payment_utr).Append("\n");
            sb.Append("  payment_time: ").Append(payment_time).Append("\n");
            sb.Append("  payment_service_charge: ").Append(payment_service_charge).Append("\n");
            sb.Append("  payment_service_tax: ").Append(payment_service_tax).Append("\n");
            sb.Append("  cf_payment_id: ").Append(cf_payment_id).Append("\n");
            sb.Append("  cf_settlement_id: ").Append(cf_settlement_id).Append("\n");
            sb.Append("  settlement_date: ").Append(settlement_date).Append("\n");
            sb.Append("  settlement_utr: ").Append(settlement_utr).Append("\n");
            sb.Append("  split_service_charge: ").Append(split_service_charge).Append("\n");
            sb.Append("  split_service_tax: ").Append(split_service_tax).Append("\n");
            sb.Append("  vendor_commission: ").Append(vendor_commission).Append("\n");
            sb.Append("  closed_in_favor_of: ").Append(closed_in_favor_of).Append("\n");
            sb.Append("  dispute_resolved_on: ").Append(dispute_resolved_on).Append("\n");
            sb.Append("  dispute_category: ").Append(dispute_category).Append("\n");
            sb.Append("  dispute_note: ").Append(dispute_note).Append("\n");
            sb.Append("  refund_processed_at: ").Append(refund_processed_at).Append("\n");
            sb.Append("  refund_arn: ").Append(refund_arn).Append("\n");
            sb.Append("  refund_note: ").Append(refund_note).Append("\n");
            sb.Append("  refund_id: ").Append(refund_id).Append("\n");
            sb.Append("  adjustment_remarks: ").Append(adjustment_remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementReconEntityDataInner);
        }

        /// <summary>
        /// Returns true if SettlementReconEntityDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementReconEntityDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementReconEntityDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.event_id == input.event_id ||
                    (this.event_id != null &&
                    this.event_id.Equals(input.event_id))
                ) && 
                (
                    this.event_type == input.event_type ||
                    (this.event_type != null &&
                    this.event_type.Equals(input.event_type))
                ) && 
                (
                    this.event_settlement_amount == input.event_settlement_amount ||
                    this.event_settlement_amount.Equals(input.event_settlement_amount)
                ) && 
                (
                    this.event_amount == input.event_amount ||
                    this.event_amount.Equals(input.event_amount)
                ) && 
                (
                    this.sale_type == input.sale_type ||
                    (this.sale_type != null &&
                    this.sale_type.Equals(input.sale_type))
                ) && 
                (
                    this.event_status == input.event_status ||
                    (this.event_status != null &&
                    this.event_status.Equals(input.event_status))
                ) && 
                (
                    this.entity == input.entity ||
                    (this.entity != null &&
                    this.entity.Equals(input.entity))
                ) && 
                (
                    this.event_time == input.event_time ||
                    (this.event_time != null &&
                    this.event_time.Equals(input.event_time))
                ) && 
                (
                    this.event_currency == input.event_currency ||
                    (this.event_currency != null &&
                    this.event_currency.Equals(input.event_currency))
                ) && 
                (
                    this.order_id == input.order_id ||
                    (this.order_id != null &&
                    this.order_id.Equals(input.order_id))
                ) && 
                (
                    this.order_amount == input.order_amount ||
                    this.order_amount.Equals(input.order_amount)
                ) && 
                (
                    this.customer_phone == input.customer_phone ||
                    (this.customer_phone != null &&
                    this.customer_phone.Equals(input.customer_phone))
                ) && 
                (
                    this.customer_email == input.customer_email ||
                    (this.customer_email != null &&
                    this.customer_email.Equals(input.customer_email))
                ) && 
                (
                    this.customer_name == input.customer_name ||
                    (this.customer_name != null &&
                    this.customer_name.Equals(input.customer_name))
                ) && 
                (
                    this.payment_amount == input.payment_amount ||
                    this.payment_amount.Equals(input.payment_amount)
                ) && 
                (
                    this.payment_utr == input.payment_utr ||
                    (this.payment_utr != null &&
                    this.payment_utr.Equals(input.payment_utr))
                ) && 
                (
                    this.payment_time == input.payment_time ||
                    (this.payment_time != null &&
                    this.payment_time.Equals(input.payment_time))
                ) && 
                (
                    this.payment_service_charge == input.payment_service_charge ||
                    this.payment_service_charge.Equals(input.payment_service_charge)
                ) && 
                (
                    this.payment_service_tax == input.payment_service_tax ||
                    this.payment_service_tax.Equals(input.payment_service_tax)
                ) && 
                (
                    this.cf_payment_id == input.cf_payment_id ||
                    (this.cf_payment_id != null &&
                    this.cf_payment_id.Equals(input.cf_payment_id))
                ) && 
                (
                    this.cf_settlement_id == input.cf_settlement_id ||
                    (this.cf_settlement_id != null &&
                    this.cf_settlement_id.Equals(input.cf_settlement_id))
                ) && 
                (
                    this.settlement_date == input.settlement_date ||
                    (this.settlement_date != null &&
                    this.settlement_date.Equals(input.settlement_date))
                ) && 
                (
                    this.settlement_utr == input.settlement_utr ||
                    (this.settlement_utr != null &&
                    this.settlement_utr.Equals(input.settlement_utr))
                ) && 
                (
                    this.split_service_charge == input.split_service_charge ||
                    this.split_service_charge.Equals(input.split_service_charge)
                ) && 
                (
                    this.split_service_tax == input.split_service_tax ||
                    this.split_service_tax.Equals(input.split_service_tax)
                ) && 
                (
                    this.vendor_commission == input.vendor_commission ||
                    this.vendor_commission.Equals(input.vendor_commission)
                ) && 
                (
                    this.closed_in_favor_of == input.closed_in_favor_of ||
                    (this.closed_in_favor_of != null &&
                    this.closed_in_favor_of.Equals(input.closed_in_favor_of))
                ) && 
                (
                    this.dispute_resolved_on == input.dispute_resolved_on ||
                    (this.dispute_resolved_on != null &&
                    this.dispute_resolved_on.Equals(input.dispute_resolved_on))
                ) && 
                (
                    this.dispute_category == input.dispute_category ||
                    (this.dispute_category != null &&
                    this.dispute_category.Equals(input.dispute_category))
                ) && 
                (
                    this.dispute_note == input.dispute_note ||
                    (this.dispute_note != null &&
                    this.dispute_note.Equals(input.dispute_note))
                ) && 
                (
                    this.refund_processed_at == input.refund_processed_at ||
                    (this.refund_processed_at != null &&
                    this.refund_processed_at.Equals(input.refund_processed_at))
                ) && 
                (
                    this.refund_arn == input.refund_arn ||
                    (this.refund_arn != null &&
                    this.refund_arn.Equals(input.refund_arn))
                ) && 
                (
                    this.refund_note == input.refund_note ||
                    (this.refund_note != null &&
                    this.refund_note.Equals(input.refund_note))
                ) && 
                (
                    this.refund_id == input.refund_id ||
                    (this.refund_id != null &&
                    this.refund_id.Equals(input.refund_id))
                ) && 
                (
                    this.adjustment_remarks == input.adjustment_remarks ||
                    (this.adjustment_remarks != null &&
                    this.adjustment_remarks.Equals(input.adjustment_remarks))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringevent_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringevent_id);
            if (deserializedJsonString.ContainsKey("event_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.event_id != null)
                {
                    hashCode = (hashCode * 59) + this.event_id.GetHashCode();
                }
                if (this.event_type != null)
                {
                    hashCode = (hashCode * 59) + this.event_type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.event_settlement_amount.GetHashCode();
                hashCode = (hashCode * 59) + this.event_amount.GetHashCode();
                if (this.sale_type != null)
                {
                    hashCode = (hashCode * 59) + this.sale_type.GetHashCode();
                }
                if (this.event_status != null)
                {
                    hashCode = (hashCode * 59) + this.event_status.GetHashCode();
                }
                if (this.entity != null)
                {
                    hashCode = (hashCode * 59) + this.entity.GetHashCode();
                }
                if (this.event_time != null)
                {
                    hashCode = (hashCode * 59) + this.event_time.GetHashCode();
                }
                if (this.event_currency != null)
                {
                    hashCode = (hashCode * 59) + this.event_currency.GetHashCode();
                }
                if (this.order_id != null)
                {
                    hashCode = (hashCode * 59) + this.order_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.order_amount.GetHashCode();
                if (this.customer_phone != null)
                {
                    hashCode = (hashCode * 59) + this.customer_phone.GetHashCode();
                }
                if (this.customer_email != null)
                {
                    hashCode = (hashCode * 59) + this.customer_email.GetHashCode();
                }
                if (this.customer_name != null)
                {
                    hashCode = (hashCode * 59) + this.customer_name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.payment_amount.GetHashCode();
                if (this.payment_utr != null)
                {
                    hashCode = (hashCode * 59) + this.payment_utr.GetHashCode();
                }
                if (this.payment_time != null)
                {
                    hashCode = (hashCode * 59) + this.payment_time.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.payment_service_charge.GetHashCode();
                hashCode = (hashCode * 59) + this.payment_service_tax.GetHashCode();
                if (this.cf_payment_id != null)
                {
                    hashCode = (hashCode * 59) + this.cf_payment_id.GetHashCode();
                }
                if (this.cf_settlement_id != null)
                {
                    hashCode = (hashCode * 59) + this.cf_settlement_id.GetHashCode();
                }
                if (this.settlement_date != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_date.GetHashCode();
                }
                if (this.settlement_utr != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_utr.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.split_service_charge.GetHashCode();
                hashCode = (hashCode * 59) + this.split_service_tax.GetHashCode();
                hashCode = (hashCode * 59) + this.vendor_commission.GetHashCode();
                if (this.closed_in_favor_of != null)
                {
                    hashCode = (hashCode * 59) + this.closed_in_favor_of.GetHashCode();
                }
                if (this.dispute_resolved_on != null)
                {
                    hashCode = (hashCode * 59) + this.dispute_resolved_on.GetHashCode();
                }
                if (this.dispute_category != null)
                {
                    hashCode = (hashCode * 59) + this.dispute_category.GetHashCode();
                }
                if (this.dispute_note != null)
                {
                    hashCode = (hashCode * 59) + this.dispute_note.GetHashCode();
                }
                if (this.refund_processed_at != null)
                {
                    hashCode = (hashCode * 59) + this.refund_processed_at.GetHashCode();
                }
                if (this.refund_arn != null)
                {
                    hashCode = (hashCode * 59) + this.refund_arn.GetHashCode();
                }
                if (this.refund_note != null)
                {
                    hashCode = (hashCode * 59) + this.refund_note.GetHashCode();
                }
                if (this.refund_id != null)
                {
                    hashCode = (hashCode * 59) + this.refund_id.GetHashCode();
                }
                if (this.adjustment_remarks != null)
                {
                    hashCode = (hashCode * 59) + this.adjustment_remarks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
