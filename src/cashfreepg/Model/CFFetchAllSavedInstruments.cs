/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFFetchAllSavedInstruments
    /// </summary>
    [DataContract(Name = "CFFetchAllSavedInstruments")]
    public partial class CFFetchAllSavedInstruments : IEquatable<CFFetchAllSavedInstruments>, IValidatableObject
    {
        /// <summary>
        /// Type of the saved instrument
        /// </summary>
        /// <value>Type of the saved instrument</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentTypeEnum
        {
            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 1

        }


        /// <summary>
        /// Type of the saved instrument
        /// </summary>
        /// <value>Type of the saved instrument</value>
        [DataMember(Name = "instrument_type", EmitDefaultValue = false)]
        public InstrumentTypeEnum? InstrumentType { get; set; }
        /// <summary>
        /// status of the saved instrument
        /// </summary>
        /// <value>status of the saved instrument</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2

        }


        /// <summary>
        /// status of the saved instrument
        /// </summary>
        /// <value>status of the saved instrument</value>
        [DataMember(Name = "instrument_status", EmitDefaultValue = false)]
        public InstrumentStatusEnum? InstrumentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFFetchAllSavedInstruments" /> class.
        /// </summary>
        /// <param name="customerId">customer_id for which the instrument was saved.</param>
        /// <param name="afaReference">cf_payment_id of the successful transaction done while saving instrument.</param>
        /// <param name="instrumentId">saved instrument id.</param>
        /// <param name="instrumentType">Type of the saved instrument.</param>
        /// <param name="instrumentUid">Unique id for the saved instrument.</param>
        /// <param name="instrumentDisplay">masked card number displayed to the customer.</param>
        /// <param name="instrumentStatus">status of the saved instrument.</param>
        /// <param name="createdAt">timestamp at which instrument was saved.</param>
        /// <param name="instrumentMeta">instrumentMeta.</param>
        public CFFetchAllSavedInstruments(string? customerId = default(string?), int? afaReference = default(int?), string? instrumentId = default(string?), InstrumentTypeEnum? instrumentType = default(InstrumentTypeEnum?), string? instrumentUid = default(string?), string? instrumentDisplay = default(string?), InstrumentStatusEnum? instrumentStatus = default(InstrumentStatusEnum?), string? createdAt = default(string?), CFSavedInstrumentMeta? instrumentMeta = default(CFSavedInstrumentMeta?))
        {
            this.CustomerId = customerId;
            this.AfaReference = afaReference;
            this.InstrumentId = instrumentId;
            this.InstrumentType = instrumentType;
            this.InstrumentUid = instrumentUid;
            this.InstrumentDisplay = instrumentDisplay;
            this.InstrumentStatus = instrumentStatus;
            this.CreatedAt = createdAt;
            this.InstrumentMeta = instrumentMeta;
        }

        /// <summary>
        /// customer_id for which the instrument was saved
        /// </summary>
        /// <value>customer_id for which the instrument was saved</value>
        [DataMember(Name = "customer_id", EmitDefaultValue = false)]
        public string? CustomerId { get; set; }

        /// <summary>
        /// cf_payment_id of the successful transaction done while saving instrument
        /// </summary>
        /// <value>cf_payment_id of the successful transaction done while saving instrument</value>
        [DataMember(Name = "afa_reference", EmitDefaultValue = false)]
        public int? AfaReference { get; set; }

        /// <summary>
        /// saved instrument id
        /// </summary>
        /// <value>saved instrument id</value>
        [DataMember(Name = "instrument_id", EmitDefaultValue = false)]
        public string? InstrumentId { get; set; }

        /// <summary>
        /// Unique id for the saved instrument
        /// </summary>
        /// <value>Unique id for the saved instrument</value>
        [DataMember(Name = "instrument_uid", EmitDefaultValue = false)]
        public string? InstrumentUid { get; set; }

        /// <summary>
        /// masked card number displayed to the customer
        /// </summary>
        /// <value>masked card number displayed to the customer</value>
        [DataMember(Name = "instrument_display", EmitDefaultValue = false)]
        public string? InstrumentDisplay { get; set; }

        /// <summary>
        /// timestamp at which instrument was saved
        /// </summary>
        /// <value>timestamp at which instrument was saved</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentMeta
        /// </summary>
        [DataMember(Name = "instrument_meta", EmitDefaultValue = false)]
        public CFSavedInstrumentMeta? InstrumentMeta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFFetchAllSavedInstruments {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  AfaReference: ").Append(AfaReference).Append("\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("  InstrumentUid: ").Append(InstrumentUid).Append("\n");
            sb.Append("  InstrumentDisplay: ").Append(InstrumentDisplay).Append("\n");
            sb.Append("  InstrumentStatus: ").Append(InstrumentStatus).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  InstrumentMeta: ").Append(InstrumentMeta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFFetchAllSavedInstruments);
        }

        /// <summary>
        /// Returns true if CFFetchAllSavedInstruments instances are equal
        /// </summary>
        /// <param name="input">Instance of CFFetchAllSavedInstruments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFFetchAllSavedInstruments? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.AfaReference == input.AfaReference ||
                    this.AfaReference.Equals(input.AfaReference)
                ) && 
                (
                    this.InstrumentId == input.InstrumentId ||
                    (this.InstrumentId != null &&
                    this.InstrumentId.Equals(input.InstrumentId))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    this.InstrumentType.Equals(input.InstrumentType)
                ) && 
                (
                    this.InstrumentUid == input.InstrumentUid ||
                    (this.InstrumentUid != null &&
                    this.InstrumentUid.Equals(input.InstrumentUid))
                ) && 
                (
                    this.InstrumentDisplay == input.InstrumentDisplay ||
                    (this.InstrumentDisplay != null &&
                    this.InstrumentDisplay.Equals(input.InstrumentDisplay))
                ) && 
                (
                    this.InstrumentStatus == input.InstrumentStatus ||
                    this.InstrumentStatus.Equals(input.InstrumentStatus)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.InstrumentMeta == input.InstrumentMeta ||
                    (this.InstrumentMeta != null &&
                    this.InstrumentMeta.Equals(input.InstrumentMeta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AfaReference.GetHashCode();
                if (this.InstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstrumentType.GetHashCode();
                if (this.InstrumentUid != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentUid.GetHashCode();
                }
                if (this.InstrumentDisplay != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentDisplay.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstrumentStatus.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.InstrumentMeta != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentMeta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
