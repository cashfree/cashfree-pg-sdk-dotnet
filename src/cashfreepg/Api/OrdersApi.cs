/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using cashfreepg.Client;
using cashfreepg.Model;
using cashfreepg.Interface;

namespace cashfreepg.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Use this API to create orders with Cashfree from your backend and get the payment link
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <returns>CFOrder</returns>
        CFOrderResponse CreateOrder(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));

        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Use this API to create orders with Cashfree from your backend and get the payment link
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of CFOrder</returns>
        ApiResponse<CFOrder> CreateOrderWithHttpInfo(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));
        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Use this API to view all details of an order.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFOrder</returns>
        CFOrderResponse GetOrder(string xClientId, string xClientSecret, string orderId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));

        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Use this API to view all details of an order.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFOrder</returns>
        ApiResponse<CFOrder> GetOrderWithHttpInfo(string xClientId, string xClientSecret, string orderId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));
        /// <summary>
        /// Order Pay
        /// </summary>
        /// <remarks>
        /// Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <returns>CFOrderPayResponse</returns>
        CFPayResponse OrderPay(string xApiVersion, CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?));

        /// <summary>
        /// Order Pay
        /// </summary>
        /// <remarks>
        /// Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <returns>ApiResponse of CFOrderPayResponse</returns>
        ApiResponse<CFOrderPayResponse> OrderPayWithHttpInfo(string xApiVersion, CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?));
        /// <summary>
        /// Preauthorization
        /// </summary>
        /// <remarks>
        /// Use this API to capture or void a preauthorized payment
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <returns>CFPaymentsEntity</returns>
        CFPaymentsEntity Preauthorization(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));

        /// <summary>
        /// Preauthorization
        /// </summary>
        /// <remarks>
        /// Use this API to capture or void a preauthorized payment
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <returns>ApiResponse of CFPaymentsEntity</returns>
        ApiResponse<CFPaymentsEntity> PreauthorizationWithHttpInfo(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Use this API to create orders with Cashfree from your backend and get the payment link
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFOrder</returns>
        System.Threading.Tasks.Task<CFOrder> CreateOrderAsync(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>
        /// Use this API to create orders with Cashfree from your backend and get the payment link
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFOrder>> CreateOrderWithHttpInfoAsync(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Use this API to view all details of an order.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFOrder</returns>
        System.Threading.Tasks.Task<CFOrder> GetOrderAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), bool? xIdempotencyReplayed = default(bool?), string xIdempotencyKey = "");

        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Use this API to view all details of an order.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFOrder>> GetOrderWithHttpInfoAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), bool? xIdempotencyReplayed = default(bool?), string xIdempotencyKey = "");
        /// <summary>
        /// Order Pay
        /// </summary>
        /// <remarks>
        /// Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFOrderPayResponse</returns>
        System.Threading.Tasks.Task<CFOrderPayResponse> OrderPayAsync(string xApiVersion, CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Order Pay
        /// </summary>
        /// <remarks>
        /// Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFOrderPayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFOrderPayResponse>> OrderPayWithHttpInfoAsync(string xApiVersion, CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Preauthorization
        /// </summary>
        /// <remarks>
        /// Use this API to capture or void a preauthorized payment
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFPaymentsEntity</returns>
        System.Threading.Tasks.Task<CFPaymentsEntity> PreauthorizationAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Preauthorization
        /// </summary>
        /// <remarks>
        /// Use this API to capture or void a preauthorized payment
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFPaymentsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFPaymentsEntity>> PreauthorizationWithHttpInfoAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private cashfreepg.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)"") // TODO: THIS WAS null. I changed to ""
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = cashfreepg.Client.Configuration.MergeConfigurations(
                cashfreepg.Client.GlobalConfiguration.Instance,
                new cashfreepg.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(cashfreepg.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cashfreepg.Client.Configuration.MergeConfigurations(
                cashfreepg.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(cashfreepg.Client.ISynchronousClient client, cashfreepg.Client.IAsynchronousClient asyncClient, cashfreepg.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cashfreepg.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cashfreepg.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cashfreepg.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cashfreepg.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Order Use this API to create orders with Cashfree from your backend and get the payment link
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <returns>CFOrder</returns>

        public CFOrderResponse CreateOrder(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFOrder> localVarResponse = CreateOrderWithHttpInfo(xClientId, xClientSecret, xApiVersion, cFOrderRequest, xRequestId, xIdempotencyReplayed, xIdempotencyKey);
            CFOrder cfOrder = (localVarResponse.Data as CFOrder);
            return new CFOrderResponse(cfOrder, localVarResponse.Headers);
        }

        /// <summary>
        /// Create Order Use this API to create orders with Cashfree from your backend and get the payment link
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of CFOrder</returns>
        public cashfreepg.Client.ApiResponse<CFOrder> CreateOrderWithHttpInfo(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling OrdersApi->CreateOrder");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling OrdersApi->CreateOrder");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = cFOrderRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CFOrder>("/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Order Use this API to create orders with Cashfree from your backend and get the payment link
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFOrder</returns>
        public async System.Threading.Tasks.Task<CFOrder> CreateOrderAsync(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFOrder> localVarResponse = await CreateOrderWithHttpInfoAsync(xClientId, xClientSecret, xApiVersion, cFOrderRequest, xRequestId, xIdempotencyReplayed, xIdempotencyKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Order Use this API to create orders with Cashfree from your backend and get the payment link
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFOrder)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFOrder>> CreateOrderWithHttpInfoAsync(string xClientId, string xClientSecret, string xApiVersion, CFOrderRequest cFOrderRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling OrdersApi->CreateOrder");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling OrdersApi->CreateOrder");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = cFOrderRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CFOrder>("/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Use this API to view all details of an order.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFOrder</returns>
        public CFOrderResponse GetOrder(string xClientId, string xClientSecret, string orderId, string xApiVersion , string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFOrder> localVarResponse = GetOrderWithHttpInfo(xClientId, xClientSecret, orderId, xApiVersion,xRequestId, xIdempotencyReplayed, xIdempotencyKey);
            CFOrder cfOrder = (localVarResponse.Data as CFOrder);
            return new CFOrderResponse(cfOrder, localVarResponse.Headers);
        }

        /// <summary>
        /// Get Order Use this API to view all details of an order.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFOrder</returns>
        public cashfreepg.Client.ApiResponse<CFOrder> GetOrderWithHttpInfo(string xClientId, string xClientSecret, string orderId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling OrdersApi->GetOrder");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling OrdersApi->GetOrder");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrder");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", cashfreepg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            string endPoint = "/orders/" + orderId;
            var localVarResponse = this.Client.Get<CFOrder>(endPoint, localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Use this API to view all details of an order.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFOrder</returns>
        public async System.Threading.Tasks.Task<CFOrder> GetOrderAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, string? xRequestId = default(string?),System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), bool? xIdempotencyReplayed = default(bool?), string xIdempotencyKey = "")
        {
            cashfreepg.Client.ApiResponse<CFOrder> localVarResponse = await GetOrderWithHttpInfoAsync(xClientId, xClientSecret, orderId, xApiVersion, xRequestId, cancellationToken, xIdempotencyReplayed, xIdempotencyKey).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Use this API to view all details of an order.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFOrder)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFOrder>> GetOrderWithHttpInfoAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, string? xRequestId = default(string?) , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), bool? xIdempotencyReplayed = default(bool?), string xIdempotencyKey = "")
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling OrdersApi->GetOrder");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling OrdersApi->GetOrder");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrder");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", cashfreepg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CFOrder>("/orders/{order_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Pay Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <returns>CFOrderPayResponse</returns>
        public CFPayResponse OrderPay(string xApiVersion , CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFOrderPayResponse> localVarResponse = OrderPayWithHttpInfo(xApiVersion, cFOrderPayRequest, xRequestId);
            return new CFPayResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Order Pay Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <returns>ApiResponse of CFOrderPayResponse</returns>
        public cashfreepg.Client.ApiResponse<CFOrderPayResponse> OrderPayWithHttpInfo(string xApiVersion, CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?))
        {
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OrdersApi->OrderPay");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            localVarRequestOptions.Data = cFOrderPayRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CFOrderPayResponse>("/orders/pay", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderPay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Pay Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFOrderPayResponse</returns>
        public async System.Threading.Tasks.Task<CFOrderPayResponse> OrderPayAsync(string xApiVersion, CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFOrderPayResponse> localVarResponse = await OrderPayWithHttpInfoAsync(xApiVersion, cFOrderPayRequest, xRequestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Order Pay Use this API when you have already created the orders and want Cashfree to process the payment.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion"></param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFOrderPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFOrderPayResponse)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFOrderPayResponse>> OrderPayWithHttpInfoAsync(string xApiVersion, CFOrderPayRequest cFOrderPayRequest, string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling OrdersApi->OrderPay");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            localVarRequestOptions.Data = cFOrderPayRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CFOrderPayResponse>("/orders/pay", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderPay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preauthorization Use this API to capture or void a preauthorized payment
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <returns>CFPaymentsEntity</returns>
        public CFPaymentsEntity Preauthorization(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFPaymentsEntity> localVarResponse = PreauthorizationWithHttpInfo(xClientId, xClientSecret, orderId, xApiVersion, cFAuthorizationRequest, xRequestId, xIdempotencyReplayed, xIdempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preauthorization Use this API to capture or void a preauthorized payment
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <returns>ApiResponse of CFPaymentsEntity</returns>
        public cashfreepg.Client.ApiResponse<CFPaymentsEntity> PreauthorizationWithHttpInfo(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling OrdersApi->Preauthorization");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling OrdersApi->Preauthorization");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->Preauthorization");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", cashfreepg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = cFAuthorizationRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CFPaymentsEntity>("/orders/{order_id}/authorization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Preauthorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preauthorization Use this API to capture or void a preauthorized payment
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFPaymentsEntity</returns>
        public async System.Threading.Tasks.Task<CFPaymentsEntity> PreauthorizationAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFPaymentsEntity> localVarResponse = await PreauthorizationWithHttpInfoAsync(xClientId, xClientSecret, orderId, xApiVersion, cFAuthorizationRequest, xRequestId, xIdempotencyReplayed, xIdempotencyKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preauthorization Use this API to capture or void a preauthorized payment
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="orderId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFAuthorizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFPaymentsEntity)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFPaymentsEntity>> PreauthorizationWithHttpInfoAsync(string xClientId, string xClientSecret, string orderId, string xApiVersion, CFAuthorizationRequest cFAuthorizationRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling OrdersApi->Preauthorization");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling OrdersApi->Preauthorization");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->Preauthorization");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", cashfreepg.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = cFAuthorizationRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CFPaymentsEntity>("/orders/{order_id}/authorization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Preauthorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
