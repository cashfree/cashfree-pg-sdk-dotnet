/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Response of pnach image upload API.
    /// </summary>
    [DataContract(Name = "UploadPnachImageResponse")]
    public class UploadPnachImageResponse : IEquatable<UploadPnachImageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadPnachImageResponse" /> class.
        /// </summary>
        /// <param name="paymentId">The payment_id against which the pnach image is uploaded..</param>
        /// <param name="authorizationStatus">Authorization status of the subscription..</param>
        /// <param name="action">Action performed on the file..</param>
        /// <param name="paymentMessage">Message of the API..</param>
        public UploadPnachImageResponse(string? paymentId = default(string?), string? authorizationStatus = default(string?), string? action = default(string?), string? paymentMessage = default(string?))
        {
            this.payment_id = paymentId;
            this.authorization_status = authorizationStatus;
            this.action = action;
            this.payment_message = paymentMessage;
        }

        /// <summary>
        /// The payment_id against which the pnach image is uploaded.
        /// </summary>
        /// <value>The payment_id against which the pnach image is uploaded.</value>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string? payment_id { get; set; }

        /// <summary>
        /// Authorization status of the subscription.
        /// </summary>
        /// <value>Authorization status of the subscription.</value>
        [DataMember(Name = "authorization_status", EmitDefaultValue = false)]
        public string? authorization_status { get; set; }

        /// <summary>
        /// Action performed on the file.
        /// </summary>
        /// <value>Action performed on the file.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public string? action { get; set; }

        /// <summary>
        /// Message of the API.
        /// </summary>
        /// <value>Message of the API.</value>
        [DataMember(Name = "payment_message", EmitDefaultValue = false)]
        public string? payment_message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadPnachImageResponse {\n");
            sb.Append("  payment_id: ").Append(payment_id).Append("\n");
            sb.Append("  authorization_status: ").Append(authorization_status).Append("\n");
            sb.Append("  action: ").Append(action).Append("\n");
            sb.Append("  payment_message: ").Append(payment_message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadPnachImageResponse);
        }

        /// <summary>
        /// Returns true if UploadPnachImageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadPnachImageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadPnachImageResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.payment_id == input.payment_id ||
                    (this.payment_id != null &&
                    this.payment_id.Equals(input.payment_id))
                ) && 
                (
                    this.authorization_status == input.authorization_status ||
                    (this.authorization_status != null &&
                    this.authorization_status.Equals(input.authorization_status))
                ) && 
                (
                    this.action == input.action ||
                    (this.action != null &&
                    this.action.Equals(input.action))
                ) && 
                (
                    this.payment_message == input.payment_message ||
                    (this.payment_message != null &&
                    this.payment_message.Equals(input.payment_message))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringpayment_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringpayment_id);
            if (deserializedJsonString.ContainsKey("payment_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.payment_id != null)
                {
                    hashCode = (hashCode * 59) + this.payment_id.GetHashCode();
                }
                if (this.authorization_status != null)
                {
                    hashCode = (hashCode * 59) + this.authorization_status.GetHashCode();
                }
                if (this.action != null)
                {
                    hashCode = (hashCode * 59) + this.action.GetHashCode();
                }
                if (this.payment_message != null)
                {
                    hashCode = (hashCode * 59) + this.payment_message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
