/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// SettlementReconEntityDataInnerEventDetails
    /// </summary>
    [DataContract(Name = "SettlementReconEntity_data_inner_event_details")]
    public class SettlementReconEntityDataInnerEventDetails : IEquatable<SettlementReconEntityDataInnerEventDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementReconEntityDataInnerEventDetails" /> class.
        /// </summary>
        /// <param name="eventId">Unique ID associated with the event..</param>
        /// <param name="eventType">The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT..</param>
        /// <param name="eventSettlementAmount">Amount that is part of the settlement corresponding to the event..</param>
        /// <param name="eventAmount">Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc..</param>
        /// <param name="saleType">Indicates if it is CREDIT/DEBIT sale..</param>
        /// <param name="eventStatus">Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED..</param>
        /// <param name="entity">Recon.</param>
        /// <param name="eventTime">Time associated with the event. Example, transaction time, dispute initiation time.</param>
        /// <param name="eventCurrency">Curreny type - INR..</param>
        /// <param name="eventServiceCharge">Service charge for above event_type..</param>
        /// <param name="eventServiceTax">Service tax for above event_type..</param>
        /// <param name="eventRemarks">Remarks for above event_type..</param>
        public SettlementReconEntityDataInnerEventDetails(string? eventId = default(string?), string? eventType = default(string?), decimal? eventSettlementAmount = default(decimal?), decimal? eventAmount = default(decimal?), string? saleType = default(string?), string? eventStatus = default(string?), string? entity = default(string?), string? eventTime = default(string?), string? eventCurrency = default(string?), decimal? eventServiceCharge = default(decimal?), decimal? eventServiceTax = default(decimal?), decimal? eventRemarks = default(decimal?))
        {
            this.event_id = eventId;
            this.event_type = eventType;
            this.event_settlement_amount = eventSettlementAmount;
            this.event_amount = eventAmount;
            this.sale_type = saleType;
            this.event_status = eventStatus;
            this.entity = entity;
            this.event_time = eventTime;
            this.event_currency = eventCurrency;
            this.event_service_charge = eventServiceCharge;
            this.event_service_tax = eventServiceTax;
            this.event_remarks = eventRemarks;
        }

        /// <summary>
        /// Unique ID associated with the event.
        /// </summary>
        /// <value>Unique ID associated with the event.</value>
        [DataMember(Name = "event_id", EmitDefaultValue = false)]
        public string? event_id { get; set; }

        /// <summary>
        /// The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
        /// </summary>
        /// <value>The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.</value>
        [DataMember(Name = "event_type", EmitDefaultValue = false)]
        public string? event_type { get; set; }

        /// <summary>
        /// Amount that is part of the settlement corresponding to the event.
        /// </summary>
        /// <value>Amount that is part of the settlement corresponding to the event.</value>
        [DataMember(Name = "event_settlement_amount", EmitDefaultValue = false)]
        public decimal? event_settlement_amount { get; set; }

        /// <summary>
        /// Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.
        /// </summary>
        /// <value>Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.</value>
        [DataMember(Name = "event_amount", EmitDefaultValue = false)]
        public decimal? event_amount { get; set; }

        /// <summary>
        /// Indicates if it is CREDIT/DEBIT sale.
        /// </summary>
        /// <value>Indicates if it is CREDIT/DEBIT sale.</value>
        [DataMember(Name = "sale_type", EmitDefaultValue = false)]
        public string? sale_type { get; set; }

        /// <summary>
        /// Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
        /// </summary>
        /// <value>Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.</value>
        [DataMember(Name = "event_status", EmitDefaultValue = false)]
        public string? event_status { get; set; }

        /// <summary>
        /// Recon
        /// </summary>
        /// <value>Recon</value>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string? entity { get; set; }

        /// <summary>
        /// Time associated with the event. Example, transaction time, dispute initiation time
        /// </summary>
        /// <value>Time associated with the event. Example, transaction time, dispute initiation time</value>
        [DataMember(Name = "event_time", EmitDefaultValue = false)]
        public string? event_time { get; set; }

        /// <summary>
        /// Curreny type - INR.
        /// </summary>
        /// <value>Curreny type - INR.</value>
        [DataMember(Name = "event_currency", EmitDefaultValue = false)]
        public string? event_currency { get; set; }

        /// <summary>
        /// Service charge for above event_type.
        /// </summary>
        /// <value>Service charge for above event_type.</value>
        [DataMember(Name = "event_service_charge", EmitDefaultValue = false)]
        public decimal? event_service_charge { get; set; }

        /// <summary>
        /// Service tax for above event_type.
        /// </summary>
        /// <value>Service tax for above event_type.</value>
        [DataMember(Name = "event_service_tax", EmitDefaultValue = false)]
        public decimal? event_service_tax { get; set; }

        /// <summary>
        /// Remarks for above event_type.
        /// </summary>
        /// <value>Remarks for above event_type.</value>
        [DataMember(Name = "event_remarks", EmitDefaultValue = false)]
        public decimal? event_remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementReconEntityDataInnerEventDetails {\n");
            sb.Append("  event_id: ").Append(event_id).Append("\n");
            sb.Append("  event_type: ").Append(event_type).Append("\n");
            sb.Append("  event_settlement_amount: ").Append(event_settlement_amount).Append("\n");
            sb.Append("  event_amount: ").Append(event_amount).Append("\n");
            sb.Append("  sale_type: ").Append(sale_type).Append("\n");
            sb.Append("  event_status: ").Append(event_status).Append("\n");
            sb.Append("  entity: ").Append(entity).Append("\n");
            sb.Append("  event_time: ").Append(event_time).Append("\n");
            sb.Append("  event_currency: ").Append(event_currency).Append("\n");
            sb.Append("  event_service_charge: ").Append(event_service_charge).Append("\n");
            sb.Append("  event_service_tax: ").Append(event_service_tax).Append("\n");
            sb.Append("  event_remarks: ").Append(event_remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementReconEntityDataInnerEventDetails);
        }

        /// <summary>
        /// Returns true if SettlementReconEntityDataInnerEventDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementReconEntityDataInnerEventDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementReconEntityDataInnerEventDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.event_id == input.event_id ||
                    (this.event_id != null &&
                    this.event_id.Equals(input.event_id))
                ) && 
                (
                    this.event_type == input.event_type ||
                    (this.event_type != null &&
                    this.event_type.Equals(input.event_type))
                ) && 
                (
                    this.event_settlement_amount == input.event_settlement_amount ||
                    this.event_settlement_amount.Equals(input.event_settlement_amount)
                ) && 
                (
                    this.event_amount == input.event_amount ||
                    this.event_amount.Equals(input.event_amount)
                ) && 
                (
                    this.sale_type == input.sale_type ||
                    (this.sale_type != null &&
                    this.sale_type.Equals(input.sale_type))
                ) && 
                (
                    this.event_status == input.event_status ||
                    (this.event_status != null &&
                    this.event_status.Equals(input.event_status))
                ) && 
                (
                    this.entity == input.entity ||
                    (this.entity != null &&
                    this.entity.Equals(input.entity))
                ) && 
                (
                    this.event_time == input.event_time ||
                    (this.event_time != null &&
                    this.event_time.Equals(input.event_time))
                ) && 
                (
                    this.event_currency == input.event_currency ||
                    (this.event_currency != null &&
                    this.event_currency.Equals(input.event_currency))
                ) && 
                (
                    this.event_service_charge == input.event_service_charge ||
                    this.event_service_charge.Equals(input.event_service_charge)
                ) && 
                (
                    this.event_service_tax == input.event_service_tax ||
                    this.event_service_tax.Equals(input.event_service_tax)
                ) && 
                (
                    this.event_remarks == input.event_remarks ||
                    this.event_remarks.Equals(input.event_remarks)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringevent_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringevent_id);
            if (deserializedJsonString.ContainsKey("event_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.event_id != null)
                {
                    hashCode = (hashCode * 59) + this.event_id.GetHashCode();
                }
                if (this.event_type != null)
                {
                    hashCode = (hashCode * 59) + this.event_type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.event_settlement_amount.GetHashCode();
                hashCode = (hashCode * 59) + this.event_amount.GetHashCode();
                if (this.sale_type != null)
                {
                    hashCode = (hashCode * 59) + this.sale_type.GetHashCode();
                }
                if (this.event_status != null)
                {
                    hashCode = (hashCode * 59) + this.event_status.GetHashCode();
                }
                if (this.entity != null)
                {
                    hashCode = (hashCode * 59) + this.entity.GetHashCode();
                }
                if (this.event_time != null)
                {
                    hashCode = (hashCode * 59) + this.event_time.GetHashCode();
                }
                if (this.event_currency != null)
                {
                    hashCode = (hashCode * 59) + this.event_currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.event_service_charge.GetHashCode();
                hashCode = (hashCode * 59) + this.event_service_tax.GetHashCode();
                hashCode = (hashCode * 59) + this.event_remarks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
