/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFSettlementsEntity
    /// </summary>
    [DataContract(Name = "CFSettlementsEntity")]
    public partial class CFSettlementsEntity : IEquatable<CFSettlementsEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFSettlementsEntity" /> class.
        /// </summary>
        /// <param name="cfPaymentId">cfPaymentId.</param>
        /// <param name="cfSettlementId">cfSettlementId.</param>
        /// <param name="settlementCurrency">settlementCurrency.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="entity">entity.</param>
        /// <param name="orderAmount">orderAmount.</param>
        /// <param name="paymentTime">paymentTime.</param>
        /// <param name="serviceCharge">serviceCharge.</param>
        /// <param name="serviceTax">serviceTax.</param>
        /// <param name="settlementAmount">settlementAmount.</param>
        /// <param name="settlementId">settlementId.</param>
        /// <param name="transferId">transferId.</param>
        /// <param name="transferTime">transferTime.</param>
        /// <param name="transferUtr">transferUtr.</param>
        public CFSettlementsEntity(string? cfPaymentId = default(string?), string? cfSettlementId = default(string?), string? settlementCurrency = default(string?), string? orderId = default(string?), string? entity = default(string?), decimal? orderAmount = default(decimal?), string? paymentTime = default(string?), decimal? serviceCharge = default(decimal?), decimal? serviceTax = default(decimal?), decimal? settlementAmount = default(decimal?), int? settlementId = default(int?), int? transferId = default(int?), string? transferTime = default(string?), string? transferUtr = default(string?))
        {
            this.CfPaymentId = cfPaymentId;
            this.CfSettlementId = cfSettlementId;
            this.SettlementCurrency = settlementCurrency;
            this.OrderId = orderId;
            this.Entity = entity;
            this.OrderAmount = orderAmount;
            this.PaymentTime = paymentTime;
            this.ServiceCharge = serviceCharge;
            this.ServiceTax = serviceTax;
            this.SettlementAmount = settlementAmount;
            this.SettlementId = settlementId;
            this.TransferId = transferId;
            this.TransferTime = transferTime;
            this.TransferUtr = transferUtr;
        }

        /// <summary>
        /// Gets or Sets CfPaymentId
        /// </summary>
        [DataMember(Name = "cf_payment_id", EmitDefaultValue = false)]
        public string? CfPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets CfSettlementId
        /// </summary>
        [DataMember(Name = "cf_settlement_id", EmitDefaultValue = false)]
        public string? CfSettlementId { get; set; }

        /// <summary>
        /// Gets or Sets SettlementCurrency
        /// </summary>
        [DataMember(Name = "settlement_currency", EmitDefaultValue = false)]
        public string? SettlementCurrency { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string? Entity { get; set; }

        /// <summary>
        /// Gets or Sets OrderAmount
        /// </summary>
        [DataMember(Name = "order_amount", EmitDefaultValue = false)]
        public decimal? OrderAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTime
        /// </summary>
        [DataMember(Name = "payment_time", EmitDefaultValue = false)]
        public string? PaymentTime { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCharge
        /// </summary>
        [DataMember(Name = "service_charge", EmitDefaultValue = false)]
        public decimal? ServiceCharge { get; set; }

        /// <summary>
        /// Gets or Sets ServiceTax
        /// </summary>
        [DataMember(Name = "service_tax", EmitDefaultValue = false)]
        public decimal? ServiceTax { get; set; }

        /// <summary>
        /// Gets or Sets SettlementAmount
        /// </summary>
        [DataMember(Name = "settlement_amount", EmitDefaultValue = false)]
        public decimal? SettlementAmount { get; set; }

        /// <summary>
        /// Gets or Sets SettlementId
        /// </summary>
        [DataMember(Name = "settlement_id", EmitDefaultValue = false)]
        public int? SettlementId { get; set; }

        /// <summary>
        /// Gets or Sets TransferId
        /// </summary>
        [DataMember(Name = "transfer_id", EmitDefaultValue = false)]
        public int? TransferId { get; set; }

        /// <summary>
        /// Gets or Sets TransferTime
        /// </summary>
        [DataMember(Name = "transfer_time", EmitDefaultValue = false)]
        public string? TransferTime { get; set; }

        /// <summary>
        /// Gets or Sets TransferUtr
        /// </summary>
        [DataMember(Name = "transfer_utr", EmitDefaultValue = false)]
        public string? TransferUtr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFSettlementsEntity {\n");
            sb.Append("  CfPaymentId: ").Append(CfPaymentId).Append("\n");
            sb.Append("  CfSettlementId: ").Append(CfSettlementId).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  OrderAmount: ").Append(OrderAmount).Append("\n");
            sb.Append("  PaymentTime: ").Append(PaymentTime).Append("\n");
            sb.Append("  ServiceCharge: ").Append(ServiceCharge).Append("\n");
            sb.Append("  ServiceTax: ").Append(ServiceTax).Append("\n");
            sb.Append("  SettlementAmount: ").Append(SettlementAmount).Append("\n");
            sb.Append("  SettlementId: ").Append(SettlementId).Append("\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("  TransferTime: ").Append(TransferTime).Append("\n");
            sb.Append("  TransferUtr: ").Append(TransferUtr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFSettlementsEntity);
        }

        /// <summary>
        /// Returns true if CFSettlementsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of CFSettlementsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFSettlementsEntity? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CfPaymentId == input.CfPaymentId ||
                    (this.CfPaymentId != null &&
                    this.CfPaymentId.Equals(input.CfPaymentId))
                ) && 
                (
                    this.CfSettlementId == input.CfSettlementId ||
                    (this.CfSettlementId != null &&
                    this.CfSettlementId.Equals(input.CfSettlementId))
                ) && 
                (
                    this.SettlementCurrency == input.SettlementCurrency ||
                    (this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(input.SettlementCurrency))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.OrderAmount == input.OrderAmount ||
                    this.OrderAmount.Equals(input.OrderAmount)
                ) && 
                (
                    this.PaymentTime == input.PaymentTime ||
                    (this.PaymentTime != null &&
                    this.PaymentTime.Equals(input.PaymentTime))
                ) && 
                (
                    this.ServiceCharge == input.ServiceCharge ||
                    this.ServiceCharge.Equals(input.ServiceCharge)
                ) && 
                (
                    this.ServiceTax == input.ServiceTax ||
                    this.ServiceTax.Equals(input.ServiceTax)
                ) && 
                (
                    this.SettlementAmount == input.SettlementAmount ||
                    this.SettlementAmount.Equals(input.SettlementAmount)
                ) && 
                (
                    this.SettlementId == input.SettlementId ||
                    this.SettlementId.Equals(input.SettlementId)
                ) && 
                (
                    this.TransferId == input.TransferId ||
                    this.TransferId.Equals(input.TransferId)
                ) && 
                (
                    this.TransferTime == input.TransferTime ||
                    (this.TransferTime != null &&
                    this.TransferTime.Equals(input.TransferTime))
                ) && 
                (
                    this.TransferUtr == input.TransferUtr ||
                    (this.TransferUtr != null &&
                    this.TransferUtr.Equals(input.TransferUtr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CfPaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.CfPaymentId.GetHashCode();
                }
                if (this.CfSettlementId != null)
                {
                    hashCode = (hashCode * 59) + this.CfSettlementId.GetHashCode();
                }
                if (this.SettlementCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCurrency.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderAmount.GetHashCode();
                if (this.PaymentTime != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServiceCharge.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceTax.GetHashCode();
                hashCode = (hashCode * 59) + this.SettlementAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.SettlementId.GetHashCode();
                hashCode = (hashCode * 59) + this.TransferId.GetHashCode();
                if (this.TransferTime != null)
                {
                    hashCode = (hashCode * 59) + this.TransferTime.GetHashCode();
                }
                if (this.TransferUtr != null)
                {
                    hashCode = (hashCode * 59) + this.TransferUtr.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
