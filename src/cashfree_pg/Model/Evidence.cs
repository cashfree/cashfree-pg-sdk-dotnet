/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Evidence
    /// </summary>
    [DataContract(Name = "Evidence")]
    public class Evidence : IEquatable<Evidence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Evidence" /> class.
        /// </summary>
        /// <param name="documentId">documentId.</param>
        /// <param name="documentName">documentName.</param>
        /// <param name="documentType">documentType.</param>
        public Evidence(int? documentId = default(int?), string? documentName = default(string?), string? documentType = default(string?))
        {
            this.document_id = documentId;
            this.document_name = documentName;
            this.document_type = documentType;
        }

        /// <summary>
        /// Gets or Sets document_id
        /// </summary>
        [DataMember(Name = "document_id", EmitDefaultValue = false)]
        public int? document_id { get; set; }

        /// <summary>
        /// Gets or Sets document_name
        /// </summary>
        [DataMember(Name = "document_name", EmitDefaultValue = false)]
        public string? document_name { get; set; }

        /// <summary>
        /// Gets or Sets document_type
        /// </summary>
        [DataMember(Name = "document_type", EmitDefaultValue = false)]
        public string? document_type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Evidence {\n");
            sb.Append("  document_id: ").Append(document_id).Append("\n");
            sb.Append("  document_name: ").Append(document_name).Append("\n");
            sb.Append("  document_type: ").Append(document_type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Evidence);
        }

        /// <summary>
        /// Returns true if Evidence instances are equal
        /// </summary>
        /// <param name="input">Instance of Evidence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Evidence input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.document_id == input.document_id ||
                    this.document_id.Equals(input.document_id)
                ) && 
                (
                    this.document_name == input.document_name ||
                    (this.document_name != null &&
                    this.document_name.Equals(input.document_name))
                ) && 
                (
                    this.document_type == input.document_type ||
                    (this.document_type != null &&
                    this.document_type.Equals(input.document_type))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringdocument_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringdocument_id);
            if (deserializedJsonString.ContainsKey("document_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.document_id.GetHashCode();
                if (this.document_name != null)
                {
                    hashCode = (hashCode * 59) + this.document_name.GetHashCode();
                }
                if (this.document_type != null)
                {
                    hashCode = (hashCode * 59) + this.document_type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
