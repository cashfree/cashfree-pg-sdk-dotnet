/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Saved card instrument object
    /// </summary>
    [DataContract(Name = "InstrumentEntity")]
    public class InstrumentEntity : IEquatable<InstrumentEntity>, IValidatableObject
    {
        /// <summary>
        /// Type of the saved instrument
        /// </summary>
        /// <value>Type of the saved instrument</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentTypeEnum
        {
            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 1
        }


        /// <summary>
        /// Type of the saved instrument
        /// </summary>
        /// <value>Type of the saved instrument</value>
        [DataMember(Name = "instrument_type", EmitDefaultValue = false)]
        public InstrumentTypeEnum? instrument_type { get; set; }
        /// <summary>
        /// Status of the saved instrument.
        /// </summary>
        /// <value>Status of the saved instrument.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2
        }


        /// <summary>
        /// Status of the saved instrument.
        /// </summary>
        /// <value>Status of the saved instrument.</value>
        [DataMember(Name = "instrument_status", EmitDefaultValue = false)]
        public InstrumentStatusEnum? instrument_status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEntity" /> class.
        /// </summary>
        /// <param name="customerId">customer_id for which the instrument was saved.</param>
        /// <param name="afaReference">cf_payment_id of the successful transaction done while saving instrument.</param>
        /// <param name="instrumentId">saved instrument id.</param>
        /// <param name="instrumentType">Type of the saved instrument.</param>
        /// <param name="instrumentUid">Unique id for the saved instrument.</param>
        /// <param name="instrumentDisplay">masked card number displayed to the customer.</param>
        /// <param name="instrumentStatus">Status of the saved instrument..</param>
        /// <param name="createdAt">Timestamp at which instrument was saved..</param>
        /// <param name="instrumentMeta">instrumentMeta.</param>
        public InstrumentEntity(string? customerId = default(string?), string? afaReference = default(string?), string? instrumentId = default(string?), InstrumentTypeEnum? instrumentType = default(InstrumentTypeEnum?), string? instrumentUid = default(string?), string? instrumentDisplay = default(string?), InstrumentStatusEnum? instrumentStatus = default(InstrumentStatusEnum?), string? createdAt = default(string?), SavedInstrumentMeta? instrumentMeta = default(SavedInstrumentMeta?))
        {
            this.customer_id = customerId;
            this.afa_reference = afaReference;
            this.instrument_id = instrumentId;
            this.instrument_type = instrumentType;
            this.instrument_uid = instrumentUid;
            this.instrument_display = instrumentDisplay;
            this.instrument_status = instrumentStatus;
            this.created_at = createdAt;
            this.instrument_meta = instrumentMeta;
        }

        /// <summary>
        /// customer_id for which the instrument was saved
        /// </summary>
        /// <value>customer_id for which the instrument was saved</value>
        [DataMember(Name = "customer_id", EmitDefaultValue = false)]
        public string? customer_id { get; set; }

        /// <summary>
        /// cf_payment_id of the successful transaction done while saving instrument
        /// </summary>
        /// <value>cf_payment_id of the successful transaction done while saving instrument</value>
        [DataMember(Name = "afa_reference", EmitDefaultValue = false)]
        public string? afa_reference { get; set; }

        /// <summary>
        /// saved instrument id
        /// </summary>
        /// <value>saved instrument id</value>
        [DataMember(Name = "instrument_id", EmitDefaultValue = false)]
        public string? instrument_id { get; set; }

        /// <summary>
        /// Unique id for the saved instrument
        /// </summary>
        /// <value>Unique id for the saved instrument</value>
        [DataMember(Name = "instrument_uid", EmitDefaultValue = false)]
        public string? instrument_uid { get; set; }

        /// <summary>
        /// masked card number displayed to the customer
        /// </summary>
        /// <value>masked card number displayed to the customer</value>
        [DataMember(Name = "instrument_display", EmitDefaultValue = false)]
        public string? instrument_display { get; set; }

        /// <summary>
        /// Timestamp at which instrument was saved.
        /// </summary>
        /// <value>Timestamp at which instrument was saved.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string? created_at { get; set; }

        /// <summary>
        /// Gets or Sets instrument_meta
        /// </summary>
        [DataMember(Name = "instrument_meta", EmitDefaultValue = false)]
        public SavedInstrumentMeta? instrument_meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentEntity {\n");
            sb.Append("  customer_id: ").Append(customer_id).Append("\n");
            sb.Append("  afa_reference: ").Append(afa_reference).Append("\n");
            sb.Append("  instrument_id: ").Append(instrument_id).Append("\n");
            sb.Append("  instrument_type: ").Append(instrument_type).Append("\n");
            sb.Append("  instrument_uid: ").Append(instrument_uid).Append("\n");
            sb.Append("  instrument_display: ").Append(instrument_display).Append("\n");
            sb.Append("  instrument_status: ").Append(instrument_status).Append("\n");
            sb.Append("  created_at: ").Append(created_at).Append("\n");
            sb.Append("  instrument_meta: ").Append(instrument_meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentEntity);
        }

        /// <summary>
        /// Returns true if InstrumentEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.customer_id == input.customer_id ||
                    (this.customer_id != null &&
                    this.customer_id.Equals(input.customer_id))
                ) && 
                (
                    this.afa_reference == input.afa_reference ||
                    (this.afa_reference != null &&
                    this.afa_reference.Equals(input.afa_reference))
                ) && 
                (
                    this.instrument_id == input.instrument_id ||
                    (this.instrument_id != null &&
                    this.instrument_id.Equals(input.instrument_id))
                ) && 
                (
                    this.instrument_type == input.instrument_type ||
                    this.instrument_type.Equals(input.instrument_type)
                ) && 
                (
                    this.instrument_uid == input.instrument_uid ||
                    (this.instrument_uid != null &&
                    this.instrument_uid.Equals(input.instrument_uid))
                ) && 
                (
                    this.instrument_display == input.instrument_display ||
                    (this.instrument_display != null &&
                    this.instrument_display.Equals(input.instrument_display))
                ) && 
                (
                    this.instrument_status == input.instrument_status ||
                    this.instrument_status.Equals(input.instrument_status)
                ) && 
                (
                    this.created_at == input.created_at ||
                    (this.created_at != null &&
                    this.created_at.Equals(input.created_at))
                ) && 
                (
                    this.instrument_meta == input.instrument_meta ||
                    (this.instrument_meta != null &&
                    this.instrument_meta.Equals(input.instrument_meta))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringcustomer_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringcustomer_id);
            if (deserializedJsonString.ContainsKey("customer_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.customer_id != null)
                {
                    hashCode = (hashCode * 59) + this.customer_id.GetHashCode();
                }
                if (this.afa_reference != null)
                {
                    hashCode = (hashCode * 59) + this.afa_reference.GetHashCode();
                }
                if (this.instrument_id != null)
                {
                    hashCode = (hashCode * 59) + this.instrument_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.instrument_type.GetHashCode();
                if (this.instrument_uid != null)
                {
                    hashCode = (hashCode * 59) + this.instrument_uid.GetHashCode();
                }
                if (this.instrument_display != null)
                {
                    hashCode = (hashCode * 59) + this.instrument_display.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.instrument_status.GetHashCode();
                if (this.created_at != null)
                {
                    hashCode = (hashCode * 59) + this.created_at.GetHashCode();
                }
                if (this.instrument_meta != null)
                {
                    hashCode = (hashCode * 59) + this.instrument_meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
