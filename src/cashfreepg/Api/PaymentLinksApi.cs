/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cashfreepg.Client;
using cashfreepg.Model;
using cashfreepg.Interface;

namespace cashfreepg.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentLinksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>LinkCancelledResponse</returns>
        CFCancelledLinkResponse CancelPaymentLink(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = null, string? xIdempotencyKey = null);

        /// <summary>
        /// Cancel Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>ApiResponse of LinkCancelledResponse</returns>
        ApiResponse<CFLinkCancelledResponse> CancelPaymentLinkWithHttpInfo(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = null, string? xIdempotencyKey = null);
        /// <summary>
        /// Create Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <returns>CFLink</returns>
        CFLinkResponse CreatePaymentLink(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));

        /// <summary>
        /// Create Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <returns>ApiResponse of CFLink</returns>
        ApiResponse<CFLink> CreatePaymentLinkWithHttpInfo(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));
        /// <summary>
        /// Fetch Payment Link Details
        /// </summary>
        /// <remarks>
        /// Use this API to view all details and status of a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFLink</returns>
        CFLinkResponse GetPaymentLinkDetails(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));

        /// <summary>
        /// Fetch Payment Link Details
        /// </summary>
        /// <remarks>
        /// Use this API to view all details and status of a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFLink</returns>
        ApiResponse<CFLink> GetPaymentLinkDetailsWithHttpInfo(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));
        /// <summary>
        /// Get Orders for a Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to view all order details for a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>List&lt;CFLinkOrders&gt;</returns>
        CFPaymentLinkOrdersRespnse GetPaymentLinkOrders(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));

        /// <summary>
        /// Get Orders for a Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to view all order details for a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CFLinkOrders&gt;</returns>
        ApiResponse<List<CFLinkOrders>> GetPaymentLinkOrdersWithHttpInfo(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentLinksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkCancelledResponse</returns>
        System.Threading.Tasks.Task<CFLinkCancelledResponse> CancelPaymentLinkAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkCancelledResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFLinkCancelledResponse>> CancelPaymentLinkWithHttpInfoAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFLink</returns>
        System.Threading.Tasks.Task<CFLink> CreatePaymentLinkAsync(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?),System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFLink>> CreatePaymentLinkWithHttpInfoAsync(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch Payment Link Details
        /// </summary>
        /// <remarks>
        /// Use this API to view all details and status of a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFLink</returns>
        System.Threading.Tasks.Task<CFLink> GetPaymentLinkDetailsAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch Payment Link Details
        /// </summary>
        /// <remarks>
        /// Use this API to view all details and status of a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFLink>> GetPaymentLinkDetailsWithHttpInfoAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Orders for a Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to view all order details for a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CFLinkOrders&gt;</returns>
        System.Threading.Tasks.Task<List<CFLinkOrders>> GetPaymentLinkOrdersAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Orders for a Payment Link
        /// </summary>
        /// <remarks>
        /// Use this API to view all order details for a payment link.
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CFLinkOrders&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CFLinkOrders>>> GetPaymentLinkOrdersWithHttpInfoAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentLinksApi : IPaymentLinksApiSync, IPaymentLinksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentLinksApi : IPaymentLinksApi
    {
        private cashfreepg.Client.ExceptionFactory? _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLinksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentLinksApi() : this((string)"")
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLinksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentLinksApi(string basePath)
        {
            this.Configuration = cashfreepg.Client.Configuration.MergeConfigurations(
                cashfreepg.Client.GlobalConfiguration.Instance,
                new cashfreepg.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLinksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentLinksApi(cashfreepg.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cashfreepg.Client.Configuration.MergeConfigurations(
                cashfreepg.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLinksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentLinksApi(cashfreepg.Client.ISynchronousClient client, cashfreepg.Client.IAsynchronousClient asyncClient, cashfreepg.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cashfreepg.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cashfreepg.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cashfreepg.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cashfreepg.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Payment Link Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>LinkCancelledResponse</returns>
        public CFCancelledLinkResponse CancelPaymentLink(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = null, string? xIdempotencyKey = null)
        {
            cashfreepg.Client.ApiResponse<CFLinkCancelledResponse> localVarResponse = CancelPaymentLinkWithHttpInfo(xClientId, xClientSecret, linkId, xApiVersion, xRequestId, xIdempotencyKey);
            return new CFCancelledLinkResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Cancel Payment Link Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>ApiResponse of LinkCancelledResponse</returns>
        public cashfreepg.Client.ApiResponse<CFLinkCancelledResponse> CancelPaymentLinkWithHttpInfo(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = null, string? xIdempotencyKey = null)
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->CancelPaymentLink");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->CancelPaymentLink");
            }

            // verify the required parameter 'linkId' is set
            if (linkId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->CancelPaymentLink");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("link_id", cashfreepg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }


            // make the HTTP request
            var link = "/links/" + linkId + "/cancel";
            var localVarResponse = this.Client.Post<CFLinkCancelledResponse>(link, localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPaymentLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Payment Link Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkCancelledResponse</returns>
        public async System.Threading.Tasks.Task<CFLinkCancelledResponse> CancelPaymentLinkAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFLinkCancelledResponse> localVarResponse = await CancelPaymentLinkWithHttpInfoAsync(xClientId, xClientSecret, linkId, xApiVersion, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Payment Link Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkCancelledResponse)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFLinkCancelledResponse>> CancelPaymentLinkWithHttpInfoAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->CancelPaymentLink");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->CancelPaymentLink");
            }

            // verify the required parameter 'linkId' is set
            if (linkId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->CancelPaymentLink");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("link_id", cashfreepg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CFLinkCancelledResponse>("/links/{link_id}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPaymentLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Link Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <returns>CFLink</returns>
        public CFLinkResponse CreatePaymentLink(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFLink> localVarResponse = CreatePaymentLinkWithHttpInfo(xClientId, xClientSecret, xApiVersion, cFLinkRequest, xRequestId, xIdempotencyReplayed, xIdempotencyKey);
            return new CFLinkResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Create Payment Link Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <returns>ApiResponse of CFLink</returns>
        public cashfreepg.Client.ApiResponse<CFLink> CreatePaymentLinkWithHttpInfo(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->CreatePaymentLink");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->CreatePaymentLink");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = cFLinkRequest;


            // make the HTTP request

            var localVarResponse = this.Client.Post<CFLink>("/links", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Link Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFLink</returns>
        public async System.Threading.Tasks.Task<CFLink> CreatePaymentLinkAsync(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFLink> localVarResponse = await CreatePaymentLinkWithHttpInfoAsync(xClientId, xClientSecret, xApiVersion, cFLinkRequest, xRequestId, xIdempotencyReplayed, xIdempotencyKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Link Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cFLinkRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFLink)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFLink>> CreatePaymentLinkWithHttpInfoAsync(string xClientId, string xClientSecret, string xApiVersion, CFLinkRequest cFLinkRequest,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->CreatePaymentLink");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->CreatePaymentLink");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = cFLinkRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CFLink>("/links", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Payment Link Details Use this API to view all details and status of a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFLink</returns>
        public CFLinkResponse GetPaymentLinkDetails(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFLink> localVarResponse = GetPaymentLinkDetailsWithHttpInfo(xClientId, xClientSecret, linkId, xApiVersion, xRequestId, xIdempotencyReplayed, xIdempotencyKey);
            return new CFLinkResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Fetch Payment Link Details Use this API to view all details and status of a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFLink</returns>
        public cashfreepg.Client.ApiResponse<CFLink> GetPaymentLinkDetailsWithHttpInfo(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->GetPaymentLinkDetails");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->GetPaymentLinkDetails");
            }

            // verify the required parameter 'linkId' is set
            if (linkId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->GetPaymentLinkDetails");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("link_id", cashfreepg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CFLink>("/links/{link_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentLinkDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Payment Link Details Use this API to view all details and status of a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFLink</returns>
        public async System.Threading.Tasks.Task<CFLink> GetPaymentLinkDetailsAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFLink> localVarResponse = await GetPaymentLinkDetailsWithHttpInfoAsync(xClientId, xClientSecret, linkId, xApiVersion, xRequestId, xIdempotencyReplayed, xIdempotencyKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Payment Link Details Use this API to view all details and status of a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFLink)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFLink>> GetPaymentLinkDetailsWithHttpInfoAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->GetPaymentLinkDetails");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->GetPaymentLinkDetails");
            }

            // verify the required parameter 'linkId' is set
            if (linkId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->GetPaymentLinkDetails");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("link_id", cashfreepg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CFLink>("/links/{link_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentLinkDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Orders for a Payment Link Use this API to view all order details for a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>List&lt;CFLinkOrders&gt;</returns>
        public CFPaymentLinkOrdersRespnse GetPaymentLinkOrders(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            cashfreepg.Client.ApiResponse<List<CFLinkOrders>> localVarResponse = GetPaymentLinkOrdersWithHttpInfo(xClientId, xClientSecret, linkId, xApiVersion, xRequestId, xIdempotencyReplayed, xIdempotencyKey);
            return new CFPaymentLinkOrdersRespnse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Get Orders for a Payment Link Use this API to view all order details for a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CFLinkOrders&gt;</returns>
        public cashfreepg.Client.ApiResponse<List<CFLinkOrders>> GetPaymentLinkOrdersWithHttpInfo(string xClientId, string xClientSecret, string linkId, string xApiVersion, string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->GetPaymentLinkOrders");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->GetPaymentLinkOrders");
            }

            // verify the required parameter 'linkId' is set
            if (linkId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->GetPaymentLinkOrders");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("link_id", cashfreepg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CFLinkOrders>>("/links/{link_id}/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentLinkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Orders for a Payment Link Use this API to view all order details for a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CFLinkOrders&gt;</returns>
        public async System.Threading.Tasks.Task<List<CFLinkOrders>> GetPaymentLinkOrdersAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<List<CFLinkOrders>> localVarResponse = await GetPaymentLinkOrdersWithHttpInfoAsync(xClientId, xClientSecret, linkId, xApiVersion, xRequestId, xIdempotencyReplayed, xIdempotencyKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Orders for a Payment Link Use this API to view all order details for a payment link.
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="linkId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CFLinkOrders&gt;)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<List<CFLinkOrders>>> GetPaymentLinkOrdersWithHttpInfoAsync(string xClientId, string xClientSecret, string linkId, string xApiVersion,string? xRequestId = default(string?), bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling PaymentLinksApi->GetPaymentLinkOrders");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling PaymentLinksApi->GetPaymentLinkOrders");
            }

            // verify the required parameter 'linkId' is set
            if (linkId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'linkId' when calling PaymentLinksApi->GetPaymentLinkOrders");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("link_id", cashfreepg.Client.ClientUtils.ParameterToString(linkId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CFLinkOrders>>("/links/{link_id}/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentLinkOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
