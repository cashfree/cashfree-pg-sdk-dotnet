/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Offer terms and condition object
    /// </summary>
    [DataContract(Name = "OfferTnc")]
    public class OfferTnc : IEquatable<OfferTnc>, IValidatableObject
    {
        /// <summary>
        /// TnC Type for the Offer. It can be either &#x60;text&#x60; or &#x60;link&#x60;
        /// </summary>
        /// <value>TnC Type for the Offer. It can be either &#x60;text&#x60; or &#x60;link&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OfferTncTypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            [EnumMember(Value = "link")]
            Link = 2
        }


        /// <summary>
        /// TnC Type for the Offer. It can be either &#x60;text&#x60; or &#x60;link&#x60;
        /// </summary>
        /// <value>TnC Type for the Offer. It can be either &#x60;text&#x60; or &#x60;link&#x60;</value>
        /// <example>text</example>
        [DataMember(Name = "offer_tnc_type", IsRequired = true, EmitDefaultValue = true)]
        public OfferTncTypeEnum offer_tnc_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferTnc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferTnc() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferTnc" /> class.
        /// </summary>
        /// <param name="offerTncType">TnC Type for the Offer. It can be either &#x60;text&#x60; or &#x60;link&#x60; (required).</param>
        /// <param name="offerTncValue">TnC for the Offer. (required).</param>
        public OfferTnc(OfferTncTypeEnum offerTncType = default(OfferTncTypeEnum), string offerTncValue = default(string))
        {
            this.offer_tnc_type = offerTncType;
            // to ensure "offerTncValue" is required (not null)
            if (offerTncValue == null)
            {
                throw new ArgumentNullException("offerTncValue is a required property for OfferTnc and cannot be null");
            }
            this.offer_tnc_value = offerTncValue;
        }

        /// <summary>
        /// TnC for the Offer.
        /// </summary>
        /// <value>TnC for the Offer.</value>
        /// <example>Lorem ipsum dolor sit amet, consectetur adipiscing elit</example>
        [DataMember(Name = "offer_tnc_value", IsRequired = true, EmitDefaultValue = true)]
        public string offer_tnc_value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferTnc {\n");
            sb.Append("  offer_tnc_type: ").Append(offer_tnc_type).Append("\n");
            sb.Append("  offer_tnc_value: ").Append(offer_tnc_value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferTnc);
        }

        /// <summary>
        /// Returns true if OfferTnc instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferTnc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferTnc input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.offer_tnc_type == input.offer_tnc_type ||
                    this.offer_tnc_type.Equals(input.offer_tnc_type)
                ) && 
                (
                    this.offer_tnc_value == input.offer_tnc_value ||
                    (this.offer_tnc_value != null &&
                    this.offer_tnc_value.Equals(input.offer_tnc_value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.offer_tnc_type.GetHashCode();
                if (this.offer_tnc_value != null)
                {
                    hashCode = (hashCode * 59) + this.offer_tnc_value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // offer_tnc_value (string) maxLength
            if (this.offer_tnc_value != null && this.offer_tnc_value.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for offer_tnc_value, length must be less than 100.", new [] { "offer_tnc_value" });
            }

            // offer_tnc_value (string) minLength
            if (this.offer_tnc_value != null && this.offer_tnc_value.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for offer_tnc_value, length must be greater than 3.", new [] { "offer_tnc_value" });
            }

            yield break;
        }
    }

}
