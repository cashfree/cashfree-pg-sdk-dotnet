/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// The request to be passed for the create subscription payment API.
    /// </summary>
    [DataContract(Name = "CreateSubscriptionPaymentRequest")]
    public class CreateSubscriptionPaymentRequest : IEquatable<CreateSubscriptionPaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionPaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSubscriptionPaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionPaymentRequest" /> class.
        /// </summary>
        /// <param name="subscriptionId">A unique ID passed by merchant for identifying the subscription. (required).</param>
        /// <param name="subscriptionSessionId">Session ID for the subscription. Required only for Auth..</param>
        /// <param name="paymentId">A unique ID passed by merchant for identifying the subscription payment. (required).</param>
        /// <param name="paymentAmount">The charge amount of the payment. Required in case of charge..</param>
        /// <param name="paymentScheduleDate">The date on which the payment is scheduled to be processed. Required for UPI and CARD payment modes..</param>
        /// <param name="paymentRemarks">Payment remarks..</param>
        /// <param name="paymentType">Payment type. Can be AUTH or CHARGE. (required).</param>
        /// <param name="paymentMethod">Payment method. Can be one of [\&quot;upi\&quot;, \&quot;enach\&quot;, \&quot;pnach\&quot;, \&quot;card\&quot;].</param>
        public CreateSubscriptionPaymentRequest(string subscriptionId = default(string), string? subscriptionSessionId = default(string?), string paymentId = default(string), decimal? paymentAmount = default(decimal?), string? paymentScheduleDate = default(string?), string? paymentRemarks = default(string?), string paymentType = default(string), Object? paymentMethod = default(Object?))
        {
            // to ensure "subscriptionId" is required (not null)
            if (subscriptionId == null)
            {
                throw new ArgumentNullException("subscriptionId is a required property for CreateSubscriptionPaymentRequest and cannot be null");
            }
            this.subscription_id = subscriptionId;
            // to ensure "paymentId" is required (not null)
            if (paymentId == null)
            {
                throw new ArgumentNullException("paymentId is a required property for CreateSubscriptionPaymentRequest and cannot be null");
            }
            this.payment_id = paymentId;
            // to ensure "paymentType" is required (not null)
            if (paymentType == null)
            {
                throw new ArgumentNullException("paymentType is a required property for CreateSubscriptionPaymentRequest and cannot be null");
            }
            this.payment_type = paymentType;
            this.subscription_session_id = subscriptionSessionId;
            this.payment_amount = paymentAmount;
            this.payment_schedule_date = paymentScheduleDate;
            this.payment_remarks = paymentRemarks;
            this.payment_method = paymentMethod;
        }

        /// <summary>
        /// A unique ID passed by merchant for identifying the subscription.
        /// </summary>
        /// <value>A unique ID passed by merchant for identifying the subscription.</value>
        [DataMember(Name = "subscription_id", IsRequired = true, EmitDefaultValue = true)]
        public string subscription_id { get; set; }

        /// <summary>
        /// Session ID for the subscription. Required only for Auth.
        /// </summary>
        /// <value>Session ID for the subscription. Required only for Auth.</value>
        [DataMember(Name = "subscription_session_id", EmitDefaultValue = false)]
        public string? subscription_session_id { get; set; }

        /// <summary>
        /// A unique ID passed by merchant for identifying the subscription payment.
        /// </summary>
        /// <value>A unique ID passed by merchant for identifying the subscription payment.</value>
        [DataMember(Name = "payment_id", IsRequired = true, EmitDefaultValue = true)]
        public string payment_id { get; set; }

        /// <summary>
        /// The charge amount of the payment. Required in case of charge.
        /// </summary>
        /// <value>The charge amount of the payment. Required in case of charge.</value>
        [DataMember(Name = "payment_amount", EmitDefaultValue = false)]
        public decimal? payment_amount { get; set; }

        /// <summary>
        /// The date on which the payment is scheduled to be processed. Required for UPI and CARD payment modes.
        /// </summary>
        /// <value>The date on which the payment is scheduled to be processed. Required for UPI and CARD payment modes.</value>
        [DataMember(Name = "payment_schedule_date", EmitDefaultValue = false)]
        public string? payment_schedule_date { get; set; }

        /// <summary>
        /// Payment remarks.
        /// </summary>
        /// <value>Payment remarks.</value>
        [DataMember(Name = "payment_remarks", EmitDefaultValue = false)]
        public string? payment_remarks { get; set; }

        /// <summary>
        /// Payment type. Can be AUTH or CHARGE.
        /// </summary>
        /// <value>Payment type. Can be AUTH or CHARGE.</value>
        [DataMember(Name = "payment_type", IsRequired = true, EmitDefaultValue = true)]
        public string payment_type { get; set; }

        /// <summary>
        /// Payment method. Can be one of [\&quot;upi\&quot;, \&quot;enach\&quot;, \&quot;pnach\&quot;, \&quot;card\&quot;]
        /// </summary>
        /// <value>Payment method. Can be one of [\&quot;upi\&quot;, \&quot;enach\&quot;, \&quot;pnach\&quot;, \&quot;card\&quot;]</value>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public Object? payment_method { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSubscriptionPaymentRequest {\n");
            sb.Append("  subscription_id: ").Append(subscription_id).Append("\n");
            sb.Append("  subscription_session_id: ").Append(subscription_session_id).Append("\n");
            sb.Append("  payment_id: ").Append(payment_id).Append("\n");
            sb.Append("  payment_amount: ").Append(payment_amount).Append("\n");
            sb.Append("  payment_schedule_date: ").Append(payment_schedule_date).Append("\n");
            sb.Append("  payment_remarks: ").Append(payment_remarks).Append("\n");
            sb.Append("  payment_type: ").Append(payment_type).Append("\n");
            sb.Append("  payment_method: ").Append(payment_method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubscriptionPaymentRequest);
        }

        /// <summary>
        /// Returns true if CreateSubscriptionPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubscriptionPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscriptionPaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.subscription_id == input.subscription_id ||
                    (this.subscription_id != null &&
                    this.subscription_id.Equals(input.subscription_id))
                ) && 
                (
                    this.subscription_session_id == input.subscription_session_id ||
                    (this.subscription_session_id != null &&
                    this.subscription_session_id.Equals(input.subscription_session_id))
                ) && 
                (
                    this.payment_id == input.payment_id ||
                    (this.payment_id != null &&
                    this.payment_id.Equals(input.payment_id))
                ) && 
                (
                    this.payment_amount == input.payment_amount ||
                    this.payment_amount.Equals(input.payment_amount)
                ) && 
                (
                    this.payment_schedule_date == input.payment_schedule_date ||
                    (this.payment_schedule_date != null &&
                    this.payment_schedule_date.Equals(input.payment_schedule_date))
                ) && 
                (
                    this.payment_remarks == input.payment_remarks ||
                    (this.payment_remarks != null &&
                    this.payment_remarks.Equals(input.payment_remarks))
                ) && 
                (
                    this.payment_type == input.payment_type ||
                    (this.payment_type != null &&
                    this.payment_type.Equals(input.payment_type))
                ) && 
                (
                    this.payment_method == input.payment_method ||
                    (this.payment_method != null &&
                    this.payment_method.Equals(input.payment_method))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringsubscription_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringsubscription_id);
            if (deserializedJsonString.ContainsKey("subscription_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.subscription_id != null)
                {
                    hashCode = (hashCode * 59) + this.subscription_id.GetHashCode();
                }
                if (this.subscription_session_id != null)
                {
                    hashCode = (hashCode * 59) + this.subscription_session_id.GetHashCode();
                }
                if (this.payment_id != null)
                {
                    hashCode = (hashCode * 59) + this.payment_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.payment_amount.GetHashCode();
                if (this.payment_schedule_date != null)
                {
                    hashCode = (hashCode * 59) + this.payment_schedule_date.GetHashCode();
                }
                if (this.payment_remarks != null)
                {
                    hashCode = (hashCode * 59) + this.payment_remarks.GetHashCode();
                }
                if (this.payment_type != null)
                {
                    hashCode = (hashCode * 59) + this.payment_type.GetHashCode();
                }
                if (this.payment_method != null)
                {
                    hashCode = (hashCode * 59) + this.payment_method.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
