/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Each item in the cart.
    /// </summary>
    [DataContract(Name = "CartItem")]
    public class CartItem : IEquatable<CartItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItem" /> class.
        /// </summary>
        /// <param name="itemId">Unique identifier of the item.</param>
        /// <param name="itemName">Name of the item.</param>
        /// <param name="itemDescription">Description of the item.</param>
        /// <param name="itemTags">Tags attached to that item.</param>
        /// <param name="itemDetailsUrl">Item details url.</param>
        /// <param name="itemImageUrl">Item image url.</param>
        /// <param name="itemOriginalUnitPrice">Original price.</param>
        /// <param name="itemDiscountedUnitPrice">Discounted Price.</param>
        /// <param name="itemCurrency">Currency of the item..</param>
        /// <param name="itemQuantity">Quantity if that item.</param>
        public CartItem(string? itemId = default(string?), string? itemName = default(string?), string? itemDescription = default(string?), List<string>? itemTags = default(List<string>?), string? itemDetailsUrl = default(string?), string? itemImageUrl = default(string?), double? itemOriginalUnitPrice = default(double?), double? itemDiscountedUnitPrice = default(double?), string? itemCurrency = default(string?), decimal? itemQuantity = default(decimal?))
        {
            this.item_id = itemId;
            this.item_name = itemName;
            this.item_description = itemDescription;
            this.item_tags = itemTags;
            this.item_details_url = itemDetailsUrl;
            this.item_image_url = itemImageUrl;
            this.item_original_unit_price = itemOriginalUnitPrice;
            this.item_discounted_unit_price = itemDiscountedUnitPrice;
            this.item_currency = itemCurrency;
            this.item_quantity = itemQuantity;
        }

        /// <summary>
        /// Unique identifier of the item
        /// </summary>
        /// <value>Unique identifier of the item</value>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public string? item_id { get; set; }

        /// <summary>
        /// Name of the item
        /// </summary>
        /// <value>Name of the item</value>
        [DataMember(Name = "item_name", EmitDefaultValue = false)]
        public string? item_name { get; set; }

        /// <summary>
        /// Description of the item
        /// </summary>
        /// <value>Description of the item</value>
        [DataMember(Name = "item_description", EmitDefaultValue = false)]
        public string? item_description { get; set; }

        /// <summary>
        /// Tags attached to that item
        /// </summary>
        /// <value>Tags attached to that item</value>
        [DataMember(Name = "item_tags", EmitDefaultValue = false)]
        public List<string>? item_tags { get; set; }

        /// <summary>
        /// Item details url
        /// </summary>
        /// <value>Item details url</value>
        [DataMember(Name = "item_details_url", EmitDefaultValue = false)]
        public string? item_details_url { get; set; }

        /// <summary>
        /// Item image url
        /// </summary>
        /// <value>Item image url</value>
        [DataMember(Name = "item_image_url", EmitDefaultValue = false)]
        public string? item_image_url { get; set; }

        /// <summary>
        /// Original price
        /// </summary>
        /// <value>Original price</value>
        [DataMember(Name = "item_original_unit_price", EmitDefaultValue = false)]
        public double? item_original_unit_price { get; set; }

        /// <summary>
        /// Discounted Price
        /// </summary>
        /// <value>Discounted Price</value>
        [DataMember(Name = "item_discounted_unit_price", EmitDefaultValue = false)]
        public double? item_discounted_unit_price { get; set; }

        /// <summary>
        /// Currency of the item.
        /// </summary>
        /// <value>Currency of the item.</value>
        [DataMember(Name = "item_currency", EmitDefaultValue = false)]
        public string? item_currency { get; set; }

        /// <summary>
        /// Quantity if that item
        /// </summary>
        /// <value>Quantity if that item</value>
        [DataMember(Name = "item_quantity", EmitDefaultValue = false)]
        public decimal? item_quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartItem {\n");
            sb.Append("  item_id: ").Append(item_id).Append("\n");
            sb.Append("  item_name: ").Append(item_name).Append("\n");
            sb.Append("  item_description: ").Append(item_description).Append("\n");
            sb.Append("  item_tags: ").Append(item_tags).Append("\n");
            sb.Append("  item_details_url: ").Append(item_details_url).Append("\n");
            sb.Append("  item_image_url: ").Append(item_image_url).Append("\n");
            sb.Append("  item_original_unit_price: ").Append(item_original_unit_price).Append("\n");
            sb.Append("  item_discounted_unit_price: ").Append(item_discounted_unit_price).Append("\n");
            sb.Append("  item_currency: ").Append(item_currency).Append("\n");
            sb.Append("  item_quantity: ").Append(item_quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartItem);
        }

        /// <summary>
        /// Returns true if CartItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CartItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.item_id == input.item_id ||
                    (this.item_id != null &&
                    this.item_id.Equals(input.item_id))
                ) && 
                (
                    this.item_name == input.item_name ||
                    (this.item_name != null &&
                    this.item_name.Equals(input.item_name))
                ) && 
                (
                    this.item_description == input.item_description ||
                    (this.item_description != null &&
                    this.item_description.Equals(input.item_description))
                ) && 
                (
                    this.item_tags == input.item_tags ||
                    this.item_tags != null &&
                    input.item_tags != null &&
                    this.item_tags.SequenceEqual(input.item_tags)
                ) && 
                (
                    this.item_details_url == input.item_details_url ||
                    (this.item_details_url != null &&
                    this.item_details_url.Equals(input.item_details_url))
                ) && 
                (
                    this.item_image_url == input.item_image_url ||
                    (this.item_image_url != null &&
                    this.item_image_url.Equals(input.item_image_url))
                ) && 
                (
                    this.item_original_unit_price == input.item_original_unit_price ||
                    this.item_original_unit_price.Equals(input.item_original_unit_price)
                ) && 
                (
                    this.item_discounted_unit_price == input.item_discounted_unit_price ||
                    this.item_discounted_unit_price.Equals(input.item_discounted_unit_price)
                ) && 
                (
                    this.item_currency == input.item_currency ||
                    (this.item_currency != null &&
                    this.item_currency.Equals(input.item_currency))
                ) && 
                (
                    this.item_quantity == input.item_quantity ||
                    this.item_quantity.Equals(input.item_quantity)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringitem_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringitem_id);
            if (deserializedJsonString.ContainsKey("item_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.item_id != null)
                {
                    hashCode = (hashCode * 59) + this.item_id.GetHashCode();
                }
                if (this.item_name != null)
                {
                    hashCode = (hashCode * 59) + this.item_name.GetHashCode();
                }
                if (this.item_description != null)
                {
                    hashCode = (hashCode * 59) + this.item_description.GetHashCode();
                }
                if (this.item_tags != null)
                {
                    hashCode = (hashCode * 59) + this.item_tags.GetHashCode();
                }
                if (this.item_details_url != null)
                {
                    hashCode = (hashCode * 59) + this.item_details_url.GetHashCode();
                }
                if (this.item_image_url != null)
                {
                    hashCode = (hashCode * 59) + this.item_image_url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.item_original_unit_price.GetHashCode();
                hashCode = (hashCode * 59) + this.item_discounted_unit_price.GetHashCode();
                if (this.item_currency != null)
                {
                    hashCode = (hashCode * 59) + this.item_currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.item_quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
