/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// SettlementReconEntityDataInnerDisputeDetails
    /// </summary>
    [DataContract(Name = "SettlementReconEntity_data_inner_dispute_details")]
    public class SettlementReconEntityDataInnerDisputeDetails : IEquatable<SettlementReconEntityDataInnerDisputeDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementReconEntityDataInnerDisputeDetails" /> class.
        /// </summary>
        /// <param name="closedInFavorOf">Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer..</param>
        /// <param name="disputeResolvedOn">Date and time when the dispute was resolved..</param>
        /// <param name="disputeCategory">Category of the dispute - Dispute code and the reason for dispute is shown..</param>
        /// <param name="disputeNote">Note regarding the dispute..</param>
        public SettlementReconEntityDataInnerDisputeDetails(string? closedInFavorOf = default(string?), string? disputeResolvedOn = default(string?), string? disputeCategory = default(string?), string? disputeNote = default(string?))
        {
            this.closed_in_favor_of = closedInFavorOf;
            this.dispute_resolved_on = disputeResolvedOn;
            this.dispute_category = disputeCategory;
            this.dispute_note = disputeNote;
        }

        /// <summary>
        /// Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.
        /// </summary>
        /// <value>Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.</value>
        [DataMember(Name = "closed_in_favor_of", EmitDefaultValue = false)]
        public string? closed_in_favor_of { get; set; }

        /// <summary>
        /// Date and time when the dispute was resolved.
        /// </summary>
        /// <value>Date and time when the dispute was resolved.</value>
        [DataMember(Name = "dispute_resolved_on", EmitDefaultValue = false)]
        public string? dispute_resolved_on { get; set; }

        /// <summary>
        /// Category of the dispute - Dispute code and the reason for dispute is shown.
        /// </summary>
        /// <value>Category of the dispute - Dispute code and the reason for dispute is shown.</value>
        [DataMember(Name = "dispute_category", EmitDefaultValue = false)]
        public string? dispute_category { get; set; }

        /// <summary>
        /// Note regarding the dispute.
        /// </summary>
        /// <value>Note regarding the dispute.</value>
        [DataMember(Name = "dispute_note", EmitDefaultValue = false)]
        public string? dispute_note { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementReconEntityDataInnerDisputeDetails {\n");
            sb.Append("  closed_in_favor_of: ").Append(closed_in_favor_of).Append("\n");
            sb.Append("  dispute_resolved_on: ").Append(dispute_resolved_on).Append("\n");
            sb.Append("  dispute_category: ").Append(dispute_category).Append("\n");
            sb.Append("  dispute_note: ").Append(dispute_note).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementReconEntityDataInnerDisputeDetails);
        }

        /// <summary>
        /// Returns true if SettlementReconEntityDataInnerDisputeDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementReconEntityDataInnerDisputeDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementReconEntityDataInnerDisputeDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.closed_in_favor_of == input.closed_in_favor_of ||
                    (this.closed_in_favor_of != null &&
                    this.closed_in_favor_of.Equals(input.closed_in_favor_of))
                ) && 
                (
                    this.dispute_resolved_on == input.dispute_resolved_on ||
                    (this.dispute_resolved_on != null &&
                    this.dispute_resolved_on.Equals(input.dispute_resolved_on))
                ) && 
                (
                    this.dispute_category == input.dispute_category ||
                    (this.dispute_category != null &&
                    this.dispute_category.Equals(input.dispute_category))
                ) && 
                (
                    this.dispute_note == input.dispute_note ||
                    (this.dispute_note != null &&
                    this.dispute_note.Equals(input.dispute_note))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringclosed_in_favor_of) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringclosed_in_favor_of);
            if (deserializedJsonString.ContainsKey("closed_in_favor_of")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.closed_in_favor_of != null)
                {
                    hashCode = (hashCode * 59) + this.closed_in_favor_of.GetHashCode();
                }
                if (this.dispute_resolved_on != null)
                {
                    hashCode = (hashCode * 59) + this.dispute_resolved_on.GetHashCode();
                }
                if (this.dispute_category != null)
                {
                    hashCode = (hashCode * 59) + this.dispute_category.GetHashCode();
                }
                if (this.dispute_note != null)
                {
                    hashCode = (hashCode * 59) + this.dispute_note.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
