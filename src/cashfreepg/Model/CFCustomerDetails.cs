/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFCustomerDetails
    /// </summary>
    [DataContract(Name = "CFCustomerDetails")]
    public partial class CFCustomerDetails : IEquatable<CFCustomerDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFCustomerDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CFCustomerDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFCustomerDetails" /> class.
        /// </summary>
        /// <param name="customerId">A unique identifier for the customer. Use alphanumeric values only. (required).</param>
        /// <param name="customerEmail">Customer email address. (required).</param>
        /// <param name="customerPhone">Customer phone number. (required).</param>
        /// <param name="customerBankAccountNumber">Customer bank account. Required if you want to do a bank account check (TPV) (required).</param>
        /// <param name="customerBankIfsc">Customer bank IFSC. Required if you want to do a bank account check (TPV) (required).</param>
        /// <param name="customerBankCode">Customer bank code. Required for net banking payments, if you want to do a bank account check (TPV) (required).</param>
        public CFCustomerDetails(string? customerId = default(string?), string? customerEmail = default(string?), string? customerPhone = default(string?), string? customerBankAccountNumber = default(string?), string? customerBankIfsc = default(string?), int? customerBankCode = default(int?))
        {
            // to ensure "customerId" is required (not null)
            if (customerId == null) {
                throw new ArgumentNullException("customerId is a required property for CFCustomerDetails and cannot be null");
            }
            this.CustomerId = customerId;
            // to ensure "customerEmail" is required (not null)
            if (customerEmail == null) {
                throw new ArgumentNullException("customerEmail is a required property for CFCustomerDetails and cannot be null");
            }
            this.CustomerEmail = customerEmail;
            // to ensure "customerPhone" is required (not null)
            if (customerPhone == null) {
                throw new ArgumentNullException("customerPhone is a required property for CFCustomerDetails and cannot be null");
            }
            this.CustomerPhone = customerPhone;
            // to ensure "customerBankAccountNumber" is required (not null)
            this.CustomerBankAccountNumber = customerBankAccountNumber;
            // to ensure "customerBankIfsc" is required (not null)
            this.CustomerBankIfsc = customerBankIfsc;
            this.CustomerBankCode = customerBankCode;
        }

        /// <summary>
        /// A unique identifier for the customer. Use alphanumeric values only.
        /// </summary>
        /// <value>A unique identifier for the customer. Use alphanumeric values only.</value>
        [DataMember(Name = "customer_id", IsRequired = true, EmitDefaultValue = false)]
        public string? CustomerId { get; set; }

        /// <summary>
        /// Customer email address.
        /// </summary>
        /// <value>Customer email address.</value>
        [DataMember(Name = "customer_email", IsRequired = true, EmitDefaultValue = false)]
        public string? CustomerEmail { get; set; }

        /// <summary>
        /// Customer phone number.
        /// </summary>
        /// <value>Customer phone number.</value>
        [DataMember(Name = "customer_phone", IsRequired = true, EmitDefaultValue = false)]
        public string? CustomerPhone { get; set; }

        /// <summary>
        /// Customer bank account. Required if you want to do a bank account check (TPV)
        /// </summary>
        /// <value>Customer bank account. Required if you want to do a bank account check (TPV)</value>
        [DataMember(Name = "customer_bank_account_number", IsRequired = false, EmitDefaultValue = false)]
        public string? CustomerBankAccountNumber { get; set; }

        /// <summary>
        /// Customer bank IFSC. Required if you want to do a bank account check (TPV)
        /// </summary>
        /// <value>Customer bank IFSC. Required if you want to do a bank account check (TPV)</value>
        [DataMember(Name = "customer_bank_ifsc", IsRequired = false, EmitDefaultValue = false)]
        public string? CustomerBankIfsc { get; set; }

        /// <summary>
        /// Customer bank code. Required for net banking payments, if you want to do a bank account check (TPV)
        /// </summary>
        /// <value>Customer bank code. Required for net banking payments, if you want to do a bank account check (TPV)</value>
        [DataMember(Name = "customer_bank_code", IsRequired = false, EmitDefaultValue = false)]
        public int? CustomerBankCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFCustomerDetails {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  CustomerPhone: ").Append(CustomerPhone).Append("\n");
            sb.Append("  CustomerBankAccountNumber: ").Append(CustomerBankAccountNumber).Append("\n");
            sb.Append("  CustomerBankIfsc: ").Append(CustomerBankIfsc).Append("\n");
            sb.Append("  CustomerBankCode: ").Append(CustomerBankCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFCustomerDetails);
        }

        /// <summary>
        /// Returns true if CFCustomerDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CFCustomerDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFCustomerDetails? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.CustomerPhone == input.CustomerPhone ||
                    (this.CustomerPhone != null &&
                    this.CustomerPhone.Equals(input.CustomerPhone))
                ) && 
                (
                    this.CustomerBankAccountNumber == input.CustomerBankAccountNumber ||
                    (this.CustomerBankAccountNumber != null &&
                    this.CustomerBankAccountNumber.Equals(input.CustomerBankAccountNumber))
                ) && 
                (
                    this.CustomerBankIfsc == input.CustomerBankIfsc ||
                    (this.CustomerBankIfsc != null &&
                    this.CustomerBankIfsc.Equals(input.CustomerBankIfsc))
                ) && 
                (
                    this.CustomerBankCode == input.CustomerBankCode ||
                    this.CustomerBankCode.Equals(input.CustomerBankCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.CustomerEmail != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerEmail.GetHashCode();
                }
                if (this.CustomerPhone != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerPhone.GetHashCode();
                }
                if (this.CustomerBankAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerBankAccountNumber.GetHashCode();
                }
                if (this.CustomerBankIfsc != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerBankIfsc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomerBankCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CustomerId (string) maxLength
            if (this.CustomerId != null && this.CustomerId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerId, length must be less than 50.", new [] { "CustomerId" });
            }

            // CustomerId (string) minLength
            if (this.CustomerId != null && this.CustomerId.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerId, length must be greater than 3.", new [] { "CustomerId" });
            }

            // CustomerEmail (string) maxLength
            if (this.CustomerEmail != null && this.CustomerEmail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerEmail, length must be less than 100.", new [] { "CustomerEmail" });
            }

            // CustomerEmail (string) minLength
            if (this.CustomerEmail != null && this.CustomerEmail.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerEmail, length must be greater than 3.", new [] { "CustomerEmail" });
            }

            // CustomerPhone (string) maxLength
            if (this.CustomerPhone != null && this.CustomerPhone.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerPhone, length must be less than 10.", new [] { "CustomerPhone" });
            }

            // CustomerPhone (string) minLength
            if (this.CustomerPhone != null && this.CustomerPhone.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerPhone, length must be greater than 10.", new [] { "CustomerPhone" });
            }

            // CustomerBankAccountNumber (string) maxLength
            if (this.CustomerBankAccountNumber != null && this.CustomerBankAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerBankAccountNumber, length must be less than 20.", new [] { "CustomerBankAccountNumber" });
            }

            // CustomerBankAccountNumber (string) minLength
            if (this.CustomerBankAccountNumber != null && this.CustomerBankAccountNumber.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerBankAccountNumber, length must be greater than 3.", new [] { "CustomerBankAccountNumber" });
            }

            yield break;
        }
    }

}
