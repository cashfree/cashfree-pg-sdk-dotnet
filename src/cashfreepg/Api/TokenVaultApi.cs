/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cashfreepg.Client;
using cashfreepg.Model;
using cashfreepg.Interface;

namespace cashfreepg.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenVaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Saved Instrument
        /// </summary>
        /// <remarks>
        /// To delete a saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>CFFetchAllSavedInstruments</returns>
        CFInstrumentsResponse DeleteSpecificSavedInstrument(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion = default(string?), string? xRequestId = default(string?), string xIdempotencyKey = default(string?));

        /// <summary>
        /// Delete Saved Instrument
        /// </summary>
        /// <remarks>
        /// To delete a saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>ApiResponse of CFFetchAllSavedInstruments</returns>
        ApiResponse<CFFetchAllSavedInstruments> DeleteSpecificSavedInstrumentWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion = default(string?), string? xRequestId = default(string?), string xIdempotencyKey = default(string?));
        /// <summary>
        /// Fetch All Saved Instruments
        /// </summary>
        /// <remarks>
        /// To get all saved instruments for a customer id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>List&lt;CFFetchAllSavedInstruments&gt;</returns>
        CFAllInstrumentsResponse FetchAllSavedInstruments(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?));

        /// <summary>
        /// Fetch All Saved Instruments
        /// </summary>
        /// <remarks>
        /// To get all saved instruments for a customer id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CFFetchAllSavedInstruments&gt;</returns>
        ApiResponse<List<CFFetchAllSavedInstruments>> FetchAllSavedInstrumentsWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?));
        /// <summary>
        /// Fetch cryptogram for saved instrument
        /// </summary>
        /// <remarks>
        /// To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFCryptogram</returns>
        CFCryptogramResponse FetchCryptogram(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?));

        /// <summary>
        /// Fetch cryptogram for saved instrument
        /// </summary>
        /// <remarks>
        /// To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFCryptogram</returns>
        ApiResponse<CFCryptogram> FetchCryptogramWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?));
        /// <summary>
        /// Fetch Single Saved Instrument
        /// </summary>
        /// <remarks>
        /// To get specific saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFFetchAllSavedInstruments</returns>
        CFInstrumentsResponse FetchSpecificSavedInstrument(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?));

        /// <summary>
        /// Fetch Single Saved Instrument
        /// </summary>
        /// <remarks>
        /// To get specific saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFFetchAllSavedInstruments</returns>
        ApiResponse<CFFetchAllSavedInstruments> FetchSpecificSavedInstrumentWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenVaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Saved Instrument
        /// </summary>
        /// <remarks>
        /// To delete a saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFFetchAllSavedInstruments</returns>
        System.Threading.Tasks.Task<CFFetchAllSavedInstruments> DeleteSpecificSavedInstrumentAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Saved Instrument
        /// </summary>
        /// <remarks>
        /// To delete a saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFFetchAllSavedInstruments)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFFetchAllSavedInstruments>> DeleteSpecificSavedInstrumentWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch All Saved Instruments
        /// </summary>
        /// <remarks>
        /// To get all saved instruments for a customer id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CFFetchAllSavedInstruments&gt;</returns>
        System.Threading.Tasks.Task<List<CFFetchAllSavedInstruments>> FetchAllSavedInstrumentsAsync(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch All Saved Instruments
        /// </summary>
        /// <remarks>
        /// To get all saved instruments for a customer id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CFFetchAllSavedInstruments&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CFFetchAllSavedInstruments>>> FetchAllSavedInstrumentsWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch cryptogram for saved instrument
        /// </summary>
        /// <remarks>
        /// To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFCryptogram</returns>
        System.Threading.Tasks.Task<CFCryptogram> FetchCryptogramAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch cryptogram for saved instrument
        /// </summary>
        /// <remarks>
        /// To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFCryptogram)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFCryptogram>> FetchCryptogramWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch Single Saved Instrument
        /// </summary>
        /// <remarks>
        /// To get specific saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFFetchAllSavedInstruments</returns>
        System.Threading.Tasks.Task<CFFetchAllSavedInstruments> FetchSpecificSavedInstrumentAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch Single Saved Instrument
        /// </summary>
        /// <remarks>
        /// To get specific saved instrument for a customer id and instrument id
        /// </remarks>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFFetchAllSavedInstruments)</returns>
        System.Threading.Tasks.Task<ApiResponse<CFFetchAllSavedInstruments>> FetchSpecificSavedInstrumentWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenVaultApi : ITokenVaultApiSync, ITokenVaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokenVaultApi : ITokenVaultApi
    {
        private cashfreepg.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenVaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenVaultApi() : this((string)"")
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenVaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenVaultApi(string basePath)
        {
            this.Configuration = cashfreepg.Client.Configuration.MergeConfigurations(
                cashfreepg.Client.GlobalConfiguration.Instance,
                new cashfreepg.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenVaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokenVaultApi(cashfreepg.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cashfreepg.Client.Configuration.MergeConfigurations(
                cashfreepg.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cashfreepg.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenVaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokenVaultApi(cashfreepg.Client.ISynchronousClient client, cashfreepg.Client.IAsynchronousClient asyncClient, cashfreepg.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cashfreepg.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cashfreepg.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cashfreepg.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cashfreepg.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cashfreepg.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Saved Instrument To delete a saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>CFFetchAllSavedInstruments</returns>
        public CFInstrumentsResponse DeleteSpecificSavedInstrument(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion = default(string?), string? xRequestId = default(string?), string xIdempotencyKey = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments> localVarResponse = DeleteSpecificSavedInstrumentWithHttpInfo(xClientId, xClientSecret, customerId, instrumentId, xApiVersion, xRequestId, xIdempotencyKey);
            return new CFInstrumentsResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Delete Saved Instrument To delete a saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <returns>ApiResponse of CFFetchAllSavedInstruments</returns>
        public cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments> DeleteSpecificSavedInstrumentWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion = default(string?), string? xRequestId = default(string?), string xIdempotencyKey = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfreepg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-keu", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }


            // make the HTTP request
            var link = "/customers/" + customerId + "/instruments/" + instrumentId;
            var localVarResponse = this.Client.Delete<CFFetchAllSavedInstruments>(link, localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpecificSavedInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Saved Instrument To delete a saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFFetchAllSavedInstruments</returns>
        public async System.Threading.Tasks.Task<CFFetchAllSavedInstruments> DeleteSpecificSavedInstrumentAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments> localVarResponse = await DeleteSpecificSavedInstrumentWithHttpInfoAsync(xClientId, xClientSecret, customerId, instrumentId, xApiVersion, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Saved Instrument To delete a saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFFetchAllSavedInstruments)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments>> DeleteSpecificSavedInstrumentWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->DeleteSpecificSavedInstrument");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfreepg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CFFetchAllSavedInstruments>("/customers/{customer_id}/instruments/{instrument_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpecificSavedInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch All Saved Instruments To get all saved instruments for a customer id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>List&lt;CFFetchAllSavedInstruments&gt;</returns>
        public CFAllInstrumentsResponse FetchAllSavedInstruments(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?))
        {
            cashfreepg.Client.ApiResponse<List<CFFetchAllSavedInstruments>> localVarResponse = FetchAllSavedInstrumentsWithHttpInfo(xClientId, xClientSecret, customerId, instrumentType, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId);
            return new CFAllInstrumentsResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Fetch All Saved Instruments To get all saved instruments for a customer id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CFFetchAllSavedInstruments&gt;</returns>
        public cashfreepg.Client.ApiResponse<List<CFFetchAllSavedInstruments>> FetchAllSavedInstrumentsWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->FetchAllSavedInstruments");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->FetchAllSavedInstruments");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->FetchAllSavedInstruments");
            }

            // verify the required parameter 'instrumentType' is set
            if (instrumentType == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentType' when calling TokenVaultApi->FetchAllSavedInstruments");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(cashfreepg.Client.ClientUtils.ParameterToMultiMap("", "instrument_type", instrumentType));
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var link = "/customers/" + customerId + "/instruments";
            var localVarResponse = this.Client.Get<List<CFFetchAllSavedInstruments>>(link, localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAllSavedInstruments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch All Saved Instruments To get all saved instruments for a customer id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CFFetchAllSavedInstruments&gt;</returns>
        public async System.Threading.Tasks.Task<List<CFFetchAllSavedInstruments>> FetchAllSavedInstrumentsAsync(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<List<CFFetchAllSavedInstruments>> localVarResponse = await FetchAllSavedInstrumentsWithHttpInfoAsync(xClientId, xClientSecret, customerId, instrumentType, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch All Saved Instruments To get all saved instruments for a customer id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentType"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CFFetchAllSavedInstruments&gt;)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<List<CFFetchAllSavedInstruments>>> FetchAllSavedInstrumentsWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentType, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->FetchAllSavedInstruments");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->FetchAllSavedInstruments");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->FetchAllSavedInstruments");
            }

            // verify the required parameter 'instrumentType' is set
            if (instrumentType == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentType' when calling TokenVaultApi->FetchAllSavedInstruments");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(cashfreepg.Client.ClientUtils.ParameterToMultiMap("", "instrument_type", instrumentType));
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CFFetchAllSavedInstruments>>("/customers/{customer_id}/instruments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAllSavedInstruments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch cryptogram for saved instrument To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFCryptogram</returns>
        public CFCryptogramResponse FetchCryptogram(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFCryptogram> localVarResponse = FetchCryptogramWithHttpInfo(xClientId, xClientSecret, customerId, instrumentId, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId);
            return new CFCryptogramResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Fetch cryptogram for saved instrument To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFCryptogram</returns>
        public cashfreepg.Client.ApiResponse<CFCryptogram> FetchCryptogramWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->FetchCryptogram");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->FetchCryptogram");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->FetchCryptogram");
            }

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->FetchCryptogram");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfreepg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var link = "/customers/" + customerId + "/instruments/" + instrumentId + "/cryptogram";
            var localVarResponse = this.Client.Get<CFCryptogram>(link, localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchCryptogram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch cryptogram for saved instrument To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFCryptogram</returns>
        public async System.Threading.Tasks.Task<CFCryptogram> FetchCryptogramAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFCryptogram> localVarResponse = await FetchCryptogramWithHttpInfoAsync(xClientId, xClientSecret, customerId, instrumentId, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch cryptogram for saved instrument To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFCryptogram)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFCryptogram>> FetchCryptogramWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->FetchCryptogram");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->FetchCryptogram");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->FetchCryptogram");
            }

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->FetchCryptogram");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfreepg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CFCryptogram>("/customers/{customer_id}/instruments/{instrument_id}/cryptogram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchCryptogram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Single Saved Instrument To get specific saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>CFFetchAllSavedInstruments</returns>
        public CFInstrumentsResponse FetchSpecificSavedInstrument(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?))
        {
            cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments> localVarResponse = FetchSpecificSavedInstrumentWithHttpInfo(xClientId, xClientSecret, customerId, instrumentId, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId);
            return new CFInstrumentsResponse(localVarResponse.Data, localVarResponse.Headers);
        }

        /// <summary>
        /// Fetch Single Saved Instrument To get specific saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <returns>ApiResponse of CFFetchAllSavedInstruments</returns>
        public cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments> FetchSpecificSavedInstrumentWithHttpInfo(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }

            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfreepg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var link = "/customers/" + customerId + "/instruments/" + instrumentId;
            var localVarResponse = this.Client.Get<CFFetchAllSavedInstruments>(link, localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchSpecificSavedInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Single Saved Instrument To get specific saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CFFetchAllSavedInstruments</returns>
        public async System.Threading.Tasks.Task<CFFetchAllSavedInstruments> FetchSpecificSavedInstrumentAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments> localVarResponse = await FetchSpecificSavedInstrumentWithHttpInfoAsync(xClientId, xClientSecret, customerId, instrumentId, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Single Saved Instrument To get specific saved instrument for a customer id and instrument id
        /// </summary>
        /// <exception cref="cashfreepg.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xClientId"></param>
        /// <param name="xClientSecret"></param>
        /// <param name="customerId"></param>
        /// <param name="instrumentId"></param>
        /// <param name="xApiVersion"> (optional, default to &quot;2022-01-01&quot;)</param>
        /// <param name="xIdempotencyReplayed"> (optional, default to false)</param>
        /// <param name="xIdempotencyKey"> (optional)</param>
        /// <param name="xRequestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CFFetchAllSavedInstruments)</returns>
        public async System.Threading.Tasks.Task<cashfreepg.Client.ApiResponse<CFFetchAllSavedInstruments>> FetchSpecificSavedInstrumentWithHttpInfoAsync(string xClientId, string xClientSecret, string customerId, string instrumentId, string xApiVersion,bool? xIdempotencyReplayed = default(bool?), string? xIdempotencyKey = default(string?), string? xRequestId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xClientId' is set
            if (xClientId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientId' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }

            // verify the required parameter 'xClientSecret' is set
            if (xClientSecret == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'xClientSecret' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'customerId' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }

            // verify the required parameter 'instrumentId' is set
            if (instrumentId == null)
            {
                throw new cashfreepg.Client.ApiException(400, "Missing required parameter 'instrumentId' when calling TokenVaultApi->FetchSpecificSavedInstrument");
            }


            cashfreepg.Client.RequestOptions localVarRequestOptions = new cashfreepg.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfreepg.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cashfreepg.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_id", cashfreepg.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrument_id", cashfreepg.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-id", cashfreepg.Client.ClientUtils.ParameterToString(xClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-secret", cashfreepg.Client.ClientUtils.ParameterToString(xClientSecret)); // header parameter
            if (xApiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfreepg.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            }
            if (xIdempotencyReplayed != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-replayed", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyReplayed)); // header parameter
            }
            if (xIdempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-idempotency-key", cashfreepg.Client.ClientUtils.ParameterToString(xIdempotencyKey)); // header parameter
            }
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfreepg.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CFFetchAllSavedInstruments>("/customers/{customer_id}/instruments/{instrument_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchSpecificSavedInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
