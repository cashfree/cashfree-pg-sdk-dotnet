/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Bank details object
    /// </summary>
    [DataContract(Name = "SubscriptionBankDetails")]
    public class SubscriptionBankDetails : IEquatable<SubscriptionBankDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionBankDetails" /> class.
        /// </summary>
        /// <param name="bankId">ID of the bank..</param>
        /// <param name="bankName">Name of the bank..</param>
        /// <param name="accountAuthModes">List of account authentication modes supported by the bank. (e.g. DEBIT_CARD, NET_BANKING, AADHAAR).</param>
        public SubscriptionBankDetails(string? bankId = default(string?), string? bankName = default(string?), List<string>? accountAuthModes = default(List<string>?))
        {
            this.bank_id = bankId;
            this.bank_name = bankName;
            this.account_auth_modes = accountAuthModes;
        }

        /// <summary>
        /// ID of the bank.
        /// </summary>
        /// <value>ID of the bank.</value>
        [DataMember(Name = "bank_id", EmitDefaultValue = false)]
        public string? bank_id { get; set; }

        /// <summary>
        /// Name of the bank.
        /// </summary>
        /// <value>Name of the bank.</value>
        [DataMember(Name = "bank_name", EmitDefaultValue = false)]
        public string? bank_name { get; set; }

        /// <summary>
        /// List of account authentication modes supported by the bank. (e.g. DEBIT_CARD, NET_BANKING, AADHAAR)
        /// </summary>
        /// <value>List of account authentication modes supported by the bank. (e.g. DEBIT_CARD, NET_BANKING, AADHAAR)</value>
        [DataMember(Name = "account_auth_modes", EmitDefaultValue = false)]
        public List<string>? account_auth_modes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionBankDetails {\n");
            sb.Append("  bank_id: ").Append(bank_id).Append("\n");
            sb.Append("  bank_name: ").Append(bank_name).Append("\n");
            sb.Append("  account_auth_modes: ").Append(account_auth_modes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionBankDetails);
        }

        /// <summary>
        /// Returns true if SubscriptionBankDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionBankDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionBankDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.bank_id == input.bank_id ||
                    (this.bank_id != null &&
                    this.bank_id.Equals(input.bank_id))
                ) && 
                (
                    this.bank_name == input.bank_name ||
                    (this.bank_name != null &&
                    this.bank_name.Equals(input.bank_name))
                ) && 
                (
                    this.account_auth_modes == input.account_auth_modes ||
                    this.account_auth_modes != null &&
                    input.account_auth_modes != null &&
                    this.account_auth_modes.SequenceEqual(input.account_auth_modes)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringbank_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringbank_id);
            if (deserializedJsonString.ContainsKey("bank_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.bank_id != null)
                {
                    hashCode = (hashCode * 59) + this.bank_id.GetHashCode();
                }
                if (this.bank_name != null)
                {
                    hashCode = (hashCode * 59) + this.bank_name.GetHashCode();
                }
                if (this.account_auth_modes != null)
                {
                    hashCode = (hashCode * 59) + this.account_auth_modes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
