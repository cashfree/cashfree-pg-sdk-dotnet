/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// ESOrderReconResponseDataInner
    /// </summary>
    [DataContract(Name = "ESOrderReconResponse_data_inner")]
    public class ESOrderReconResponseDataInner : IEquatable<ESOrderReconResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ESOrderReconResponseDataInner" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="settlementEligibilityTime">settlementEligibilityTime.</param>
        /// <param name="status">status.</param>
        /// <param name="merchantOrderId">merchantOrderId.</param>
        /// <param name="txTime">txTime.</param>
        /// <param name="settled">settled.</param>
        /// <param name="entityId">entityId.</param>
        /// <param name="merchantSettlementUtr">merchantSettlementUtr.</param>
        /// <param name="currency">currency.</param>
        /// <param name="saleType">saleType.</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="customerEmail">customerEmail.</param>
        /// <param name="customerPhone">customerPhone.</param>
        /// <param name="merchantVendorCommission">merchantVendorCommission.</param>
        /// <param name="splitServiceCharge">splitServiceCharge.</param>
        /// <param name="splitServiceTax">splitServiceTax.</param>
        /// <param name="pgServiceTax">pgServiceTax.</param>
        /// <param name="pgServiceCharge">pgServiceCharge.</param>
        /// <param name="pgChargePostpaid">pgChargePostpaid.</param>
        /// <param name="merchantSettlementId">merchantSettlementId.</param>
        /// <param name="addedOn">addedOn.</param>
        /// <param name="tags">tags.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="settlementInitiatedOn">settlementInitiatedOn.</param>
        /// <param name="settlementTime">settlementTime.</param>
        /// <param name="orderSplits">orderSplits.</param>
        /// <param name="eligibleSplitBalance">eligibleSplitBalance.</param>
        public ESOrderReconResponseDataInner(decimal? amount = default(decimal?), string? settlementEligibilityTime = default(string?), string? status = default(string?), string? merchantOrderId = default(string?), string? txTime = default(string?), string? settled = default(string?), string? entityId = default(string?), string? merchantSettlementUtr = default(string?), string? currency = default(string?), string? saleType = default(string?), string? customerName = default(string?), string? customerEmail = default(string?), string? customerPhone = default(string?), string? merchantVendorCommission = default(string?), string? splitServiceCharge = default(string?), string? splitServiceTax = default(string?), string? pgServiceTax = default(string?), string? pgServiceCharge = default(string?), string? pgChargePostpaid = default(string?), string? merchantSettlementId = default(string?), string? addedOn = default(string?), string? tags = default(string?), string? entityType = default(string?), string? settlementInitiatedOn = default(string?), string? settlementTime = default(string?), List<ESOrderReconResponseDataInnerOrderSplitsInner>? orderSplits = default(List<ESOrderReconResponseDataInnerOrderSplitsInner>?), string? eligibleSplitBalance = default(string?))
        {
            this.amount = amount;
            this.settlement_eligibility_time = settlementEligibilityTime;
            this.status = status;
            this.merchant_order_id = merchantOrderId;
            this.tx_time = txTime;
            this.settled = settled;
            this.entity_id = entityId;
            this.merchant_settlement_utr = merchantSettlementUtr;
            this.currency = currency;
            this.sale_type = saleType;
            this.customer_name = customerName;
            this.customer_email = customerEmail;
            this.customer_phone = customerPhone;
            this.merchant_vendor_commission = merchantVendorCommission;
            this.split_service_charge = splitServiceCharge;
            this.split_service_tax = splitServiceTax;
            this.pg_service_tax = pgServiceTax;
            this.pg_service_charge = pgServiceCharge;
            this.pg_charge_postpaid = pgChargePostpaid;
            this.merchant_settlement_id = merchantSettlementId;
            this.added_on = addedOn;
            this.tags = tags;
            this.entity_type = entityType;
            this.settlement_initiated_on = settlementInitiatedOn;
            this.settlement_time = settlementTime;
            this.order_splits = orderSplits;
            this.eligible_split_balance = eligibleSplitBalance;
        }

        /// <summary>
        /// Gets or Sets amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal? amount { get; set; }

        /// <summary>
        /// Gets or Sets settlement_eligibility_time
        /// </summary>
        [DataMember(Name = "settlement_eligibility_time", EmitDefaultValue = false)]
        public string? settlement_eligibility_time { get; set; }

        /// <summary>
        /// Gets or Sets status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string? status { get; set; }

        /// <summary>
        /// Gets or Sets merchant_order_id
        /// </summary>
        [DataMember(Name = "merchant_order_id", EmitDefaultValue = false)]
        public string? merchant_order_id { get; set; }

        /// <summary>
        /// Gets or Sets tx_time
        /// </summary>
        [DataMember(Name = "tx_time", EmitDefaultValue = false)]
        public string? tx_time { get; set; }

        /// <summary>
        /// Gets or Sets settled
        /// </summary>
        [DataMember(Name = "settled", EmitDefaultValue = false)]
        public string? settled { get; set; }

        /// <summary>
        /// Gets or Sets entity_id
        /// </summary>
        [DataMember(Name = "entity_id", EmitDefaultValue = false)]
        public string? entity_id { get; set; }

        /// <summary>
        /// Gets or Sets merchant_settlement_utr
        /// </summary>
        [DataMember(Name = "merchant_settlement_utr", EmitDefaultValue = false)]
        public string? merchant_settlement_utr { get; set; }

        /// <summary>
        /// Gets or Sets currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string? currency { get; set; }

        /// <summary>
        /// Gets or Sets sale_type
        /// </summary>
        [DataMember(Name = "sale_type", EmitDefaultValue = false)]
        public string? sale_type { get; set; }

        /// <summary>
        /// Gets or Sets customer_name
        /// </summary>
        [DataMember(Name = "customer_name", EmitDefaultValue = false)]
        public string? customer_name { get; set; }

        /// <summary>
        /// Gets or Sets customer_email
        /// </summary>
        [DataMember(Name = "customer_email", EmitDefaultValue = false)]
        public string? customer_email { get; set; }

        /// <summary>
        /// Gets or Sets customer_phone
        /// </summary>
        [DataMember(Name = "customer_phone", EmitDefaultValue = false)]
        public string? customer_phone { get; set; }

        /// <summary>
        /// Gets or Sets merchant_vendor_commission
        /// </summary>
        [DataMember(Name = "merchant_vendor_commission", EmitDefaultValue = false)]
        public string? merchant_vendor_commission { get; set; }

        /// <summary>
        /// Gets or Sets split_service_charge
        /// </summary>
        [DataMember(Name = "split_service_charge", EmitDefaultValue = false)]
        public string? split_service_charge { get; set; }

        /// <summary>
        /// Gets or Sets split_service_tax
        /// </summary>
        [DataMember(Name = "split_service_tax", EmitDefaultValue = false)]
        public string? split_service_tax { get; set; }

        /// <summary>
        /// Gets or Sets pg_service_tax
        /// </summary>
        [DataMember(Name = "pg_service_tax", EmitDefaultValue = false)]
        public string? pg_service_tax { get; set; }

        /// <summary>
        /// Gets or Sets pg_service_charge
        /// </summary>
        [DataMember(Name = "pg_service_charge", EmitDefaultValue = false)]
        public string? pg_service_charge { get; set; }

        /// <summary>
        /// Gets or Sets pg_charge_postpaid
        /// </summary>
        [DataMember(Name = "pg_charge_postpaid", EmitDefaultValue = false)]
        public string? pg_charge_postpaid { get; set; }

        /// <summary>
        /// Gets or Sets merchant_settlement_id
        /// </summary>
        [DataMember(Name = "merchant_settlement_id", EmitDefaultValue = false)]
        public string? merchant_settlement_id { get; set; }

        /// <summary>
        /// Gets or Sets added_on
        /// </summary>
        [DataMember(Name = "added_on", EmitDefaultValue = false)]
        public string? added_on { get; set; }

        /// <summary>
        /// Gets or Sets tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public string? tags { get; set; }

        /// <summary>
        /// Gets or Sets entity_type
        /// </summary>
        [DataMember(Name = "entity_type", EmitDefaultValue = false)]
        public string? entity_type { get; set; }

        /// <summary>
        /// Gets or Sets settlement_initiated_on
        /// </summary>
        [DataMember(Name = "settlement_initiated_on", EmitDefaultValue = false)]
        public string? settlement_initiated_on { get; set; }

        /// <summary>
        /// Gets or Sets settlement_time
        /// </summary>
        [DataMember(Name = "settlement_time", EmitDefaultValue = false)]
        public string? settlement_time { get; set; }

        /// <summary>
        /// Gets or Sets order_splits
        /// </summary>
        [DataMember(Name = "order_splits", EmitDefaultValue = false)]
        public List<ESOrderReconResponseDataInnerOrderSplitsInner>? order_splits { get; set; }

        /// <summary>
        /// Gets or Sets eligible_split_balance
        /// </summary>
        [DataMember(Name = "eligible_split_balance", EmitDefaultValue = false)]
        public string? eligible_split_balance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ESOrderReconResponseDataInner {\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  settlement_eligibility_time: ").Append(settlement_eligibility_time).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  merchant_order_id: ").Append(merchant_order_id).Append("\n");
            sb.Append("  tx_time: ").Append(tx_time).Append("\n");
            sb.Append("  settled: ").Append(settled).Append("\n");
            sb.Append("  entity_id: ").Append(entity_id).Append("\n");
            sb.Append("  merchant_settlement_utr: ").Append(merchant_settlement_utr).Append("\n");
            sb.Append("  currency: ").Append(currency).Append("\n");
            sb.Append("  sale_type: ").Append(sale_type).Append("\n");
            sb.Append("  customer_name: ").Append(customer_name).Append("\n");
            sb.Append("  customer_email: ").Append(customer_email).Append("\n");
            sb.Append("  customer_phone: ").Append(customer_phone).Append("\n");
            sb.Append("  merchant_vendor_commission: ").Append(merchant_vendor_commission).Append("\n");
            sb.Append("  split_service_charge: ").Append(split_service_charge).Append("\n");
            sb.Append("  split_service_tax: ").Append(split_service_tax).Append("\n");
            sb.Append("  pg_service_tax: ").Append(pg_service_tax).Append("\n");
            sb.Append("  pg_service_charge: ").Append(pg_service_charge).Append("\n");
            sb.Append("  pg_charge_postpaid: ").Append(pg_charge_postpaid).Append("\n");
            sb.Append("  merchant_settlement_id: ").Append(merchant_settlement_id).Append("\n");
            sb.Append("  added_on: ").Append(added_on).Append("\n");
            sb.Append("  tags: ").Append(tags).Append("\n");
            sb.Append("  entity_type: ").Append(entity_type).Append("\n");
            sb.Append("  settlement_initiated_on: ").Append(settlement_initiated_on).Append("\n");
            sb.Append("  settlement_time: ").Append(settlement_time).Append("\n");
            sb.Append("  order_splits: ").Append(order_splits).Append("\n");
            sb.Append("  eligible_split_balance: ").Append(eligible_split_balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ESOrderReconResponseDataInner);
        }

        /// <summary>
        /// Returns true if ESOrderReconResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ESOrderReconResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ESOrderReconResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.amount == input.amount ||
                    this.amount.Equals(input.amount)
                ) && 
                (
                    this.settlement_eligibility_time == input.settlement_eligibility_time ||
                    (this.settlement_eligibility_time != null &&
                    this.settlement_eligibility_time.Equals(input.settlement_eligibility_time))
                ) && 
                (
                    this.status == input.status ||
                    (this.status != null &&
                    this.status.Equals(input.status))
                ) && 
                (
                    this.merchant_order_id == input.merchant_order_id ||
                    (this.merchant_order_id != null &&
                    this.merchant_order_id.Equals(input.merchant_order_id))
                ) && 
                (
                    this.tx_time == input.tx_time ||
                    (this.tx_time != null &&
                    this.tx_time.Equals(input.tx_time))
                ) && 
                (
                    this.settled == input.settled ||
                    (this.settled != null &&
                    this.settled.Equals(input.settled))
                ) && 
                (
                    this.entity_id == input.entity_id ||
                    (this.entity_id != null &&
                    this.entity_id.Equals(input.entity_id))
                ) && 
                (
                    this.merchant_settlement_utr == input.merchant_settlement_utr ||
                    (this.merchant_settlement_utr != null &&
                    this.merchant_settlement_utr.Equals(input.merchant_settlement_utr))
                ) && 
                (
                    this.currency == input.currency ||
                    (this.currency != null &&
                    this.currency.Equals(input.currency))
                ) && 
                (
                    this.sale_type == input.sale_type ||
                    (this.sale_type != null &&
                    this.sale_type.Equals(input.sale_type))
                ) && 
                (
                    this.customer_name == input.customer_name ||
                    (this.customer_name != null &&
                    this.customer_name.Equals(input.customer_name))
                ) && 
                (
                    this.customer_email == input.customer_email ||
                    (this.customer_email != null &&
                    this.customer_email.Equals(input.customer_email))
                ) && 
                (
                    this.customer_phone == input.customer_phone ||
                    (this.customer_phone != null &&
                    this.customer_phone.Equals(input.customer_phone))
                ) && 
                (
                    this.merchant_vendor_commission == input.merchant_vendor_commission ||
                    (this.merchant_vendor_commission != null &&
                    this.merchant_vendor_commission.Equals(input.merchant_vendor_commission))
                ) && 
                (
                    this.split_service_charge == input.split_service_charge ||
                    (this.split_service_charge != null &&
                    this.split_service_charge.Equals(input.split_service_charge))
                ) && 
                (
                    this.split_service_tax == input.split_service_tax ||
                    (this.split_service_tax != null &&
                    this.split_service_tax.Equals(input.split_service_tax))
                ) && 
                (
                    this.pg_service_tax == input.pg_service_tax ||
                    (this.pg_service_tax != null &&
                    this.pg_service_tax.Equals(input.pg_service_tax))
                ) && 
                (
                    this.pg_service_charge == input.pg_service_charge ||
                    (this.pg_service_charge != null &&
                    this.pg_service_charge.Equals(input.pg_service_charge))
                ) && 
                (
                    this.pg_charge_postpaid == input.pg_charge_postpaid ||
                    (this.pg_charge_postpaid != null &&
                    this.pg_charge_postpaid.Equals(input.pg_charge_postpaid))
                ) && 
                (
                    this.merchant_settlement_id == input.merchant_settlement_id ||
                    (this.merchant_settlement_id != null &&
                    this.merchant_settlement_id.Equals(input.merchant_settlement_id))
                ) && 
                (
                    this.added_on == input.added_on ||
                    (this.added_on != null &&
                    this.added_on.Equals(input.added_on))
                ) && 
                (
                    this.tags == input.tags ||
                    (this.tags != null &&
                    this.tags.Equals(input.tags))
                ) && 
                (
                    this.entity_type == input.entity_type ||
                    (this.entity_type != null &&
                    this.entity_type.Equals(input.entity_type))
                ) && 
                (
                    this.settlement_initiated_on == input.settlement_initiated_on ||
                    (this.settlement_initiated_on != null &&
                    this.settlement_initiated_on.Equals(input.settlement_initiated_on))
                ) && 
                (
                    this.settlement_time == input.settlement_time ||
                    (this.settlement_time != null &&
                    this.settlement_time.Equals(input.settlement_time))
                ) && 
                (
                    this.order_splits == input.order_splits ||
                    this.order_splits != null &&
                    input.order_splits != null &&
                    this.order_splits.SequenceEqual(input.order_splits)
                ) && 
                (
                    this.eligible_split_balance == input.eligible_split_balance ||
                    (this.eligible_split_balance != null &&
                    this.eligible_split_balance.Equals(input.eligible_split_balance))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringamount) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringamount);
            if (deserializedJsonString.ContainsKey("amount")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.amount.GetHashCode();
                if (this.settlement_eligibility_time != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_eligibility_time.GetHashCode();
                }
                if (this.status != null)
                {
                    hashCode = (hashCode * 59) + this.status.GetHashCode();
                }
                if (this.merchant_order_id != null)
                {
                    hashCode = (hashCode * 59) + this.merchant_order_id.GetHashCode();
                }
                if (this.tx_time != null)
                {
                    hashCode = (hashCode * 59) + this.tx_time.GetHashCode();
                }
                if (this.settled != null)
                {
                    hashCode = (hashCode * 59) + this.settled.GetHashCode();
                }
                if (this.entity_id != null)
                {
                    hashCode = (hashCode * 59) + this.entity_id.GetHashCode();
                }
                if (this.merchant_settlement_utr != null)
                {
                    hashCode = (hashCode * 59) + this.merchant_settlement_utr.GetHashCode();
                }
                if (this.currency != null)
                {
                    hashCode = (hashCode * 59) + this.currency.GetHashCode();
                }
                if (this.sale_type != null)
                {
                    hashCode = (hashCode * 59) + this.sale_type.GetHashCode();
                }
                if (this.customer_name != null)
                {
                    hashCode = (hashCode * 59) + this.customer_name.GetHashCode();
                }
                if (this.customer_email != null)
                {
                    hashCode = (hashCode * 59) + this.customer_email.GetHashCode();
                }
                if (this.customer_phone != null)
                {
                    hashCode = (hashCode * 59) + this.customer_phone.GetHashCode();
                }
                if (this.merchant_vendor_commission != null)
                {
                    hashCode = (hashCode * 59) + this.merchant_vendor_commission.GetHashCode();
                }
                if (this.split_service_charge != null)
                {
                    hashCode = (hashCode * 59) + this.split_service_charge.GetHashCode();
                }
                if (this.split_service_tax != null)
                {
                    hashCode = (hashCode * 59) + this.split_service_tax.GetHashCode();
                }
                if (this.pg_service_tax != null)
                {
                    hashCode = (hashCode * 59) + this.pg_service_tax.GetHashCode();
                }
                if (this.pg_service_charge != null)
                {
                    hashCode = (hashCode * 59) + this.pg_service_charge.GetHashCode();
                }
                if (this.pg_charge_postpaid != null)
                {
                    hashCode = (hashCode * 59) + this.pg_charge_postpaid.GetHashCode();
                }
                if (this.merchant_settlement_id != null)
                {
                    hashCode = (hashCode * 59) + this.merchant_settlement_id.GetHashCode();
                }
                if (this.added_on != null)
                {
                    hashCode = (hashCode * 59) + this.added_on.GetHashCode();
                }
                if (this.tags != null)
                {
                    hashCode = (hashCode * 59) + this.tags.GetHashCode();
                }
                if (this.entity_type != null)
                {
                    hashCode = (hashCode * 59) + this.entity_type.GetHashCode();
                }
                if (this.settlement_initiated_on != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_initiated_on.GetHashCode();
                }
                if (this.settlement_time != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_time.GetHashCode();
                }
                if (this.order_splits != null)
                {
                    hashCode = (hashCode * 59) + this.order_splits.GetHashCode();
                }
                if (this.eligible_split_balance != null)
                {
                    hashCode = (hashCode * 59) + this.eligible_split_balance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
