/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// PARRequest
    /// </summary>
    [DataContract(Name = "PARRequest")]
    public class PARRequest : IEquatable<PARRequest>, IValidatableObject
    {
        /// <summary>
        /// Card type; allowed value is PLAIN_CARD.
        /// </summary>
        /// <value>Card type; allowed value is PLAIN_CARD.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardTypeEnum
        {
            /// <summary>
            /// Enum PLAINCARD for value: PLAIN_CARD
            /// </summary>
            [EnumMember(Value = "PLAIN_CARD")]
            PLAINCARD = 1
        }


        /// <summary>
        /// Card type; allowed value is PLAIN_CARD.
        /// </summary>
        /// <value>Card type; allowed value is PLAIN_CARD.</value>
        /// <example>PLAIN_CARD</example>
        [DataMember(Name = "card_type", IsRequired = true, EmitDefaultValue = true)]
        public CardTypeEnum card_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PARRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PARRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PARRequest" /> class.
        /// </summary>
        /// <param name="cardNumber">Card number, between 15 and 19 digits. (required).</param>
        /// <param name="cardCvv">Card CVV, 3 or 4 digits. (required).</param>
        /// <param name="cardExpiryMm">Two-digit card expiry month (01-12). (required).</param>
        /// <param name="cardExpiryYy">Two-digit card expiry year. (required).</param>
        /// <param name="cardType">Card type; allowed value is PLAIN_CARD. (required).</param>
        public PARRequest(string cardNumber = default(string), string cardCvv = default(string), string cardExpiryMm = default(string), string cardExpiryYy = default(string), CardTypeEnum cardType = default(CardTypeEnum))
        {
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new ArgumentNullException("cardNumber is a required property for PARRequest and cannot be null");
            }
            this.card_number = cardNumber;
            // to ensure "cardCvv" is required (not null)
            if (cardCvv == null)
            {
                throw new ArgumentNullException("cardCvv is a required property for PARRequest and cannot be null");
            }
            this.card_cvv = cardCvv;
            // to ensure "cardExpiryMm" is required (not null)
            if (cardExpiryMm == null)
            {
                throw new ArgumentNullException("cardExpiryMm is a required property for PARRequest and cannot be null");
            }
            this.card_expiry_mm = cardExpiryMm;
            // to ensure "cardExpiryYy" is required (not null)
            if (cardExpiryYy == null)
            {
                throw new ArgumentNullException("cardExpiryYy is a required property for PARRequest and cannot be null");
            }
            this.card_expiry_yy = cardExpiryYy;
            this.card_type = cardType;
        }

        /// <summary>
        /// Card number, between 15 and 19 digits.
        /// </summary>
        /// <value>Card number, between 15 and 19 digits.</value>
        /// <example>xxxx...xxx</example>
        [DataMember(Name = "card_number", IsRequired = true, EmitDefaultValue = true)]
        public string card_number { get; set; }

        /// <summary>
        /// Card CVV, 3 or 4 digits.
        /// </summary>
        /// <value>Card CVV, 3 or 4 digits.</value>
        /// <example>xxx</example>
        [DataMember(Name = "card_cvv", IsRequired = true, EmitDefaultValue = true)]
        public string card_cvv { get; set; }

        /// <summary>
        /// Two-digit card expiry month (01-12).
        /// </summary>
        /// <value>Two-digit card expiry month (01-12).</value>
        /// <example>xx</example>
        [DataMember(Name = "card_expiry_mm", IsRequired = true, EmitDefaultValue = true)]
        public string card_expiry_mm { get; set; }

        /// <summary>
        /// Two-digit card expiry year.
        /// </summary>
        /// <value>Two-digit card expiry year.</value>
        /// <example>xx</example>
        [DataMember(Name = "card_expiry_yy", IsRequired = true, EmitDefaultValue = true)]
        public string card_expiry_yy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PARRequest {\n");
            sb.Append("  card_number: ").Append(card_number).Append("\n");
            sb.Append("  card_cvv: ").Append(card_cvv).Append("\n");
            sb.Append("  card_expiry_mm: ").Append(card_expiry_mm).Append("\n");
            sb.Append("  card_expiry_yy: ").Append(card_expiry_yy).Append("\n");
            sb.Append("  card_type: ").Append(card_type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PARRequest);
        }

        /// <summary>
        /// Returns true if PARRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PARRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PARRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.card_number == input.card_number ||
                    (this.card_number != null &&
                    this.card_number.Equals(input.card_number))
                ) && 
                (
                    this.card_cvv == input.card_cvv ||
                    (this.card_cvv != null &&
                    this.card_cvv.Equals(input.card_cvv))
                ) && 
                (
                    this.card_expiry_mm == input.card_expiry_mm ||
                    (this.card_expiry_mm != null &&
                    this.card_expiry_mm.Equals(input.card_expiry_mm))
                ) && 
                (
                    this.card_expiry_yy == input.card_expiry_yy ||
                    (this.card_expiry_yy != null &&
                    this.card_expiry_yy.Equals(input.card_expiry_yy))
                ) && 
                (
                    this.card_type == input.card_type ||
                    this.card_type.Equals(input.card_type)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringcard_number) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringcard_number);
            if (deserializedJsonString.ContainsKey("card_number")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.card_number != null)
                {
                    hashCode = (hashCode * 59) + this.card_number.GetHashCode();
                }
                if (this.card_cvv != null)
                {
                    hashCode = (hashCode * 59) + this.card_cvv.GetHashCode();
                }
                if (this.card_expiry_mm != null)
                {
                    hashCode = (hashCode * 59) + this.card_expiry_mm.GetHashCode();
                }
                if (this.card_expiry_yy != null)
                {
                    hashCode = (hashCode * 59) + this.card_expiry_yy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.card_type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
