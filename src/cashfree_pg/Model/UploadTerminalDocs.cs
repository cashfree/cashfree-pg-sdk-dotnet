/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Request body to upload terminal documents.
    /// </summary>
    [DataContract(Name = "UploadTerminalDocs")]
    public class UploadTerminalDocs : IEquatable<UploadTerminalDocs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadTerminalDocs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadTerminalDocs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadTerminalDocs" /> class.
        /// </summary>
        /// <param name="docType">Mention the document type you are uploading. Possible values - ADDRESSPROOF, PHOTOGRAPH. (required).</param>
        /// <param name="docValue">Enter the display name of the uploaded file. (required).</param>
        /// <param name="file">Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size. (required).</param>
        public UploadTerminalDocs(string docType = default(string), string docValue = default(string), string file = default(string))
        {
            // to ensure "docType" is required (not null)
            if (docType == null)
            {
                throw new ArgumentNullException("docType is a required property for UploadTerminalDocs and cannot be null");
            }
            this.doc_type = docType;
            // to ensure "docValue" is required (not null)
            if (docValue == null)
            {
                throw new ArgumentNullException("docValue is a required property for UploadTerminalDocs and cannot be null");
            }
            this.doc_value = docValue;
            // to ensure "file" is required (not null)
            if (file == null)
            {
                throw new ArgumentNullException("file is a required property for UploadTerminalDocs and cannot be null");
            }
            this.file = file;
        }

        /// <summary>
        /// Mention the document type you are uploading. Possible values - ADDRESSPROOF, PHOTOGRAPH.
        /// </summary>
        /// <value>Mention the document type you are uploading. Possible values - ADDRESSPROOF, PHOTOGRAPH.</value>
        [DataMember(Name = "doc_type", IsRequired = true, EmitDefaultValue = true)]
        public string doc_type { get; set; }

        /// <summary>
        /// Enter the display name of the uploaded file.
        /// </summary>
        /// <value>Enter the display name of the uploaded file.</value>
        [DataMember(Name = "doc_value", IsRequired = true, EmitDefaultValue = true)]
        public string doc_value { get; set; }

        /// <summary>
        /// Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.
        /// </summary>
        /// <value>Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.</value>
        [DataMember(Name = "file", IsRequired = true, EmitDefaultValue = true)]
        public string file { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadTerminalDocs {\n");
            sb.Append("  doc_type: ").Append(doc_type).Append("\n");
            sb.Append("  doc_value: ").Append(doc_value).Append("\n");
            sb.Append("  file: ").Append(file).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadTerminalDocs);
        }

        /// <summary>
        /// Returns true if UploadTerminalDocs instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadTerminalDocs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadTerminalDocs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.doc_type == input.doc_type ||
                    (this.doc_type != null &&
                    this.doc_type.Equals(input.doc_type))
                ) && 
                (
                    this.doc_value == input.doc_value ||
                    (this.doc_value != null &&
                    this.doc_value.Equals(input.doc_value))
                ) && 
                (
                    this.file == input.file ||
                    (this.file != null &&
                    this.file.Equals(input.file))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringdoc_type) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringdoc_type);
            if (deserializedJsonString.ContainsKey("doc_type")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.doc_type != null)
                {
                    hashCode = (hashCode * 59) + this.doc_type.GetHashCode();
                }
                if (this.doc_value != null)
                {
                    hashCode = (hashCode * 59) + this.doc_value.GetHashCode();
                }
                if (this.file != null)
                {
                    hashCode = (hashCode * 59) + this.file.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
