/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// create refund request object
    /// </summary>
    [DataContract(Name = "OrderCreateRefundRequest")]
    public class OrderCreateRefundRequest : IEquatable<OrderCreateRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// Speed at which the refund is processed. It&#39;s an optional field with default being STANDARD
        /// </summary>
        /// <value>Speed at which the refund is processed. It&#39;s an optional field with default being STANDARD</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefundSpeedEnum
        {
            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 1,

            /// <summary>
            /// Enum INSTANT for value: INSTANT
            /// </summary>
            [EnumMember(Value = "INSTANT")]
            INSTANT = 2
        }


        /// <summary>
        /// Speed at which the refund is processed. It&#39;s an optional field with default being STANDARD
        /// </summary>
        /// <value>Speed at which the refund is processed. It&#39;s an optional field with default being STANDARD</value>
        [DataMember(Name = "refund_speed", EmitDefaultValue = false)]
        public RefundSpeedEnum? refund_speed { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderCreateRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateRefundRequest" /> class.
        /// </summary>
        /// <param name="refundAmount">Amount to be refunded. Should be lesser than or equal to the transaction amount. (Decimals allowed) (required).</param>
        /// <param name="refundId">An unique ID to associate the refund with. Provie alphanumeric values (required).</param>
        /// <param name="refundNote">A refund note for your reference..</param>
        /// <param name="refundSpeed">Speed at which the refund is processed. It&#39;s an optional field with default being STANDARD.</param>
        /// <param name="refundSplits">refundSplits.</param>
        public OrderCreateRefundRequest(double refundAmount = default(double), string refundId = default(string), string refundNote = default(string), RefundSpeedEnum? refundSpeed = default(RefundSpeedEnum?), List<VendorSplit> refundSplits = default(List<VendorSplit>))
        {
            this.refund_amount = refundAmount;
            // to ensure "refundId" is required (not null)
            if (refundId == null)
            {
                throw new ArgumentNullException("refundId is a required property for OrderCreateRefundRequest and cannot be null");
            }
            this.refund_id = refundId;
            this.refund_note = refundNote;
            this.refund_speed = refundSpeed;
            this.refund_splits = refundSplits;
        }

        /// <summary>
        /// Amount to be refunded. Should be lesser than or equal to the transaction amount. (Decimals allowed)
        /// </summary>
        /// <value>Amount to be refunded. Should be lesser than or equal to the transaction amount. (Decimals allowed)</value>
        [DataMember(Name = "refund_amount", IsRequired = true, EmitDefaultValue = true)]
        public double refund_amount { get; set; }

        /// <summary>
        /// An unique ID to associate the refund with. Provie alphanumeric values
        /// </summary>
        /// <value>An unique ID to associate the refund with. Provie alphanumeric values</value>
        [DataMember(Name = "refund_id", IsRequired = true, EmitDefaultValue = true)]
        public string refund_id { get; set; }

        /// <summary>
        /// A refund note for your reference.
        /// </summary>
        /// <value>A refund note for your reference.</value>
        [DataMember(Name = "refund_note", EmitDefaultValue = false)]
        public string refund_note { get; set; }

        /// <summary>
        /// Gets or Sets refund_splits
        /// </summary>
        [DataMember(Name = "refund_splits", EmitDefaultValue = false)]
        public List<VendorSplit> refund_splits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCreateRefundRequest {\n");
            sb.Append("  refund_amount: ").Append(refund_amount).Append("\n");
            sb.Append("  refund_id: ").Append(refund_id).Append("\n");
            sb.Append("  refund_note: ").Append(refund_note).Append("\n");
            sb.Append("  refund_speed: ").Append(refund_speed).Append("\n");
            sb.Append("  refund_splits: ").Append(refund_splits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderCreateRefundRequest);
        }

        /// <summary>
        /// Returns true if OrderCreateRefundRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderCreateRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCreateRefundRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.refund_amount == input.refund_amount ||
                    this.refund_amount.Equals(input.refund_amount)
                ) && 
                (
                    this.refund_id == input.refund_id ||
                    (this.refund_id != null &&
                    this.refund_id.Equals(input.refund_id))
                ) && 
                (
                    this.refund_note == input.refund_note ||
                    (this.refund_note != null &&
                    this.refund_note.Equals(input.refund_note))
                ) && 
                (
                    this.refund_speed == input.refund_speed ||
                    this.refund_speed.Equals(input.refund_speed)
                ) && 
                (
                    this.refund_splits == input.refund_splits ||
                    this.refund_splits != null &&
                    input.refund_splits != null &&
                    this.refund_splits.SequenceEqual(input.refund_splits)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringrefund_amount) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringrefund_amount);
            if (deserializedJsonString.ContainsKey("refund_amount")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.refund_amount.GetHashCode();
                if (this.refund_id != null)
                {
                    hashCode = (hashCode * 59) + this.refund_id.GetHashCode();
                }
                if (this.refund_note != null)
                {
                    hashCode = (hashCode * 59) + this.refund_note.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.refund_speed.GetHashCode();
                if (this.refund_splits != null)
                {
                    hashCode = (hashCode * 59) + this.refund_splits.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // refund_id (string) maxLength
            if (this.refund_id != null && this.refund_id.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for refund_id, length must be less than 40.", new [] { "refund_id" });
            }

            // refund_id (string) minLength
            if (this.refund_id != null && this.refund_id.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for refund_id, length must be greater than 3.", new [] { "refund_id" });
            }

            // refund_note (string) maxLength
            if (this.refund_note != null && this.refund_note.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for refund_note, length must be less than 100.", new [] { "refund_note" });
            }

            // refund_note (string) minLength
            if (this.refund_note != null && this.refund_note.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for refund_note, length must be greater than 3.", new [] { "refund_note" });
            }

            yield break;
        }
    }

}
