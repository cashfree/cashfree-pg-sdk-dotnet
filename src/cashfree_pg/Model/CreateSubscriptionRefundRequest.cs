/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Request body to create a subscription refund.
    /// </summary>
    [DataContract(Name = "CreateSubscriptionRefundRequest")]
    public class CreateSubscriptionRefundRequest : IEquatable<CreateSubscriptionRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSubscriptionRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionRefundRequest" /> class.
        /// </summary>
        /// <param name="subscriptionId">A unique ID passed by merchant for identifying the subscription. (required).</param>
        /// <param name="paymentId">A unique ID passed by merchant for identifying the transaction..</param>
        /// <param name="cfPaymentId">Cashfree subscription payment reference number..</param>
        /// <param name="refundId">A unique ID passed by merchant for identifying the refund. (required).</param>
        /// <param name="refundAmount">The amount to be refunded. Can be partial or full amount of the payment. (required).</param>
        /// <param name="refundNote">Refund note..</param>
        /// <param name="refundSpeed">Refund speed. Can be INSTANT or STANDARD. UPI supports only STANDARD refunds, Enach and Pnach supports only INSTANT refunds..</param>
        public CreateSubscriptionRefundRequest(string subscriptionId = default(string), string? paymentId = default(string?), string? cfPaymentId = default(string?), string refundId = default(string), decimal refundAmount = default(decimal), string? refundNote = default(string?), string? refundSpeed = default(string?))
        {
            // to ensure "subscriptionId" is required (not null)
            if (subscriptionId == null)
            {
                throw new ArgumentNullException("subscriptionId is a required property for CreateSubscriptionRefundRequest and cannot be null");
            }
            this.subscription_id = subscriptionId;
            // to ensure "refundId" is required (not null)
            if (refundId == null)
            {
                throw new ArgumentNullException("refundId is a required property for CreateSubscriptionRefundRequest and cannot be null");
            }
            this.refund_id = refundId;
            this.refund_amount = refundAmount;
            this.payment_id = paymentId;
            this.cf_payment_id = cfPaymentId;
            this.refund_note = refundNote;
            this.refund_speed = refundSpeed;
        }

        /// <summary>
        /// A unique ID passed by merchant for identifying the subscription.
        /// </summary>
        /// <value>A unique ID passed by merchant for identifying the subscription.</value>
        [DataMember(Name = "subscription_id", IsRequired = true, EmitDefaultValue = true)]
        public string subscription_id { get; set; }

        /// <summary>
        /// A unique ID passed by merchant for identifying the transaction.
        /// </summary>
        /// <value>A unique ID passed by merchant for identifying the transaction.</value>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string? payment_id { get; set; }

        /// <summary>
        /// Cashfree subscription payment reference number.
        /// </summary>
        /// <value>Cashfree subscription payment reference number.</value>
        [DataMember(Name = "cf_payment_id", EmitDefaultValue = false)]
        public string? cf_payment_id { get; set; }

        /// <summary>
        /// A unique ID passed by merchant for identifying the refund.
        /// </summary>
        /// <value>A unique ID passed by merchant for identifying the refund.</value>
        [DataMember(Name = "refund_id", IsRequired = true, EmitDefaultValue = true)]
        public string refund_id { get; set; }

        /// <summary>
        /// The amount to be refunded. Can be partial or full amount of the payment.
        /// </summary>
        /// <value>The amount to be refunded. Can be partial or full amount of the payment.</value>
        [DataMember(Name = "refund_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal refund_amount { get; set; }

        /// <summary>
        /// Refund note.
        /// </summary>
        /// <value>Refund note.</value>
        [DataMember(Name = "refund_note", EmitDefaultValue = false)]
        public string? refund_note { get; set; }

        /// <summary>
        /// Refund speed. Can be INSTANT or STANDARD. UPI supports only STANDARD refunds, Enach and Pnach supports only INSTANT refunds.
        /// </summary>
        /// <value>Refund speed. Can be INSTANT or STANDARD. UPI supports only STANDARD refunds, Enach and Pnach supports only INSTANT refunds.</value>
        [DataMember(Name = "refund_speed", EmitDefaultValue = false)]
        public string? refund_speed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSubscriptionRefundRequest {\n");
            sb.Append("  subscription_id: ").Append(subscription_id).Append("\n");
            sb.Append("  payment_id: ").Append(payment_id).Append("\n");
            sb.Append("  cf_payment_id: ").Append(cf_payment_id).Append("\n");
            sb.Append("  refund_id: ").Append(refund_id).Append("\n");
            sb.Append("  refund_amount: ").Append(refund_amount).Append("\n");
            sb.Append("  refund_note: ").Append(refund_note).Append("\n");
            sb.Append("  refund_speed: ").Append(refund_speed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubscriptionRefundRequest);
        }

        /// <summary>
        /// Returns true if CreateSubscriptionRefundRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubscriptionRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscriptionRefundRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.subscription_id == input.subscription_id ||
                    (this.subscription_id != null &&
                    this.subscription_id.Equals(input.subscription_id))
                ) && 
                (
                    this.payment_id == input.payment_id ||
                    (this.payment_id != null &&
                    this.payment_id.Equals(input.payment_id))
                ) && 
                (
                    this.cf_payment_id == input.cf_payment_id ||
                    (this.cf_payment_id != null &&
                    this.cf_payment_id.Equals(input.cf_payment_id))
                ) && 
                (
                    this.refund_id == input.refund_id ||
                    (this.refund_id != null &&
                    this.refund_id.Equals(input.refund_id))
                ) && 
                (
                    this.refund_amount == input.refund_amount ||
                    this.refund_amount.Equals(input.refund_amount)
                ) && 
                (
                    this.refund_note == input.refund_note ||
                    (this.refund_note != null &&
                    this.refund_note.Equals(input.refund_note))
                ) && 
                (
                    this.refund_speed == input.refund_speed ||
                    (this.refund_speed != null &&
                    this.refund_speed.Equals(input.refund_speed))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringsubscription_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringsubscription_id);
            if (deserializedJsonString.ContainsKey("subscription_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.subscription_id != null)
                {
                    hashCode = (hashCode * 59) + this.subscription_id.GetHashCode();
                }
                if (this.payment_id != null)
                {
                    hashCode = (hashCode * 59) + this.payment_id.GetHashCode();
                }
                if (this.cf_payment_id != null)
                {
                    hashCode = (hashCode * 59) + this.cf_payment_id.GetHashCode();
                }
                if (this.refund_id != null)
                {
                    hashCode = (hashCode * 59) + this.refund_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.refund_amount.GetHashCode();
                if (this.refund_note != null)
                {
                    hashCode = (hashCode * 59) + this.refund_note.GetHashCode();
                }
                if (this.refund_speed != null)
                {
                    hashCode = (hashCode * 59) + this.refund_speed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
