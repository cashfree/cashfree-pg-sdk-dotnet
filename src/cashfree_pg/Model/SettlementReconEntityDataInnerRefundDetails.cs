/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// SettlementReconEntityDataInnerRefundDetails
    /// </summary>
    [DataContract(Name = "SettlementReconEntity_data_inner_refund_details")]
    public class SettlementReconEntityDataInnerRefundDetails : IEquatable<SettlementReconEntityDataInnerRefundDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementReconEntityDataInnerRefundDetails" /> class.
        /// </summary>
        /// <param name="refundProcessedAt">Date and time when the refund was processed..</param>
        /// <param name="refundArn">The bank reference number for refund..</param>
        /// <param name="refundNote">A refund note for your reference..</param>
        /// <param name="refundId">An unique ID associated with the refund..</param>
        public SettlementReconEntityDataInnerRefundDetails(string? refundProcessedAt = default(string?), string? refundArn = default(string?), string? refundNote = default(string?), string? refundId = default(string?))
        {
            this.refund_processed_at = refundProcessedAt;
            this.refund_arn = refundArn;
            this.refund_note = refundNote;
            this.refund_id = refundId;
        }

        /// <summary>
        /// Date and time when the refund was processed.
        /// </summary>
        /// <value>Date and time when the refund was processed.</value>
        [DataMember(Name = "refund_processed_at", EmitDefaultValue = false)]
        public string? refund_processed_at { get; set; }

        /// <summary>
        /// The bank reference number for refund.
        /// </summary>
        /// <value>The bank reference number for refund.</value>
        [DataMember(Name = "refund_arn", EmitDefaultValue = false)]
        public string? refund_arn { get; set; }

        /// <summary>
        /// A refund note for your reference.
        /// </summary>
        /// <value>A refund note for your reference.</value>
        [DataMember(Name = "refund_note", EmitDefaultValue = false)]
        public string? refund_note { get; set; }

        /// <summary>
        /// An unique ID associated with the refund.
        /// </summary>
        /// <value>An unique ID associated with the refund.</value>
        [DataMember(Name = "refund_id", EmitDefaultValue = false)]
        public string? refund_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementReconEntityDataInnerRefundDetails {\n");
            sb.Append("  refund_processed_at: ").Append(refund_processed_at).Append("\n");
            sb.Append("  refund_arn: ").Append(refund_arn).Append("\n");
            sb.Append("  refund_note: ").Append(refund_note).Append("\n");
            sb.Append("  refund_id: ").Append(refund_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementReconEntityDataInnerRefundDetails);
        }

        /// <summary>
        /// Returns true if SettlementReconEntityDataInnerRefundDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementReconEntityDataInnerRefundDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementReconEntityDataInnerRefundDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.refund_processed_at == input.refund_processed_at ||
                    (this.refund_processed_at != null &&
                    this.refund_processed_at.Equals(input.refund_processed_at))
                ) && 
                (
                    this.refund_arn == input.refund_arn ||
                    (this.refund_arn != null &&
                    this.refund_arn.Equals(input.refund_arn))
                ) && 
                (
                    this.refund_note == input.refund_note ||
                    (this.refund_note != null &&
                    this.refund_note.Equals(input.refund_note))
                ) && 
                (
                    this.refund_id == input.refund_id ||
                    (this.refund_id != null &&
                    this.refund_id.Equals(input.refund_id))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringrefund_processed_at) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringrefund_processed_at);
            if (deserializedJsonString.ContainsKey("refund_processed_at")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.refund_processed_at != null)
                {
                    hashCode = (hashCode * 59) + this.refund_processed_at.GetHashCode();
                }
                if (this.refund_arn != null)
                {
                    hashCode = (hashCode * 59) + this.refund_arn.GetHashCode();
                }
                if (this.refund_note != null)
                {
                    hashCode = (hashCode * 59) + this.refund_note.GetHashCode();
                }
                if (this.refund_id != null)
                {
                    hashCode = (hashCode * 59) + this.refund_id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
