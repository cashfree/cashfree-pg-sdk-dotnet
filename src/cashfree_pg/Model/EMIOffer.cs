/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// EMIOffer
    /// </summary>
    [DataContract(Name = "EMI_Offer")]
    public class EMIOffer : IEquatable<EMIOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EMIOffer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EMIOffer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EMIOffer" /> class.
        /// </summary>
        /// <param name="type">Type of emi offer. Possible values are &#x60;credit_card_emi&#x60;, &#x60;debit_card_emi&#x60;, &#x60;cardless_emi&#x60; (required).</param>
        /// <param name="issuer">Bank Name (required).</param>
        /// <param name="tenures">tenures (required).</param>
        public EMIOffer(string type = default(string), string issuer = default(string), List<int> tenures = default(List<int>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for EMIOffer and cannot be null");
            }
            this.type = type;
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new ArgumentNullException("issuer is a required property for EMIOffer and cannot be null");
            }
            this.issuer = issuer;
            // to ensure "tenures" is required (not null)
            if (tenures == null)
            {
                throw new ArgumentNullException("tenures is a required property for EMIOffer and cannot be null");
            }
            this.tenures = tenures;
        }

        /// <summary>
        /// Type of emi offer. Possible values are &#x60;credit_card_emi&#x60;, &#x60;debit_card_emi&#x60;, &#x60;cardless_emi&#x60;
        /// </summary>
        /// <value>Type of emi offer. Possible values are &#x60;credit_card_emi&#x60;, &#x60;debit_card_emi&#x60;, &#x60;cardless_emi&#x60;</value>
        /// <example>cardless_emi</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string type { get; set; }

        /// <summary>
        /// Bank Name
        /// </summary>
        /// <value>Bank Name</value>
        /// <example>hdfc bank</example>
        [DataMember(Name = "issuer", IsRequired = true, EmitDefaultValue = true)]
        public string issuer { get; set; }

        /// <summary>
        /// Gets or Sets tenures
        /// </summary>
        [DataMember(Name = "tenures", IsRequired = true, EmitDefaultValue = true)]
        public List<int> tenures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMIOffer {\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  issuer: ").Append(issuer).Append("\n");
            sb.Append("  tenures: ").Append(tenures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EMIOffer);
        }

        /// <summary>
        /// Returns true if EMIOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of EMIOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EMIOffer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.issuer == input.issuer ||
                    (this.issuer != null &&
                    this.issuer.Equals(input.issuer))
                ) && 
                (
                    this.tenures == input.tenures ||
                    this.tenures != null &&
                    input.tenures != null &&
                    this.tenures.SequenceEqual(input.tenures)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringtype) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringtype);
            if (deserializedJsonString.ContainsKey("type")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.type != null)
                {
                    hashCode = (hashCode * 59) + this.type.GetHashCode();
                }
                if (this.issuer != null)
                {
                    hashCode = (hashCode * 59) + this.issuer.GetHashCode();
                }
                if (this.tenures != null)
                {
                    hashCode = (hashCode * 59) + this.tenures.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // type (string) maxLength
            if (this.type != null && this.type.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for type, length must be less than 100.", new [] { "type" });
            }

            // type (string) minLength
            if (this.type != null && this.type.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for type, length must be greater than 3.", new [] { "type" });
            }

            // issuer (string) maxLength
            if (this.issuer != null && this.issuer.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for issuer, length must be less than 100.", new [] { "issuer" });
            }

            // issuer (string) minLength
            if (this.issuer != null && this.issuer.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for issuer, length must be greater than 3.", new [] { "issuer" });
            }

            yield break;
        }
    }

}
