/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// TransferDetails
    /// </summary>
    [DataContract(Name = "TransferDetails")]
    public class TransferDetails : IEquatable<TransferDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferDetails" /> class.
        /// </summary>
        /// <param name="vendorId">vendorId.</param>
        /// <param name="transferFrom">transferFrom.</param>
        /// <param name="transferType">transferType.</param>
        /// <param name="transferAmount">transferAmount.</param>
        /// <param name="remark">remark.</param>
        /// <param name="tags">tags.</param>
        public TransferDetails(string? vendorId = default(string?), string? transferFrom = default(string?), string? transferType = default(string?), decimal? transferAmount = default(decimal?), string? remark = default(string?), List<TransferDetailsTagsInner>? tags = default(List<TransferDetailsTagsInner>?))
        {
            this.vendor_id = vendorId;
            this.transfer_from = transferFrom;
            this.transfer_type = transferType;
            this.transfer_amount = transferAmount;
            this.remark = remark;
            this.tags = tags;
        }

        /// <summary>
        /// Gets or Sets vendor_id
        /// </summary>
        [DataMember(Name = "vendor_id", EmitDefaultValue = false)]
        public string? vendor_id { get; set; }

        /// <summary>
        /// Gets or Sets transfer_from
        /// </summary>
        [DataMember(Name = "transfer_from", EmitDefaultValue = false)]
        public string? transfer_from { get; set; }

        /// <summary>
        /// Gets or Sets transfer_type
        /// </summary>
        [DataMember(Name = "transfer_type", EmitDefaultValue = false)]
        public string? transfer_type { get; set; }

        /// <summary>
        /// Gets or Sets transfer_amount
        /// </summary>
        [DataMember(Name = "transfer_amount", EmitDefaultValue = false)]
        public decimal? transfer_amount { get; set; }

        /// <summary>
        /// Gets or Sets remark
        /// </summary>
        [DataMember(Name = "remark", EmitDefaultValue = false)]
        public string? remark { get; set; }

        /// <summary>
        /// Gets or Sets tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<TransferDetailsTagsInner>? tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferDetails {\n");
            sb.Append("  vendor_id: ").Append(vendor_id).Append("\n");
            sb.Append("  transfer_from: ").Append(transfer_from).Append("\n");
            sb.Append("  transfer_type: ").Append(transfer_type).Append("\n");
            sb.Append("  transfer_amount: ").Append(transfer_amount).Append("\n");
            sb.Append("  remark: ").Append(remark).Append("\n");
            sb.Append("  tags: ").Append(tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferDetails);
        }

        /// <summary>
        /// Returns true if TransferDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.vendor_id == input.vendor_id ||
                    (this.vendor_id != null &&
                    this.vendor_id.Equals(input.vendor_id))
                ) && 
                (
                    this.transfer_from == input.transfer_from ||
                    (this.transfer_from != null &&
                    this.transfer_from.Equals(input.transfer_from))
                ) && 
                (
                    this.transfer_type == input.transfer_type ||
                    (this.transfer_type != null &&
                    this.transfer_type.Equals(input.transfer_type))
                ) && 
                (
                    this.transfer_amount == input.transfer_amount ||
                    this.transfer_amount.Equals(input.transfer_amount)
                ) && 
                (
                    this.remark == input.remark ||
                    (this.remark != null &&
                    this.remark.Equals(input.remark))
                ) && 
                (
                    this.tags == input.tags ||
                    this.tags != null &&
                    input.tags != null &&
                    this.tags.SequenceEqual(input.tags)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringvendor_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringvendor_id);
            if (deserializedJsonString.ContainsKey("vendor_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.vendor_id != null)
                {
                    hashCode = (hashCode * 59) + this.vendor_id.GetHashCode();
                }
                if (this.transfer_from != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_from.GetHashCode();
                }
                if (this.transfer_type != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.transfer_amount.GetHashCode();
                if (this.remark != null)
                {
                    hashCode = (hashCode * 59) + this.remark.GetHashCode();
                }
                if (this.tags != null)
                {
                    hashCode = (hashCode * 59) + this.tags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
