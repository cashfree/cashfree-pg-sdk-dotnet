/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// SettlementReconEntityDataInnerPaymentDetails
    /// </summary>
    [DataContract(Name = "SettlementReconEntity_data_inner_payment_details")]
    public class SettlementReconEntityDataInnerPaymentDetails : IEquatable<SettlementReconEntityDataInnerPaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementReconEntityDataInnerPaymentDetails" /> class.
        /// </summary>
        /// <param name="paymentAmount">Payment amount captured..</param>
        /// <param name="paymentCurrency">Payment Curreny type - INR..</param>
        /// <param name="bankReference">Unique transaction reference number of the payment..</param>
        /// <param name="paymentTime">Date and time when the payment was initiated..</param>
        /// <param name="paymentMode">Mode of the payment..</param>
        /// <param name="paymentServiceCharge">Service charge applicable for the payment..</param>
        /// <param name="paymentServiceTax">Service tax applicable on the payment..</param>
        /// <param name="cfPaymentId">Cashfree Payments unique ID to identify a payment..</param>
        /// <param name="status">Status of the Payment..</param>
        /// <param name="forexConversionHandlingCharge">Forex Conversion Service Charge..</param>
        /// <param name="forexConversionHandlingTax">Forex Conversion Service Tax..</param>
        /// <param name="chargesCurrency">Forex Charges Curreny type - INR..</param>
        public SettlementReconEntityDataInnerPaymentDetails(decimal? paymentAmount = default(decimal?), string? paymentCurrency = default(string?), string? bankReference = default(string?), string? paymentTime = default(string?), string? paymentMode = default(string?), decimal? paymentServiceCharge = default(decimal?), decimal? paymentServiceTax = default(decimal?), string? cfPaymentId = default(string?), string? status = default(string?), string? forexConversionHandlingCharge = default(string?), string? forexConversionHandlingTax = default(string?), string? chargesCurrency = default(string?))
        {
            this.payment_amount = paymentAmount;
            this.payment_currency = paymentCurrency;
            this.bank_reference = bankReference;
            this.payment_time = paymentTime;
            this.payment_mode = paymentMode;
            this.payment_service_charge = paymentServiceCharge;
            this.payment_service_tax = paymentServiceTax;
            this.cf_payment_id = cfPaymentId;
            this.status = status;
            this.forex_conversion_handling_charge = forexConversionHandlingCharge;
            this.forex_conversion_handling_tax = forexConversionHandlingTax;
            this.charges_currency = chargesCurrency;
        }

        /// <summary>
        /// Payment amount captured.
        /// </summary>
        /// <value>Payment amount captured.</value>
        [DataMember(Name = "payment_amount", EmitDefaultValue = false)]
        public decimal? payment_amount { get; set; }

        /// <summary>
        /// Payment Curreny type - INR.
        /// </summary>
        /// <value>Payment Curreny type - INR.</value>
        [DataMember(Name = "payment_currency", EmitDefaultValue = false)]
        public string? payment_currency { get; set; }

        /// <summary>
        /// Unique transaction reference number of the payment.
        /// </summary>
        /// <value>Unique transaction reference number of the payment.</value>
        [DataMember(Name = "bank_reference", EmitDefaultValue = false)]
        public string? bank_reference { get; set; }

        /// <summary>
        /// Date and time when the payment was initiated.
        /// </summary>
        /// <value>Date and time when the payment was initiated.</value>
        [DataMember(Name = "payment_time", EmitDefaultValue = false)]
        public string? payment_time { get; set; }

        /// <summary>
        /// Mode of the payment.
        /// </summary>
        /// <value>Mode of the payment.</value>
        [DataMember(Name = "payment_mode", EmitDefaultValue = false)]
        public string? payment_mode { get; set; }

        /// <summary>
        /// Service charge applicable for the payment.
        /// </summary>
        /// <value>Service charge applicable for the payment.</value>
        [DataMember(Name = "payment_service_charge", EmitDefaultValue = false)]
        public decimal? payment_service_charge { get; set; }

        /// <summary>
        /// Service tax applicable on the payment.
        /// </summary>
        /// <value>Service tax applicable on the payment.</value>
        [DataMember(Name = "payment_service_tax", EmitDefaultValue = false)]
        public decimal? payment_service_tax { get; set; }

        /// <summary>
        /// Cashfree Payments unique ID to identify a payment.
        /// </summary>
        /// <value>Cashfree Payments unique ID to identify a payment.</value>
        [DataMember(Name = "cf_payment_id", EmitDefaultValue = false)]
        public string? cf_payment_id { get; set; }

        /// <summary>
        /// Status of the Payment.
        /// </summary>
        /// <value>Status of the Payment.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string? status { get; set; }

        /// <summary>
        /// Forex Conversion Service Charge.
        /// </summary>
        /// <value>Forex Conversion Service Charge.</value>
        [DataMember(Name = "forex_conversion_handling_charge", EmitDefaultValue = false)]
        public string? forex_conversion_handling_charge { get; set; }

        /// <summary>
        /// Forex Conversion Service Tax.
        /// </summary>
        /// <value>Forex Conversion Service Tax.</value>
        [DataMember(Name = "forex_conversion_handling_tax", EmitDefaultValue = false)]
        public string? forex_conversion_handling_tax { get; set; }

        /// <summary>
        /// Forex Charges Curreny type - INR.
        /// </summary>
        /// <value>Forex Charges Curreny type - INR.</value>
        [DataMember(Name = "charges_currency", EmitDefaultValue = false)]
        public string? charges_currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementReconEntityDataInnerPaymentDetails {\n");
            sb.Append("  payment_amount: ").Append(payment_amount).Append("\n");
            sb.Append("  payment_currency: ").Append(payment_currency).Append("\n");
            sb.Append("  bank_reference: ").Append(bank_reference).Append("\n");
            sb.Append("  payment_time: ").Append(payment_time).Append("\n");
            sb.Append("  payment_mode: ").Append(payment_mode).Append("\n");
            sb.Append("  payment_service_charge: ").Append(payment_service_charge).Append("\n");
            sb.Append("  payment_service_tax: ").Append(payment_service_tax).Append("\n");
            sb.Append("  cf_payment_id: ").Append(cf_payment_id).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  forex_conversion_handling_charge: ").Append(forex_conversion_handling_charge).Append("\n");
            sb.Append("  forex_conversion_handling_tax: ").Append(forex_conversion_handling_tax).Append("\n");
            sb.Append("  charges_currency: ").Append(charges_currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementReconEntityDataInnerPaymentDetails);
        }

        /// <summary>
        /// Returns true if SettlementReconEntityDataInnerPaymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementReconEntityDataInnerPaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementReconEntityDataInnerPaymentDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.payment_amount == input.payment_amount ||
                    this.payment_amount.Equals(input.payment_amount)
                ) && 
                (
                    this.payment_currency == input.payment_currency ||
                    (this.payment_currency != null &&
                    this.payment_currency.Equals(input.payment_currency))
                ) && 
                (
                    this.bank_reference == input.bank_reference ||
                    (this.bank_reference != null &&
                    this.bank_reference.Equals(input.bank_reference))
                ) && 
                (
                    this.payment_time == input.payment_time ||
                    (this.payment_time != null &&
                    this.payment_time.Equals(input.payment_time))
                ) && 
                (
                    this.payment_mode == input.payment_mode ||
                    (this.payment_mode != null &&
                    this.payment_mode.Equals(input.payment_mode))
                ) && 
                (
                    this.payment_service_charge == input.payment_service_charge ||
                    this.payment_service_charge.Equals(input.payment_service_charge)
                ) && 
                (
                    this.payment_service_tax == input.payment_service_tax ||
                    this.payment_service_tax.Equals(input.payment_service_tax)
                ) && 
                (
                    this.cf_payment_id == input.cf_payment_id ||
                    (this.cf_payment_id != null &&
                    this.cf_payment_id.Equals(input.cf_payment_id))
                ) && 
                (
                    this.status == input.status ||
                    (this.status != null &&
                    this.status.Equals(input.status))
                ) && 
                (
                    this.forex_conversion_handling_charge == input.forex_conversion_handling_charge ||
                    (this.forex_conversion_handling_charge != null &&
                    this.forex_conversion_handling_charge.Equals(input.forex_conversion_handling_charge))
                ) && 
                (
                    this.forex_conversion_handling_tax == input.forex_conversion_handling_tax ||
                    (this.forex_conversion_handling_tax != null &&
                    this.forex_conversion_handling_tax.Equals(input.forex_conversion_handling_tax))
                ) && 
                (
                    this.charges_currency == input.charges_currency ||
                    (this.charges_currency != null &&
                    this.charges_currency.Equals(input.charges_currency))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringpayment_amount) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringpayment_amount);
            if (deserializedJsonString.ContainsKey("payment_amount")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.payment_amount.GetHashCode();
                if (this.payment_currency != null)
                {
                    hashCode = (hashCode * 59) + this.payment_currency.GetHashCode();
                }
                if (this.bank_reference != null)
                {
                    hashCode = (hashCode * 59) + this.bank_reference.GetHashCode();
                }
                if (this.payment_time != null)
                {
                    hashCode = (hashCode * 59) + this.payment_time.GetHashCode();
                }
                if (this.payment_mode != null)
                {
                    hashCode = (hashCode * 59) + this.payment_mode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.payment_service_charge.GetHashCode();
                hashCode = (hashCode * 59) + this.payment_service_tax.GetHashCode();
                if (this.cf_payment_id != null)
                {
                    hashCode = (hashCode * 59) + this.cf_payment_id.GetHashCode();
                }
                if (this.status != null)
                {
                    hashCode = (hashCode * 59) + this.status.GetHashCode();
                }
                if (this.forex_conversion_handling_charge != null)
                {
                    hashCode = (hashCode * 59) + this.forex_conversion_handling_charge.GetHashCode();
                }
                if (this.forex_conversion_handling_tax != null)
                {
                    hashCode = (hashCode * 59) + this.forex_conversion_handling_tax.GetHashCode();
                }
                if (this.charges_currency != null)
                {
                    hashCode = (hashCode * 59) + this.charges_currency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
