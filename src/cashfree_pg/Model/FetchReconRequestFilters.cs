/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// FetchReconRequestFilters
    /// </summary>
    [DataContract(Name = "FetchReconRequest_filters")]
    public class FetchReconRequestFilters : IEquatable<FetchReconRequestFilters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchReconRequestFilters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FetchReconRequestFilters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchReconRequestFilters" /> class.
        /// </summary>
        /// <param name="startDate">Specify the start date from when you want the settlement reconciliation details. (required).</param>
        /// <param name="endDate">Specify the end date till when you want the settlement reconciliation details. (required).</param>
        public FetchReconRequestFilters(string startDate = default(string), string endDate = default(string))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new ArgumentNullException("startDate is a required property for FetchReconRequestFilters and cannot be null");
            }
            this.start_date = startDate;
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new ArgumentNullException("endDate is a required property for FetchReconRequestFilters and cannot be null");
            }
            this.end_date = endDate;
        }

        /// <summary>
        /// Specify the start date from when you want the settlement reconciliation details.
        /// </summary>
        /// <value>Specify the start date from when you want the settlement reconciliation details.</value>
        [DataMember(Name = "start_date", IsRequired = true, EmitDefaultValue = true)]
        public string start_date { get; set; }

        /// <summary>
        /// Specify the end date till when you want the settlement reconciliation details.
        /// </summary>
        /// <value>Specify the end date till when you want the settlement reconciliation details.</value>
        [DataMember(Name = "end_date", IsRequired = true, EmitDefaultValue = true)]
        public string end_date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FetchReconRequestFilters {\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FetchReconRequestFilters);
        }

        /// <summary>
        /// Returns true if FetchReconRequestFilters instances are equal
        /// </summary>
        /// <param name="input">Instance of FetchReconRequestFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FetchReconRequestFilters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.start_date != null)
                {
                    hashCode = (hashCode * 59) + this.start_date.GetHashCode();
                }
                if (this.end_date != null)
                {
                    hashCode = (hashCode * 59) + this.end_date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
