/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// OTP to be submitted for headless/native OTP
    /// </summary>
    [DataContract(Name = "OrderAuthenticatePaymentRequest")]
    public class OrderAuthenticatePaymentRequest : IEquatable<OrderAuthenticatePaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// The action for this workflow. Could be either SUBMIT_OTP or RESEND_OTP
        /// </summary>
        /// <value>The action for this workflow. Could be either SUBMIT_OTP or RESEND_OTP</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum SUBMITOTP for value: SUBMIT_OTP
            /// </summary>
            [EnumMember(Value = "SUBMIT_OTP")]
            SUBMITOTP = 1,

            /// <summary>
            /// Enum RESENDOTP for value: RESEND_OTP
            /// </summary>
            [EnumMember(Value = "RESEND_OTP")]
            RESENDOTP = 2
        }


        /// <summary>
        /// The action for this workflow. Could be either SUBMIT_OTP or RESEND_OTP
        /// </summary>
        /// <value>The action for this workflow. Could be either SUBMIT_OTP or RESEND_OTP</value>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ActionEnum action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAuthenticatePaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderAuthenticatePaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAuthenticatePaymentRequest" /> class.
        /// </summary>
        /// <param name="otp">OTP to be submitted (required).</param>
        /// <param name="action">The action for this workflow. Could be either SUBMIT_OTP or RESEND_OTP (required).</param>
        public OrderAuthenticatePaymentRequest(string otp = default(string), ActionEnum action = default(ActionEnum))
        {
            // to ensure "otp" is required (not null)
            if (otp == null)
            {
                throw new ArgumentNullException("otp is a required property for OrderAuthenticatePaymentRequest and cannot be null");
            }
            this.otp = otp;
            this.action = action;
        }

        /// <summary>
        /// OTP to be submitted
        /// </summary>
        /// <value>OTP to be submitted</value>
        [DataMember(Name = "otp", IsRequired = true, EmitDefaultValue = true)]
        public string otp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderAuthenticatePaymentRequest {\n");
            sb.Append("  otp: ").Append(otp).Append("\n");
            sb.Append("  action: ").Append(action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderAuthenticatePaymentRequest);
        }

        /// <summary>
        /// Returns true if OrderAuthenticatePaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderAuthenticatePaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderAuthenticatePaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.otp == input.otp ||
                    (this.otp != null &&
                    this.otp.Equals(input.otp))
                ) && 
                (
                    this.action == input.action ||
                    this.action.Equals(input.action)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.otp != null)
                {
                    hashCode = (hashCode * 59) + this.otp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.action.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
