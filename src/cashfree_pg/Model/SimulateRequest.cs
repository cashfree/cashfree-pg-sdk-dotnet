/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// simulate payment request object
    /// </summary>
    [DataContract(Name = "SimulateRequest")]
    public class SimulateRequest : IEquatable<SimulateRequest>, IValidatableObject
    {
        /// <summary>
        /// Entity type should be PAYMENTS only.
        /// </summary>
        /// <value>Entity type should be PAYMENTS only.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityEnum
        {
            /// <summary>
            /// Enum PAYMENTS for value: PAYMENTS
            /// </summary>
            [EnumMember(Value = "PAYMENTS")]
            PAYMENTS = 1
        }


        /// <summary>
        /// Entity type should be PAYMENTS only.
        /// </summary>
        /// <value>Entity type should be PAYMENTS only.</value>
        [DataMember(Name = "entity", IsRequired = true, EmitDefaultValue = true)]
        public EntityEnum entity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimulateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulateRequest" /> class.
        /// </summary>
        /// <param name="entity">Entity type should be PAYMENTS only. (required).</param>
        /// <param name="entityId">In case of Entity type is PAYMENTS, entity_id will be transactionId (required).</param>
        /// <param name="entitySimulation">entitySimulation (required).</param>
        public SimulateRequest(EntityEnum entity = default(EntityEnum), string entityId = default(string), EntitySimulationRequest entitySimulation = default(EntitySimulationRequest))
        {
            this.entity = entity;
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new ArgumentNullException("entityId is a required property for SimulateRequest and cannot be null");
            }
            this.entity_id = entityId;
            // to ensure "entitySimulation" is required (not null)
            if (entitySimulation == null)
            {
                throw new ArgumentNullException("entitySimulation is a required property for SimulateRequest and cannot be null");
            }
            this.entity_simulation = entitySimulation;
        }

        /// <summary>
        /// In case of Entity type is PAYMENTS, entity_id will be transactionId
        /// </summary>
        /// <value>In case of Entity type is PAYMENTS, entity_id will be transactionId</value>
        [DataMember(Name = "entity_id", IsRequired = true, EmitDefaultValue = true)]
        public string entity_id { get; set; }

        /// <summary>
        /// Gets or Sets entity_simulation
        /// </summary>
        [DataMember(Name = "entity_simulation", IsRequired = true, EmitDefaultValue = true)]
        public EntitySimulationRequest entity_simulation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimulateRequest {\n");
            sb.Append("  entity: ").Append(entity).Append("\n");
            sb.Append("  entity_id: ").Append(entity_id).Append("\n");
            sb.Append("  entity_simulation: ").Append(entity_simulation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulateRequest);
        }

        /// <summary>
        /// Returns true if SimulateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.entity == input.entity ||
                    this.entity.Equals(input.entity)
                ) && 
                (
                    this.entity_id == input.entity_id ||
                    (this.entity_id != null &&
                    this.entity_id.Equals(input.entity_id))
                ) && 
                (
                    this.entity_simulation == input.entity_simulation ||
                    (this.entity_simulation != null &&
                    this.entity_simulation.Equals(input.entity_simulation))
                );
        }


        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.entity.GetHashCode();
                if (this.entity_id != null)
                {
                    hashCode = (hashCode * 59) + this.entity_id.GetHashCode();
                }
                if (this.entity_simulation != null)
                {
                    hashCode = (hashCode * 59) + this.entity_simulation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
