/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// The complete order extended data entity
    /// </summary>
    [DataContract(Name = "OrderExtendedDataEntity")]
    public class OrderExtendedDataEntity : IEquatable<OrderExtendedDataEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderExtendedDataEntity" /> class.
        /// </summary>
        /// <param name="cfOrderId">unique id generated by cashfree for your order.</param>
        /// <param name="orderId">order_id sent during the api request.</param>
        /// <param name="orderAmount">orderAmount.</param>
        /// <param name="orderCurrency">Currency of the order. Example INR.</param>
        /// <param name="createdAt">When the order was created at cashfree&#39;s server.</param>
        /// <param name="charges">charges.</param>
        /// <param name="customerDetails">customerDetails.</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="cart">cart.</param>
        /// <param name="offer">offer.</param>
        public OrderExtendedDataEntity(string? cfOrderId = default(string?), string? orderId = default(string?), decimal? orderAmount = default(decimal?), string? orderCurrency = default(string?), DateTime? createdAt = default(DateTime?), ChargesEntity? charges = default(ChargesEntity?), ExtendedCustomerDetails? customerDetails = default(ExtendedCustomerDetails?), AddressDetails? shippingAddress = default(AddressDetails?), AddressDetails? billingAddress = default(AddressDetails?), ExtendedCartDetails? cart = default(ExtendedCartDetails?), OfferExtendedDetails? offer = default(OfferExtendedDetails?))
        {
            this.cf_order_id = cfOrderId;
            this.order_id = orderId;
            this.order_amount = orderAmount;
            this.order_currency = orderCurrency;
            this.created_at = createdAt;
            this.charges = charges;
            this.customer_details = customerDetails;
            this.shipping_address = shippingAddress;
            this.billing_address = billingAddress;
            this.cart = cart;
            this.offer = offer;
        }

        /// <summary>
        /// unique id generated by cashfree for your order
        /// </summary>
        /// <value>unique id generated by cashfree for your order</value>
        [DataMember(Name = "cf_order_id", EmitDefaultValue = false)]
        public string? cf_order_id { get; set; }

        /// <summary>
        /// order_id sent during the api request
        /// </summary>
        /// <value>order_id sent during the api request</value>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string? order_id { get; set; }

        /// <summary>
        /// Gets or Sets order_amount
        /// </summary>
        [DataMember(Name = "order_amount", EmitDefaultValue = false)]
        public decimal? order_amount { get; set; }

        /// <summary>
        /// Currency of the order. Example INR
        /// </summary>
        /// <value>Currency of the order. Example INR</value>
        [DataMember(Name = "order_currency", EmitDefaultValue = false)]
        public string? order_currency { get; set; }

        /// <summary>
        /// When the order was created at cashfree&#39;s server
        /// </summary>
        /// <value>When the order was created at cashfree&#39;s server</value>
        /// <example>2022-08-16T14:45:38+05:30</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime? created_at { get; set; }

        /// <summary>
        /// Gets or Sets charges
        /// </summary>
        [DataMember(Name = "charges", EmitDefaultValue = false)]
        public ChargesEntity? charges { get; set; }

        /// <summary>
        /// Gets or Sets customer_details
        /// </summary>
        [DataMember(Name = "customer_details", EmitDefaultValue = false)]
        public ExtendedCustomerDetails? customer_details { get; set; }

        /// <summary>
        /// Gets or Sets shipping_address
        /// </summary>
        [DataMember(Name = "shipping_address", EmitDefaultValue = false)]
        public AddressDetails? shipping_address { get; set; }

        /// <summary>
        /// Gets or Sets billing_address
        /// </summary>
        [DataMember(Name = "billing_address", EmitDefaultValue = false)]
        public AddressDetails? billing_address { get; set; }

        /// <summary>
        /// Gets or Sets cart
        /// </summary>
        [DataMember(Name = "cart", EmitDefaultValue = false)]
        public ExtendedCartDetails? cart { get; set; }

        /// <summary>
        /// Gets or Sets offer
        /// </summary>
        [DataMember(Name = "offer", EmitDefaultValue = false)]
        public OfferExtendedDetails? offer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderExtendedDataEntity {\n");
            sb.Append("  cf_order_id: ").Append(cf_order_id).Append("\n");
            sb.Append("  order_id: ").Append(order_id).Append("\n");
            sb.Append("  order_amount: ").Append(order_amount).Append("\n");
            sb.Append("  order_currency: ").Append(order_currency).Append("\n");
            sb.Append("  created_at: ").Append(created_at).Append("\n");
            sb.Append("  charges: ").Append(charges).Append("\n");
            sb.Append("  customer_details: ").Append(customer_details).Append("\n");
            sb.Append("  shipping_address: ").Append(shipping_address).Append("\n");
            sb.Append("  billing_address: ").Append(billing_address).Append("\n");
            sb.Append("  cart: ").Append(cart).Append("\n");
            sb.Append("  offer: ").Append(offer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderExtendedDataEntity);
        }

        /// <summary>
        /// Returns true if OrderExtendedDataEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderExtendedDataEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderExtendedDataEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.cf_order_id == input.cf_order_id ||
                    (this.cf_order_id != null &&
                    this.cf_order_id.Equals(input.cf_order_id))
                ) && 
                (
                    this.order_id == input.order_id ||
                    (this.order_id != null &&
                    this.order_id.Equals(input.order_id))
                ) && 
                (
                    this.order_amount == input.order_amount ||
                    this.order_amount.Equals(input.order_amount)
                ) && 
                (
                    this.order_currency == input.order_currency ||
                    (this.order_currency != null &&
                    this.order_currency.Equals(input.order_currency))
                ) && 
                (
                    this.created_at == input.created_at ||
                    (this.created_at != null &&
                    this.created_at.Equals(input.created_at))
                ) && 
                (
                    this.charges == input.charges ||
                    (this.charges != null &&
                    this.charges.Equals(input.charges))
                ) && 
                (
                    this.customer_details == input.customer_details ||
                    (this.customer_details != null &&
                    this.customer_details.Equals(input.customer_details))
                ) && 
                (
                    this.shipping_address == input.shipping_address ||
                    (this.shipping_address != null &&
                    this.shipping_address.Equals(input.shipping_address))
                ) && 
                (
                    this.billing_address == input.billing_address ||
                    (this.billing_address != null &&
                    this.billing_address.Equals(input.billing_address))
                ) && 
                (
                    this.cart == input.cart ||
                    (this.cart != null &&
                    this.cart.Equals(input.cart))
                ) && 
                (
                    this.offer == input.offer ||
                    (this.offer != null &&
                    this.offer.Equals(input.offer))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringcf_order_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringcf_order_id);
            if (deserializedJsonString.ContainsKey("cf_order_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.cf_order_id != null)
                {
                    hashCode = (hashCode * 59) + this.cf_order_id.GetHashCode();
                }
                if (this.order_id != null)
                {
                    hashCode = (hashCode * 59) + this.order_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.order_amount.GetHashCode();
                if (this.order_currency != null)
                {
                    hashCode = (hashCode * 59) + this.order_currency.GetHashCode();
                }
                if (this.created_at != null)
                {
                    hashCode = (hashCode * 59) + this.created_at.GetHashCode();
                }
                if (this.charges != null)
                {
                    hashCode = (hashCode * 59) + this.charges.GetHashCode();
                }
                if (this.customer_details != null)
                {
                    hashCode = (hashCode * 59) + this.customer_details.GetHashCode();
                }
                if (this.shipping_address != null)
                {
                    hashCode = (hashCode * 59) + this.shipping_address.GetHashCode();
                }
                if (this.billing_address != null)
                {
                    hashCode = (hashCode * 59) + this.billing_address.GetHashCode();
                }
                if (this.cart != null)
                {
                    hashCode = (hashCode * 59) + this.cart.GetHashCode();
                }
                if (this.offer != null)
                {
                    hashCode = (hashCode * 59) + this.offer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
