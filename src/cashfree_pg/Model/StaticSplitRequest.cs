/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Static Split Request
    /// </summary>
    [DataContract(Name = "StaticSplitRequest")]
    public class StaticSplitRequest : IEquatable<StaticSplitRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticSplitRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StaticSplitRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticSplitRequest" /> class.
        /// </summary>
        /// <param name="active">Specify if the split is to be active or not. Possible values: true/false (required).</param>
        /// <param name="terminalId">For Subscription payments, the subscription reference ID is to be shared as the terminal ID. Incase for Payment Gateway terminal ID is non-mandatory. Mention as 0 if not applicable..</param>
        /// <param name="terminalReferenceId">You can share additional information using the reference ID..</param>
        /// <param name="productType">Specify the product for which the split should be created. If you want split to be created for Payment Gateway pass value as \&quot;PG\&quot;. If you want split to be created for Subscription, pass value as \&quot;SBC\&quot;. Accepted values - \&quot;STATIC_QR\&quot;, \&quot;SBC\&quot;, \&quot;PG\&quot;, \&quot;EPOS\&quot;. (required).</param>
        /// <param name="scheme">Provide the split scheme details. (required).</param>
        public StaticSplitRequest(bool active = default(bool), string? terminalId = default(string?), decimal? terminalReferenceId = default(decimal?), string productType = default(string), List<StaticSplitRequestSchemeInner> scheme = default(List<StaticSplitRequestSchemeInner>))
        {
            this.active = active;
            // to ensure "productType" is required (not null)
            if (productType == null)
            {
                throw new ArgumentNullException("productType is a required property for StaticSplitRequest and cannot be null");
            }
            this.product_type = productType;
            // to ensure "scheme" is required (not null)
            if (scheme == null)
            {
                throw new ArgumentNullException("scheme is a required property for StaticSplitRequest and cannot be null");
            }
            this.scheme = scheme;
            this.terminal_id = terminalId;
            this.terminal_reference_id = terminalReferenceId;
        }

        /// <summary>
        /// Specify if the split is to be active or not. Possible values: true/false
        /// </summary>
        /// <value>Specify if the split is to be active or not. Possible values: true/false</value>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool active { get; set; }

        /// <summary>
        /// For Subscription payments, the subscription reference ID is to be shared as the terminal ID. Incase for Payment Gateway terminal ID is non-mandatory. Mention as 0 if not applicable.
        /// </summary>
        /// <value>For Subscription payments, the subscription reference ID is to be shared as the terminal ID. Incase for Payment Gateway terminal ID is non-mandatory. Mention as 0 if not applicable.</value>
        [DataMember(Name = "terminal_id", EmitDefaultValue = false)]
        public string? terminal_id { get; set; }

        /// <summary>
        /// You can share additional information using the reference ID.
        /// </summary>
        /// <value>You can share additional information using the reference ID.</value>
        [DataMember(Name = "terminal_reference_id", EmitDefaultValue = false)]
        public decimal? terminal_reference_id { get; set; }

        /// <summary>
        /// Specify the product for which the split should be created. If you want split to be created for Payment Gateway pass value as \&quot;PG\&quot;. If you want split to be created for Subscription, pass value as \&quot;SBC\&quot;. Accepted values - \&quot;STATIC_QR\&quot;, \&quot;SBC\&quot;, \&quot;PG\&quot;, \&quot;EPOS\&quot;.
        /// </summary>
        /// <value>Specify the product for which the split should be created. If you want split to be created for Payment Gateway pass value as \&quot;PG\&quot;. If you want split to be created for Subscription, pass value as \&quot;SBC\&quot;. Accepted values - \&quot;STATIC_QR\&quot;, \&quot;SBC\&quot;, \&quot;PG\&quot;, \&quot;EPOS\&quot;.</value>
        [DataMember(Name = "product_type", IsRequired = true, EmitDefaultValue = true)]
        public string product_type { get; set; }

        /// <summary>
        /// Provide the split scheme details.
        /// </summary>
        /// <value>Provide the split scheme details.</value>
        [DataMember(Name = "scheme", IsRequired = true, EmitDefaultValue = true)]
        public List<StaticSplitRequestSchemeInner> scheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StaticSplitRequest {\n");
            sb.Append("  active: ").Append(active).Append("\n");
            sb.Append("  terminal_id: ").Append(terminal_id).Append("\n");
            sb.Append("  terminal_reference_id: ").Append(terminal_reference_id).Append("\n");
            sb.Append("  product_type: ").Append(product_type).Append("\n");
            sb.Append("  scheme: ").Append(scheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaticSplitRequest);
        }

        /// <summary>
        /// Returns true if StaticSplitRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StaticSplitRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaticSplitRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.active == input.active ||
                    this.active.Equals(input.active)
                ) && 
                (
                    this.terminal_id == input.terminal_id ||
                    (this.terminal_id != null &&
                    this.terminal_id.Equals(input.terminal_id))
                ) && 
                (
                    this.terminal_reference_id == input.terminal_reference_id ||
                    this.terminal_reference_id.Equals(input.terminal_reference_id)
                ) && 
                (
                    this.product_type == input.product_type ||
                    (this.product_type != null &&
                    this.product_type.Equals(input.product_type))
                ) && 
                (
                    this.scheme == input.scheme ||
                    this.scheme != null &&
                    input.scheme != null &&
                    this.scheme.SequenceEqual(input.scheme)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringactive) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringactive);
            if (deserializedJsonString.ContainsKey("active")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.active.GetHashCode();
                if (this.terminal_id != null)
                {
                    hashCode = (hashCode * 59) + this.terminal_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.terminal_reference_id.GetHashCode();
                if (this.product_type != null)
                {
                    hashCode = (hashCode * 59) + this.product_type.GetHashCode();
                }
                if (this.scheme != null)
                {
                    hashCode = (hashCode * 59) + this.scheme.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
