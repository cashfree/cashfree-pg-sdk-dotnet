/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;
using System.Reflection;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFPaymentsEntityMethod
    /// </summary>
    [JsonConverter(typeof(CFPaymentsEntityMethodJsonConverter))]
    [DataContract(Name = "CFPaymentsEntityMethod")]
    public partial class CFPaymentsEntityMethod : AbstractOpenAPISchema, IEquatable<CFPaymentsEntityMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntityMethod" /> class
        /// with the <see cref="CFPaymentsEntityAppPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFPaymentsEntityAppPayment.</param>
        public CFPaymentsEntityMethod(CFPaymentsEntityAppPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntityMethod" /> class
        /// with the <see cref="CFPaymentsEntityCardPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFPaymentsEntityCardPayment.</param>
        public CFPaymentsEntityMethod(CFPaymentsEntityCardPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntityMethod" /> class
        /// with the <see cref="CFPaymentsEntityCardlessEMIPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFPaymentsEntityCardlessEMIPayment.</param>
        public CFPaymentsEntityMethod(CFPaymentsEntityCardlessEMIPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntityMethod" /> class
        /// with the <see cref="CFPaymentsEntityNetbankingPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFPaymentsEntityNetbankingPayment.</param>
        public CFPaymentsEntityMethod(CFPaymentsEntityNetbankingPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntityMethod" /> class
        /// with the <see cref="CFPaymentsEntityPaylaterPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFPaymentsEntityPaylaterPayment.</param>
        public CFPaymentsEntityMethod(CFPaymentsEntityPaylaterPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CFPaymentsEntityMethod" /> class
        /// with the <see cref="CFPaymentsEntityUPIPayment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CFPaymentsEntityUPIPayment.</param>
        public CFPaymentsEntityMethod(CFPaymentsEntityUPIPayment? actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object? _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object? ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CFPaymentsEntityAppPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFPaymentsEntityCardPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFPaymentsEntityCardlessEMIPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFPaymentsEntityNetbankingPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFPaymentsEntityPaylaterPayment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CFPaymentsEntityUPIPayment))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CFPaymentsEntityAppPayment, CFPaymentsEntityCardPayment, CFPaymentsEntityCardlessEMIPayment, CFPaymentsEntityNetbankingPayment, CFPaymentsEntityPaylaterPayment, CFPaymentsEntityUPIPayment");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `CFPaymentsEntityAppPayment`. If the actual instance is not `CFPaymentsEntityAppPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFPaymentsEntityAppPayment</returns>
        public CFPaymentsEntityAppPayment? GetCFPaymentsEntityAppPayment()
        {
            return (CFPaymentsEntityAppPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFPaymentsEntityCardPayment`. If the actual instance is not `CFPaymentsEntityCardPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFPaymentsEntityCardPayment</returns>
        public CFPaymentsEntityCardPayment? GetCFPaymentsEntityCardPayment()
        {
            return (CFPaymentsEntityCardPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFPaymentsEntityCardlessEMIPayment`. If the actual instance is not `CFPaymentsEntityCardlessEMIPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFPaymentsEntityCardlessEMIPayment</returns>
        public CFPaymentsEntityCardlessEMIPayment? GetCFPaymentsEntityCardlessEMIPayment()
        {
            return (CFPaymentsEntityCardlessEMIPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFPaymentsEntityNetbankingPayment`. If the actual instance is not `CFPaymentsEntityNetbankingPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFPaymentsEntityNetbankingPayment</returns>
        public CFPaymentsEntityNetbankingPayment? GetCFPaymentsEntityNetbankingPayment()
        {
            return (CFPaymentsEntityNetbankingPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFPaymentsEntityPaylaterPayment`. If the actual instance is not `CFPaymentsEntityPaylaterPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFPaymentsEntityPaylaterPayment</returns>
        public CFPaymentsEntityPaylaterPayment? GetCFPaymentsEntityPaylaterPayment()
        {
            return (CFPaymentsEntityPaylaterPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CFPaymentsEntityUPIPayment`. If the actual instance is not `CFPaymentsEntityUPIPayment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CFPaymentsEntityUPIPayment</returns>
        public CFPaymentsEntityUPIPayment? GetCFPaymentsEntityUPIPayment()
        {
            return (CFPaymentsEntityUPIPayment?)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CFPaymentsEntityMethod {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CFPaymentsEntityMethod.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CFPaymentsEntityMethod
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CFPaymentsEntityMethod</returns>
        public static CFPaymentsEntityMethod? FromJson(string jsonString)
        {
            CFPaymentsEntityMethod? newCFPaymentsEntityMethod = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCFPaymentsEntityMethod;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFPaymentsEntityAppPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityAppPayment>(jsonString, CFPaymentsEntityMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityAppPayment>(jsonString, CFPaymentsEntityMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFPaymentsEntityAppPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFPaymentsEntityAppPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFPaymentsEntityCardPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityCardPayment>(jsonString, CFPaymentsEntityMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityCardPayment>(jsonString, CFPaymentsEntityMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFPaymentsEntityCardPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFPaymentsEntityCardPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFPaymentsEntityCardlessEMIPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityCardlessEMIPayment>(jsonString, CFPaymentsEntityMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityCardlessEMIPayment>(jsonString, CFPaymentsEntityMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFPaymentsEntityCardlessEMIPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFPaymentsEntityCardlessEMIPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFPaymentsEntityNetbankingPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityNetbankingPayment>(jsonString, CFPaymentsEntityMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityNetbankingPayment>(jsonString, CFPaymentsEntityMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFPaymentsEntityNetbankingPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFPaymentsEntityNetbankingPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFPaymentsEntityPaylaterPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityPaylaterPayment>(jsonString, CFPaymentsEntityMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityPaylaterPayment>(jsonString, CFPaymentsEntityMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFPaymentsEntityPaylaterPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFPaymentsEntityPaylaterPayment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CFPaymentsEntityUPIPayment).GetProperty("AdditionalProperties") == null)
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityUPIPayment>(jsonString, CFPaymentsEntityMethod.SerializerSettings));
                }
                else
                {
                    newCFPaymentsEntityMethod = new CFPaymentsEntityMethod(JsonConvert.DeserializeObject<CFPaymentsEntityUPIPayment>(jsonString, CFPaymentsEntityMethod.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CFPaymentsEntityUPIPayment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CFPaymentsEntityUPIPayment: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCFPaymentsEntityMethod;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFPaymentsEntityMethod);
        }

        /// <summary>
        /// Returns true if CFPaymentsEntityMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of CFPaymentsEntityMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFPaymentsEntityMethod? input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CFPaymentsEntityMethod
    /// </summary>
    public class CFPaymentsEntityMethodJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CFPaymentsEntityMethod).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object? ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return CFPaymentsEntityMethod.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
