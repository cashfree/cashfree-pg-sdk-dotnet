/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFError
    /// </summary>
    [DataContract(Name = "CFError")]
    public partial class CFError : IEquatable<CFError>, IValidatableObject
    {
        /// <summary>
        /// One of [\&quot;invalid_request_error\&quot;, \&quot;authentication_error\&quot;, \&quot;rate_limit_error\&quot;, \&quot;validation_error\&quot;, \&quot;api_error\&quot;]
        /// </summary>
        /// <value>One of [\&quot;invalid_request_error\&quot;, \&quot;authentication_error\&quot;, \&quot;rate_limit_error\&quot;, \&quot;validation_error\&quot;, \&quot;api_error\&quot;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum InvalidRequestError for value: invalid_request_error
            /// </summary>
            [EnumMember(Value = "invalid_request_error")]
            InvalidRequestError = 1,

            /// <summary>
            /// Enum AuthenticationError for value: authentication_error
            /// </summary>
            [EnumMember(Value = "authentication_error")]
            AuthenticationError = 2,

            /// <summary>
            /// Enum RateLimitError for value: rate_limit_error
            /// </summary>
            [EnumMember(Value = "rate_limit_error")]
            RateLimitError = 3,

            /// <summary>
            /// Enum ValidationError for value: validation_error
            /// </summary>
            [EnumMember(Value = "validation_error")]
            ValidationError = 4,

            /// <summary>
            /// Enum ApiError for value: api_error
            /// </summary>
            [EnumMember(Value = "api_error")]
            ApiError = 5

        }


        /// <summary>
        /// One of [\&quot;invalid_request_error\&quot;, \&quot;authentication_error\&quot;, \&quot;rate_limit_error\&quot;, \&quot;validation_error\&quot;, \&quot;api_error\&quot;]
        /// </summary>
        /// <value>One of [\&quot;invalid_request_error\&quot;, \&quot;authentication_error\&quot;, \&quot;rate_limit_error\&quot;, \&quot;validation_error\&quot;, \&quot;api_error\&quot;]</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFError" /> class.
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="code">code.</param>
        /// <param name="type">One of [\&quot;invalid_request_error\&quot;, \&quot;authentication_error\&quot;, \&quot;rate_limit_error\&quot;, \&quot;validation_error\&quot;, \&quot;api_error\&quot;].</param>
        public CFError(string? message = default(string?), string? code = default(string?), string? type = default(string?))
        {
            this.Message = message;
            this.Code = code;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string? Message { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string? Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFError {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFError);
        }

        /// <summary>
        /// Returns true if CFError instances are equal
        /// </summary>
        /// <param name="input">Instance of CFError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFError? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
