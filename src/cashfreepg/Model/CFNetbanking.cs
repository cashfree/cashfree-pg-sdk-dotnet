/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFNetbanking
    /// </summary>
    [DataContract(Name = "CFNetbanking")]
    public partial class CFNetbanking : IEquatable<CFNetbanking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFNetbanking" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CFNetbanking() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFNetbanking" /> class.
        /// </summary>
        /// <param name="channel">The channel for netbanking will always be &#x60;link&#x60; (required).</param>
        /// <param name="netbankingBankCode">Bank code (required).</param>
        public CFNetbanking(string? channel = "link", int? netbankingBankCode = default(int?))
        {
            // to ensure "channel" is required (not null)
            if (netbankingBankCode == null) {
                throw new ArgumentNullException("netbankingBankCode is a required property for CFNetbanking and cannot be null");
            }
            this.Channel = channel;
            this.NetbankingBankCode = netbankingBankCode;
        }

        /// <summary>
        /// The channel for netbanking will always be &#x60;link&#x60;
        /// </summary>
        /// <value>The channel for netbanking will always be &#x60;link&#x60;</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = false)]
        public string? Channel { get; set; }

        /// <summary>
        /// Bank code
        /// </summary>
        /// <value>Bank code</value>
        [DataMember(Name = "netbanking_bank_code", IsRequired = true, EmitDefaultValue = false)]
        public int? NetbankingBankCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFNetbanking {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  NetbankingBankCode: ").Append(NetbankingBankCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFNetbanking);
        }

        /// <summary>
        /// Returns true if CFNetbanking instances are equal
        /// </summary>
        /// <param name="input">Instance of CFNetbanking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFNetbanking? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.NetbankingBankCode == input.NetbankingBankCode ||
                    this.NetbankingBankCode.Equals(input.NetbankingBankCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Channel != null)
                {
                    hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NetbankingBankCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
