/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2022-09-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Request paramenters for link creation
    /// </summary>
    [DataContract(Name = "CreateLinkRequest")]
    public class CreateLinkRequest : IEquatable<CreateLinkRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLinkRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateLinkRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLinkRequest" /> class.
        /// </summary>
        /// <param name="linkId">Unique Identifier (provided by merchant) for the Link. Alphanumeric and only - and _ allowed (50 character limit). Use this for other link-related APIs. (required).</param>
        /// <param name="linkAmount">Amount to be collected using this link. Provide upto two decimals for paise. (required).</param>
        /// <param name="linkCurrency">Currency for the payment link. Default is INR. Contact care@cashfree.com to enable new currencies. (required).</param>
        /// <param name="linkPurpose">A brief description for which payment must be collected. This is shown to the customer. (required).</param>
        /// <param name="customerDetails">customerDetails (required).</param>
        /// <param name="linkPartialPayments">If \&quot;true\&quot;, customer can make partial payments for the link..</param>
        /// <param name="linkMinimumPartialAmount">Minimum amount in first installment that needs to be paid by the customer if partial payments are enabled. This should be less than the link_amount..</param>
        /// <param name="linkExpiryTime">Time after which the link expires. Customers will not be able to make the payment beyond the time specified here. You can provide them in a valid ISO 8601 time format. Default is 30 days..</param>
        /// <param name="linkNotify">linkNotify.</param>
        /// <param name="linkAutoReminders">If \&quot;true\&quot;, reminders will be sent to customers for collecting payments..</param>
        /// <param name="linkNotes">Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs.</param>
        /// <param name="linkMeta">linkMeta.</param>
        public CreateLinkRequest(string linkId = default(string), double linkAmount = default(double), string linkCurrency = default(string), string linkPurpose = default(string), LinkCustomerDetailsEntity customerDetails = default(LinkCustomerDetailsEntity), bool linkPartialPayments = default(bool), double linkMinimumPartialAmount = default(double), string linkExpiryTime = default(string), LinkNotifyEntity linkNotify = default(LinkNotifyEntity), bool linkAutoReminders = default(bool), Dictionary<string, string> linkNotes = default(Dictionary<string, string>), LinkMetaEntity linkMeta = default(LinkMetaEntity))
        {
            // to ensure "linkId" is required (not null)
            if (linkId == null)
            {
                throw new ArgumentNullException("linkId is a required property for CreateLinkRequest and cannot be null");
            }
            this.link_id = linkId;
            this.link_amount = linkAmount;
            // to ensure "linkCurrency" is required (not null)
            if (linkCurrency == null)
            {
                throw new ArgumentNullException("linkCurrency is a required property for CreateLinkRequest and cannot be null");
            }
            this.link_currency = linkCurrency;
            // to ensure "linkPurpose" is required (not null)
            if (linkPurpose == null)
            {
                throw new ArgumentNullException("linkPurpose is a required property for CreateLinkRequest and cannot be null");
            }
            this.link_purpose = linkPurpose;
            // to ensure "customerDetails" is required (not null)
            if (customerDetails == null)
            {
                throw new ArgumentNullException("customerDetails is a required property for CreateLinkRequest and cannot be null");
            }
            this.customer_details = customerDetails;
            this.link_partial_payments = linkPartialPayments;
            this.link_minimum_partial_amount = linkMinimumPartialAmount;
            this.link_expiry_time = linkExpiryTime;
            this.link_notify = linkNotify;
            this.link_auto_reminders = linkAutoReminders;
            this.link_notes = linkNotes;
            this.link_meta = linkMeta;
        }

        /// <summary>
        /// Unique Identifier (provided by merchant) for the Link. Alphanumeric and only - and _ allowed (50 character limit). Use this for other link-related APIs.
        /// </summary>
        /// <value>Unique Identifier (provided by merchant) for the Link. Alphanumeric and only - and _ allowed (50 character limit). Use this for other link-related APIs.</value>
        [DataMember(Name = "link_id", IsRequired = true, EmitDefaultValue = true)]
        public string link_id { get; set; }

        /// <summary>
        /// Amount to be collected using this link. Provide upto two decimals for paise.
        /// </summary>
        /// <value>Amount to be collected using this link. Provide upto two decimals for paise.</value>
        [DataMember(Name = "link_amount", IsRequired = true, EmitDefaultValue = true)]
        public double link_amount { get; set; }

        /// <summary>
        /// Currency for the payment link. Default is INR. Contact care@cashfree.com to enable new currencies.
        /// </summary>
        /// <value>Currency for the payment link. Default is INR. Contact care@cashfree.com to enable new currencies.</value>
        [DataMember(Name = "link_currency", IsRequired = true, EmitDefaultValue = true)]
        public string link_currency { get; set; }

        /// <summary>
        /// A brief description for which payment must be collected. This is shown to the customer.
        /// </summary>
        /// <value>A brief description for which payment must be collected. This is shown to the customer.</value>
        [DataMember(Name = "link_purpose", IsRequired = true, EmitDefaultValue = true)]
        public string link_purpose { get; set; }

        /// <summary>
        /// Gets or Sets customer_details
        /// </summary>
        [DataMember(Name = "customer_details", IsRequired = true, EmitDefaultValue = true)]
        public LinkCustomerDetailsEntity customer_details { get; set; }

        /// <summary>
        /// If \&quot;true\&quot;, customer can make partial payments for the link.
        /// </summary>
        /// <value>If \&quot;true\&quot;, customer can make partial payments for the link.</value>
        [DataMember(Name = "link_partial_payments", EmitDefaultValue = true)]
        public bool link_partial_payments { get; set; }

        /// <summary>
        /// Minimum amount in first installment that needs to be paid by the customer if partial payments are enabled. This should be less than the link_amount.
        /// </summary>
        /// <value>Minimum amount in first installment that needs to be paid by the customer if partial payments are enabled. This should be less than the link_amount.</value>
        [DataMember(Name = "link_minimum_partial_amount", EmitDefaultValue = false)]
        public double link_minimum_partial_amount { get; set; }

        /// <summary>
        /// Time after which the link expires. Customers will not be able to make the payment beyond the time specified here. You can provide them in a valid ISO 8601 time format. Default is 30 days.
        /// </summary>
        /// <value>Time after which the link expires. Customers will not be able to make the payment beyond the time specified here. You can provide them in a valid ISO 8601 time format. Default is 30 days.</value>
        [DataMember(Name = "link_expiry_time", EmitDefaultValue = false)]
        public string link_expiry_time { get; set; }

        /// <summary>
        /// Gets or Sets link_notify
        /// </summary>
        [DataMember(Name = "link_notify", EmitDefaultValue = false)]
        public LinkNotifyEntity link_notify { get; set; }

        /// <summary>
        /// If \&quot;true\&quot;, reminders will be sent to customers for collecting payments.
        /// </summary>
        /// <value>If \&quot;true\&quot;, reminders will be sent to customers for collecting payments.</value>
        [DataMember(Name = "link_auto_reminders", EmitDefaultValue = true)]
        public bool link_auto_reminders { get; set; }

        /// <summary>
        /// Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs
        /// </summary>
        /// <value>Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs</value>
        /// <example>{&quot;key_1&quot;:&quot;value_1&quot;,&quot;key_2&quot;:&quot;value_2&quot;}</example>
        [DataMember(Name = "link_notes", EmitDefaultValue = false)]
        public Dictionary<string, string> link_notes { get; set; }

        /// <summary>
        /// Gets or Sets link_meta
        /// </summary>
        [DataMember(Name = "link_meta", EmitDefaultValue = false)]
        public LinkMetaEntity link_meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLinkRequest {\n");
            sb.Append("  link_id: ").Append(link_id).Append("\n");
            sb.Append("  link_amount: ").Append(link_amount).Append("\n");
            sb.Append("  link_currency: ").Append(link_currency).Append("\n");
            sb.Append("  link_purpose: ").Append(link_purpose).Append("\n");
            sb.Append("  customer_details: ").Append(customer_details).Append("\n");
            sb.Append("  link_partial_payments: ").Append(link_partial_payments).Append("\n");
            sb.Append("  link_minimum_partial_amount: ").Append(link_minimum_partial_amount).Append("\n");
            sb.Append("  link_expiry_time: ").Append(link_expiry_time).Append("\n");
            sb.Append("  link_notify: ").Append(link_notify).Append("\n");
            sb.Append("  link_auto_reminders: ").Append(link_auto_reminders).Append("\n");
            sb.Append("  link_notes: ").Append(link_notes).Append("\n");
            sb.Append("  link_meta: ").Append(link_meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateLinkRequest);
        }

        /// <summary>
        /// Returns true if CreateLinkRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateLinkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateLinkRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.link_id == input.link_id ||
                    (this.link_id != null &&
                    this.link_id.Equals(input.link_id))
                ) && 
                (
                    this.link_amount == input.link_amount ||
                    this.link_amount.Equals(input.link_amount)
                ) && 
                (
                    this.link_currency == input.link_currency ||
                    (this.link_currency != null &&
                    this.link_currency.Equals(input.link_currency))
                ) && 
                (
                    this.link_purpose == input.link_purpose ||
                    (this.link_purpose != null &&
                    this.link_purpose.Equals(input.link_purpose))
                ) && 
                (
                    this.customer_details == input.customer_details ||
                    (this.customer_details != null &&
                    this.customer_details.Equals(input.customer_details))
                ) && 
                (
                    this.link_partial_payments == input.link_partial_payments ||
                    this.link_partial_payments.Equals(input.link_partial_payments)
                ) && 
                (
                    this.link_minimum_partial_amount == input.link_minimum_partial_amount ||
                    this.link_minimum_partial_amount.Equals(input.link_minimum_partial_amount)
                ) && 
                (
                    this.link_expiry_time == input.link_expiry_time ||
                    (this.link_expiry_time != null &&
                    this.link_expiry_time.Equals(input.link_expiry_time))
                ) && 
                (
                    this.link_notify == input.link_notify ||
                    (this.link_notify != null &&
                    this.link_notify.Equals(input.link_notify))
                ) && 
                (
                    this.link_auto_reminders == input.link_auto_reminders ||
                    this.link_auto_reminders.Equals(input.link_auto_reminders)
                ) && 
                (
                    this.link_notes == input.link_notes ||
                    this.link_notes != null &&
                    input.link_notes != null &&
                    this.link_notes.SequenceEqual(input.link_notes)
                ) && 
                (
                    this.link_meta == input.link_meta ||
                    (this.link_meta != null &&
                    this.link_meta.Equals(input.link_meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.link_id != null)
                {
                    hashCode = (hashCode * 59) + this.link_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.link_amount.GetHashCode();
                if (this.link_currency != null)
                {
                    hashCode = (hashCode * 59) + this.link_currency.GetHashCode();
                }
                if (this.link_purpose != null)
                {
                    hashCode = (hashCode * 59) + this.link_purpose.GetHashCode();
                }
                if (this.customer_details != null)
                {
                    hashCode = (hashCode * 59) + this.customer_details.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.link_partial_payments.GetHashCode();
                hashCode = (hashCode * 59) + this.link_minimum_partial_amount.GetHashCode();
                if (this.link_expiry_time != null)
                {
                    hashCode = (hashCode * 59) + this.link_expiry_time.GetHashCode();
                }
                if (this.link_notify != null)
                {
                    hashCode = (hashCode * 59) + this.link_notify.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.link_auto_reminders.GetHashCode();
                if (this.link_notes != null)
                {
                    hashCode = (hashCode * 59) + this.link_notes.GetHashCode();
                }
                if (this.link_meta != null)
                {
                    hashCode = (hashCode * 59) + this.link_meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // link_id (string) maxLength
            if (this.link_id != null && this.link_id.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for link_id, length must be less than 50.", new [] { "link_id" });
            }

            // link_purpose (string) maxLength
            if (this.link_purpose != null && this.link_purpose.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for link_purpose, length must be less than 500.", new [] { "link_purpose" });
            }

            yield break;
        }
    }

}
