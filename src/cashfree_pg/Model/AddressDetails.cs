/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Address associated with the customer.
    /// </summary>
    [DataContract(Name = "AddressDetails")]
    public class AddressDetails : IEquatable<AddressDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressDetails" /> class.
        /// </summary>
        /// <param name="name">Full Name of the customer associated with the address..</param>
        /// <param name="addressLineOne">First line of the address..</param>
        /// <param name="addressLineTwo">Second line of the address..</param>
        /// <param name="country">Country Name..</param>
        /// <param name="countryCode">Country Code..</param>
        /// <param name="state">State Name..</param>
        /// <param name="stateCode">State Code..</param>
        /// <param name="city">City Name..</param>
        /// <param name="pinCode">Pin Code/Zip Code..</param>
        /// <param name="phone">Customer Phone Number..</param>
        /// <param name="email">Cutomer Email Address..</param>
        public AddressDetails(string? name = default(string?), string? addressLineOne = default(string?), string? addressLineTwo = default(string?), string? country = default(string?), string? countryCode = default(string?), string? state = default(string?), string? stateCode = default(string?), string? city = default(string?), string? pinCode = default(string?), string? phone = default(string?), string? email = default(string?))
        {
            this.name = name;
            this.address_line_one = addressLineOne;
            this.address_line_two = addressLineTwo;
            this.country = country;
            this.country_code = countryCode;
            this.state = state;
            this.state_code = stateCode;
            this.city = city;
            this.pin_code = pinCode;
            this.phone = phone;
            this.email = email;
        }

        /// <summary>
        /// Full Name of the customer associated with the address.
        /// </summary>
        /// <value>Full Name of the customer associated with the address.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string? name { get; set; }

        /// <summary>
        /// First line of the address.
        /// </summary>
        /// <value>First line of the address.</value>
        [DataMember(Name = "address_line_one", EmitDefaultValue = false)]
        public string? address_line_one { get; set; }

        /// <summary>
        /// Second line of the address.
        /// </summary>
        /// <value>Second line of the address.</value>
        [DataMember(Name = "address_line_two", EmitDefaultValue = false)]
        public string? address_line_two { get; set; }

        /// <summary>
        /// Country Name.
        /// </summary>
        /// <value>Country Name.</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string? country { get; set; }

        /// <summary>
        /// Country Code.
        /// </summary>
        /// <value>Country Code.</value>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string? country_code { get; set; }

        /// <summary>
        /// State Name.
        /// </summary>
        /// <value>State Name.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string? state { get; set; }

        /// <summary>
        /// State Code.
        /// </summary>
        /// <value>State Code.</value>
        [DataMember(Name = "state_code", EmitDefaultValue = false)]
        public string? state_code { get; set; }

        /// <summary>
        /// City Name.
        /// </summary>
        /// <value>City Name.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string? city { get; set; }

        /// <summary>
        /// Pin Code/Zip Code.
        /// </summary>
        /// <value>Pin Code/Zip Code.</value>
        [DataMember(Name = "pin_code", EmitDefaultValue = false)]
        public string? pin_code { get; set; }

        /// <summary>
        /// Customer Phone Number.
        /// </summary>
        /// <value>Customer Phone Number.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string? phone { get; set; }

        /// <summary>
        /// Cutomer Email Address.
        /// </summary>
        /// <value>Cutomer Email Address.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string? email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressDetails {\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  address_line_one: ").Append(address_line_one).Append("\n");
            sb.Append("  address_line_two: ").Append(address_line_two).Append("\n");
            sb.Append("  country: ").Append(country).Append("\n");
            sb.Append("  country_code: ").Append(country_code).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  state_code: ").Append(state_code).Append("\n");
            sb.Append("  city: ").Append(city).Append("\n");
            sb.Append("  pin_code: ").Append(pin_code).Append("\n");
            sb.Append("  phone: ").Append(phone).Append("\n");
            sb.Append("  email: ").Append(email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressDetails);
        }

        /// <summary>
        /// Returns true if AddressDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.address_line_one == input.address_line_one ||
                    (this.address_line_one != null &&
                    this.address_line_one.Equals(input.address_line_one))
                ) && 
                (
                    this.address_line_two == input.address_line_two ||
                    (this.address_line_two != null &&
                    this.address_line_two.Equals(input.address_line_two))
                ) && 
                (
                    this.country == input.country ||
                    (this.country != null &&
                    this.country.Equals(input.country))
                ) && 
                (
                    this.country_code == input.country_code ||
                    (this.country_code != null &&
                    this.country_code.Equals(input.country_code))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.state_code == input.state_code ||
                    (this.state_code != null &&
                    this.state_code.Equals(input.state_code))
                ) && 
                (
                    this.city == input.city ||
                    (this.city != null &&
                    this.city.Equals(input.city))
                ) && 
                (
                    this.pin_code == input.pin_code ||
                    (this.pin_code != null &&
                    this.pin_code.Equals(input.pin_code))
                ) && 
                (
                    this.phone == input.phone ||
                    (this.phone != null &&
                    this.phone.Equals(input.phone))
                ) && 
                (
                    this.email == input.email ||
                    (this.email != null &&
                    this.email.Equals(input.email))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringname) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringname);
            if (deserializedJsonString.ContainsKey("name")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.name != null)
                {
                    hashCode = (hashCode * 59) + this.name.GetHashCode();
                }
                if (this.address_line_one != null)
                {
                    hashCode = (hashCode * 59) + this.address_line_one.GetHashCode();
                }
                if (this.address_line_two != null)
                {
                    hashCode = (hashCode * 59) + this.address_line_two.GetHashCode();
                }
                if (this.country != null)
                {
                    hashCode = (hashCode * 59) + this.country.GetHashCode();
                }
                if (this.country_code != null)
                {
                    hashCode = (hashCode * 59) + this.country_code.GetHashCode();
                }
                if (this.state != null)
                {
                    hashCode = (hashCode * 59) + this.state.GetHashCode();
                }
                if (this.state_code != null)
                {
                    hashCode = (hashCode * 59) + this.state_code.GetHashCode();
                }
                if (this.city != null)
                {
                    hashCode = (hashCode * 59) + this.city.GetHashCode();
                }
                if (this.pin_code != null)
                {
                    hashCode = (hashCode * 59) + this.pin_code.GetHashCode();
                }
                if (this.phone != null)
                {
                    hashCode = (hashCode * 59) + this.phone.GetHashCode();
                }
                if (this.email != null)
                {
                    hashCode = (hashCode * 59) + this.email.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
