/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Details of the authorization done for the subscription. Returned in Get subscription and auth payments.
    /// </summary>
    [DataContract(Name = "AuthorizationDetails")]
    public class AuthorizationDetails : IEquatable<AuthorizationDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationDetails" /> class.
        /// </summary>
        /// <param name="authorizationAmount">Authorization amount for the auth payment..</param>
        /// <param name="authorizationAmountRefund">Indicates whether the authorization amount should be refunded to the customer automatically. Merchants can use this field to specify if the authorized funds should be returned to the customer after authorization of the subscription..</param>
        /// <param name="authorizationReference">Authorization reference. UMN for UPI, UMRN for EMandate/Physical Mandate and Enrollment ID for cards..</param>
        /// <param name="authorizationTime">Authorization time..</param>
        /// <param name="authorizationStatus">Status of the authorization..</param>
        /// <param name="paymentId">A unique ID passed by merchant for identifying the transaction..</param>
        /// <param name="paymentMethod">Payment method used for the authorization..</param>
        public AuthorizationDetails(decimal? authorizationAmount = default(decimal?), bool? authorizationAmountRefund = default(bool?), string? authorizationReference = default(string?), string? authorizationTime = default(string?), string? authorizationStatus = default(string?), string? paymentId = default(string?), string? paymentMethod = default(string?))
        {
            this.authorization_amount = authorizationAmount;
            this.authorization_amount_refund = authorizationAmountRefund;
            this.authorization_reference = authorizationReference;
            this.authorization_time = authorizationTime;
            this.authorization_status = authorizationStatus;
            this.payment_id = paymentId;
            this.payment_method = paymentMethod;
        }

        /// <summary>
        /// Authorization amount for the auth payment.
        /// </summary>
        /// <value>Authorization amount for the auth payment.</value>
        [DataMember(Name = "authorization_amount", EmitDefaultValue = false)]
        public decimal? authorization_amount { get; set; }

        /// <summary>
        /// Indicates whether the authorization amount should be refunded to the customer automatically. Merchants can use this field to specify if the authorized funds should be returned to the customer after authorization of the subscription.
        /// </summary>
        /// <value>Indicates whether the authorization amount should be refunded to the customer automatically. Merchants can use this field to specify if the authorized funds should be returned to the customer after authorization of the subscription.</value>
        [DataMember(Name = "authorization_amount_refund", EmitDefaultValue = true)]
        public bool? authorization_amount_refund { get; set; }

        /// <summary>
        /// Authorization reference. UMN for UPI, UMRN for EMandate/Physical Mandate and Enrollment ID for cards.
        /// </summary>
        /// <value>Authorization reference. UMN for UPI, UMRN for EMandate/Physical Mandate and Enrollment ID for cards.</value>
        [DataMember(Name = "authorization_reference", EmitDefaultValue = false)]
        public string? authorization_reference { get; set; }

        /// <summary>
        /// Authorization time.
        /// </summary>
        /// <value>Authorization time.</value>
        [DataMember(Name = "authorization_time", EmitDefaultValue = false)]
        public string? authorization_time { get; set; }

        /// <summary>
        /// Status of the authorization.
        /// </summary>
        /// <value>Status of the authorization.</value>
        [DataMember(Name = "authorization_status", EmitDefaultValue = false)]
        public string? authorization_status { get; set; }

        /// <summary>
        /// A unique ID passed by merchant for identifying the transaction.
        /// </summary>
        /// <value>A unique ID passed by merchant for identifying the transaction.</value>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string? payment_id { get; set; }

        /// <summary>
        /// Payment method used for the authorization.
        /// </summary>
        /// <value>Payment method used for the authorization.</value>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public string? payment_method { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizationDetails {\n");
            sb.Append("  authorization_amount: ").Append(authorization_amount).Append("\n");
            sb.Append("  authorization_amount_refund: ").Append(authorization_amount_refund).Append("\n");
            sb.Append("  authorization_reference: ").Append(authorization_reference).Append("\n");
            sb.Append("  authorization_time: ").Append(authorization_time).Append("\n");
            sb.Append("  authorization_status: ").Append(authorization_status).Append("\n");
            sb.Append("  payment_id: ").Append(payment_id).Append("\n");
            sb.Append("  payment_method: ").Append(payment_method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizationDetails);
        }

        /// <summary>
        /// Returns true if AuthorizationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.authorization_amount == input.authorization_amount ||
                    this.authorization_amount.Equals(input.authorization_amount)
                ) && 
                (
                    this.authorization_amount_refund == input.authorization_amount_refund ||
                    this.authorization_amount_refund.Equals(input.authorization_amount_refund)
                ) && 
                (
                    this.authorization_reference == input.authorization_reference ||
                    (this.authorization_reference != null &&
                    this.authorization_reference.Equals(input.authorization_reference))
                ) && 
                (
                    this.authorization_time == input.authorization_time ||
                    (this.authorization_time != null &&
                    this.authorization_time.Equals(input.authorization_time))
                ) && 
                (
                    this.authorization_status == input.authorization_status ||
                    (this.authorization_status != null &&
                    this.authorization_status.Equals(input.authorization_status))
                ) && 
                (
                    this.payment_id == input.payment_id ||
                    (this.payment_id != null &&
                    this.payment_id.Equals(input.payment_id))
                ) && 
                (
                    this.payment_method == input.payment_method ||
                    (this.payment_method != null &&
                    this.payment_method.Equals(input.payment_method))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringauthorization_amount) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringauthorization_amount);
            if (deserializedJsonString.ContainsKey("authorization_amount")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.authorization_amount.GetHashCode();
                hashCode = (hashCode * 59) + this.authorization_amount_refund.GetHashCode();
                if (this.authorization_reference != null)
                {
                    hashCode = (hashCode * 59) + this.authorization_reference.GetHashCode();
                }
                if (this.authorization_time != null)
                {
                    hashCode = (hashCode * 59) + this.authorization_time.GetHashCode();
                }
                if (this.authorization_status != null)
                {
                    hashCode = (hashCode * 59) + this.authorization_status.GetHashCode();
                }
                if (this.payment_id != null)
                {
                    hashCode = (hashCode * 59) + this.payment_id.GetHashCode();
                }
                if (this.payment_method != null)
                {
                    hashCode = (hashCode * 59) + this.payment_method.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
