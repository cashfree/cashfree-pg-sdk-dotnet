/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// The authorization details are present for payments which go through the preauthorization workflow. Or else this parameter will be null.
    /// </summary>
    [DataContract(Name = "CFAuthorizationInPaymentsEntity")]
    public partial class CFAuthorizationInPaymentsEntity : IEquatable<CFAuthorizationInPaymentsEntity>, IValidatableObject
    {
        /// <summary>
        /// One of CAPTURE or VOID
        /// </summary>
        /// <value>One of CAPTURE or VOID</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum CAPTURE for value: CAPTURE
            /// </summary>
            [EnumMember(Value = "CAPTURE")]
            CAPTURE = 1,

            /// <summary>
            /// Enum VOID for value: VOID
            /// </summary>
            [EnumMember(Value = "VOID")]
            VOID = 2

        }


        /// <summary>
        /// One of CAPTURE or VOID
        /// </summary>
        /// <value>One of CAPTURE or VOID</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// One of SUCCESS or PENDING
        /// </summary>
        /// <value>One of SUCCESS or PENDING</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 2

        }


        /// <summary>
        /// One of SUCCESS or PENDING
        /// </summary>
        /// <value>One of SUCCESS or PENDING</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFAuthorizationInPaymentsEntity" /> class.
        /// </summary>
        /// <param name="action">One of CAPTURE or VOID.</param>
        /// <param name="status">One of SUCCESS or PENDING.</param>
        /// <param name="capturedAmount">The captured amount for this authorization request.</param>
        /// <param name="startTime">Start time of this authorization hold (only for UPI).</param>
        /// <param name="endTime">End time of this authorization hold (only for UPI).</param>
        /// <param name="approveBy">Approve by time as passed in the authorization request (only for UPI).</param>
        public CFAuthorizationInPaymentsEntity(ActionEnum? action = default(ActionEnum?), StatusEnum? status = default(StatusEnum?), decimal capturedAmount = default(decimal), string? startTime = default(string?), string? endTime = default(string?), string? approveBy = default(string?))
        {
            this.Action = action;
            this.Status = status;
            this.CapturedAmount = capturedAmount;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.ApproveBy = approveBy;
        }

        /// <summary>
        /// The captured amount for this authorization request
        /// </summary>
        /// <value>The captured amount for this authorization request</value>
        [DataMember(Name = "captured_amount", EmitDefaultValue = false)]
        public decimal CapturedAmount { get; set; }

        /// <summary>
        /// Start time of this authorization hold (only for UPI)
        /// </summary>
        /// <value>Start time of this authorization hold (only for UPI)</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public string? StartTime { get; set; }

        /// <summary>
        /// End time of this authorization hold (only for UPI)
        /// </summary>
        /// <value>End time of this authorization hold (only for UPI)</value>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public string? EndTime { get; set; }

        /// <summary>
        /// Approve by time as passed in the authorization request (only for UPI)
        /// </summary>
        /// <value>Approve by time as passed in the authorization request (only for UPI)</value>
        [DataMember(Name = "approve_by", EmitDefaultValue = false)]
        public string? ApproveBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFAuthorizationInPaymentsEntity {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CapturedAmount: ").Append(CapturedAmount).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ApproveBy: ").Append(ApproveBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFAuthorizationInPaymentsEntity);
        }

        /// <summary>
        /// Returns true if CFAuthorizationInPaymentsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of CFAuthorizationInPaymentsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFAuthorizationInPaymentsEntity? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CapturedAmount == input.CapturedAmount ||
                    this.CapturedAmount.Equals(input.CapturedAmount)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.ApproveBy == input.ApproveBy ||
                    (this.ApproveBy != null &&
                    this.ApproveBy.Equals(input.ApproveBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.CapturedAmount.GetHashCode();
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.ApproveBy != null)
                {
                    hashCode = (hashCode * 59) + this.ApproveBy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
