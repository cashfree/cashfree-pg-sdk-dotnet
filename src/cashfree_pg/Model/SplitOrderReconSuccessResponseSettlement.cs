/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Details of the settlement information.
    /// </summary>
    [DataContract(Name = "SplitOrderReconSuccessResponse_settlement")]
    public class SplitOrderReconSuccessResponseSettlement : IEquatable<SplitOrderReconSuccessResponseSettlement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitOrderReconSuccessResponseSettlement" /> class.
        /// </summary>
        /// <param name="entity">Type of entity. Example: \&quot;settlement\&quot;..</param>
        /// <param name="cfSettlementId">Unique Cashfree settlement ID..</param>
        /// <param name="cfPaymentId">Unique Cashfree payment ID associated with the order..</param>
        /// <param name="orderId">Unique identifier for the order..</param>
        /// <param name="orderCurrency">Currency of the order. Example: \&quot;INR\&quot;..</param>
        /// <param name="transferId">Unique transfer ID if available, otherwise null..</param>
        /// <param name="orderAmount">Total amount of the order..</param>
        /// <param name="serviceCharge">Service charge for the order..</param>
        /// <param name="serviceTax">Service tax for the order..</param>
        /// <param name="settlementAmount">Amount to be settled after charges and tax..</param>
        /// <param name="settlementCurrency">Currency of the settlement. Example: \&quot;INR\&quot;..</param>
        /// <param name="transferUtr">UTR (Unique Transaction Reference) for the transfer if available, otherwise null..</param>
        /// <param name="transferTime">Time of transfer if available, otherwise null..</param>
        /// <param name="paymentTime">Timestamp when payment was made..</param>
        public SplitOrderReconSuccessResponseSettlement(string? entity = default(string?), long? cfSettlementId = default(long?), long? cfPaymentId = default(long?), string? orderId = default(string?), string? orderCurrency = default(string?), string? transferId = default(string?), decimal? orderAmount = default(decimal?), decimal? serviceCharge = default(decimal?), decimal? serviceTax = default(decimal?), decimal? settlementAmount = default(decimal?), string? settlementCurrency = default(string?), string? transferUtr = default(string?), DateTime?? transferTime = default(DateTime??), DateTime? paymentTime = default(DateTime?))
        {
            this.entity = entity;
            this.cf_settlement_id = cfSettlementId;
            this.cf_payment_id = cfPaymentId;
            this.order_id = orderId;
            this.order_currency = orderCurrency;
            this.transfer_id = transferId;
            this.order_amount = orderAmount;
            this.service_charge = serviceCharge;
            this.service_tax = serviceTax;
            this.settlement_amount = settlementAmount;
            this.settlement_currency = settlementCurrency;
            this.transfer_utr = transferUtr;
            this.transfer_time = transferTime;
            this.payment_time = paymentTime;
        }

        /// <summary>
        /// Type of entity. Example: \&quot;settlement\&quot;.
        /// </summary>
        /// <value>Type of entity. Example: \&quot;settlement\&quot;.</value>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string? entity { get; set; }

        /// <summary>
        /// Unique Cashfree settlement ID.
        /// </summary>
        /// <value>Unique Cashfree settlement ID.</value>
        [DataMember(Name = "cf_settlement_id", EmitDefaultValue = false)]
        public long? cf_settlement_id { get; set; }

        /// <summary>
        /// Unique Cashfree payment ID associated with the order.
        /// </summary>
        /// <value>Unique Cashfree payment ID associated with the order.</value>
        [DataMember(Name = "cf_payment_id", EmitDefaultValue = false)]
        public long? cf_payment_id { get; set; }

        /// <summary>
        /// Unique identifier for the order.
        /// </summary>
        /// <value>Unique identifier for the order.</value>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string? order_id { get; set; }

        /// <summary>
        /// Currency of the order. Example: \&quot;INR\&quot;.
        /// </summary>
        /// <value>Currency of the order. Example: \&quot;INR\&quot;.</value>
        [DataMember(Name = "order_currency", EmitDefaultValue = false)]
        public string? order_currency { get; set; }

        /// <summary>
        /// Unique transfer ID if available, otherwise null.
        /// </summary>
        /// <value>Unique transfer ID if available, otherwise null.</value>
        [DataMember(Name = "transfer_id", EmitDefaultValue = true)]
        public string? transfer_id { get; set; }

        /// <summary>
        /// Total amount of the order.
        /// </summary>
        /// <value>Total amount of the order.</value>
        [DataMember(Name = "order_amount", EmitDefaultValue = false)]
        public decimal? order_amount { get; set; }

        /// <summary>
        /// Service charge for the order.
        /// </summary>
        /// <value>Service charge for the order.</value>
        [DataMember(Name = "service_charge", EmitDefaultValue = false)]
        public decimal? service_charge { get; set; }

        /// <summary>
        /// Service tax for the order.
        /// </summary>
        /// <value>Service tax for the order.</value>
        [DataMember(Name = "service_tax", EmitDefaultValue = false)]
        public decimal? service_tax { get; set; }

        /// <summary>
        /// Amount to be settled after charges and tax.
        /// </summary>
        /// <value>Amount to be settled after charges and tax.</value>
        [DataMember(Name = "settlement_amount", EmitDefaultValue = false)]
        public decimal? settlement_amount { get; set; }

        /// <summary>
        /// Currency of the settlement. Example: \&quot;INR\&quot;.
        /// </summary>
        /// <value>Currency of the settlement. Example: \&quot;INR\&quot;.</value>
        [DataMember(Name = "settlement_currency", EmitDefaultValue = false)]
        public string? settlement_currency { get; set; }

        /// <summary>
        /// UTR (Unique Transaction Reference) for the transfer if available, otherwise null.
        /// </summary>
        /// <value>UTR (Unique Transaction Reference) for the transfer if available, otherwise null.</value>
        [DataMember(Name = "transfer_utr", EmitDefaultValue = true)]
        public string? transfer_utr { get; set; }

        /// <summary>
        /// Time of transfer if available, otherwise null.
        /// </summary>
        /// <value>Time of transfer if available, otherwise null.</value>
        [DataMember(Name = "transfer_time", EmitDefaultValue = true)]
        public DateTime?? transfer_time { get; set; }

        /// <summary>
        /// Timestamp when payment was made.
        /// </summary>
        /// <value>Timestamp when payment was made.</value>
        [DataMember(Name = "payment_time", EmitDefaultValue = false)]
        public DateTime? payment_time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SplitOrderReconSuccessResponseSettlement {\n");
            sb.Append("  entity: ").Append(entity).Append("\n");
            sb.Append("  cf_settlement_id: ").Append(cf_settlement_id).Append("\n");
            sb.Append("  cf_payment_id: ").Append(cf_payment_id).Append("\n");
            sb.Append("  order_id: ").Append(order_id).Append("\n");
            sb.Append("  order_currency: ").Append(order_currency).Append("\n");
            sb.Append("  transfer_id: ").Append(transfer_id).Append("\n");
            sb.Append("  order_amount: ").Append(order_amount).Append("\n");
            sb.Append("  service_charge: ").Append(service_charge).Append("\n");
            sb.Append("  service_tax: ").Append(service_tax).Append("\n");
            sb.Append("  settlement_amount: ").Append(settlement_amount).Append("\n");
            sb.Append("  settlement_currency: ").Append(settlement_currency).Append("\n");
            sb.Append("  transfer_utr: ").Append(transfer_utr).Append("\n");
            sb.Append("  transfer_time: ").Append(transfer_time).Append("\n");
            sb.Append("  payment_time: ").Append(payment_time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitOrderReconSuccessResponseSettlement);
        }

        /// <summary>
        /// Returns true if SplitOrderReconSuccessResponseSettlement instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitOrderReconSuccessResponseSettlement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitOrderReconSuccessResponseSettlement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.entity == input.entity ||
                    (this.entity != null &&
                    this.entity.Equals(input.entity))
                ) && 
                (
                    this.cf_settlement_id == input.cf_settlement_id ||
                    this.cf_settlement_id.Equals(input.cf_settlement_id)
                ) && 
                (
                    this.cf_payment_id == input.cf_payment_id ||
                    this.cf_payment_id.Equals(input.cf_payment_id)
                ) && 
                (
                    this.order_id == input.order_id ||
                    (this.order_id != null &&
                    this.order_id.Equals(input.order_id))
                ) && 
                (
                    this.order_currency == input.order_currency ||
                    (this.order_currency != null &&
                    this.order_currency.Equals(input.order_currency))
                ) && 
                (
                    this.transfer_id == input.transfer_id ||
                    (this.transfer_id != null &&
                    this.transfer_id.Equals(input.transfer_id))
                ) && 
                (
                    this.order_amount == input.order_amount ||
                    this.order_amount.Equals(input.order_amount)
                ) && 
                (
                    this.service_charge == input.service_charge ||
                    this.service_charge.Equals(input.service_charge)
                ) && 
                (
                    this.service_tax == input.service_tax ||
                    this.service_tax.Equals(input.service_tax)
                ) && 
                (
                    this.settlement_amount == input.settlement_amount ||
                    this.settlement_amount.Equals(input.settlement_amount)
                ) && 
                (
                    this.settlement_currency == input.settlement_currency ||
                    (this.settlement_currency != null &&
                    this.settlement_currency.Equals(input.settlement_currency))
                ) && 
                (
                    this.transfer_utr == input.transfer_utr ||
                    (this.transfer_utr != null &&
                    this.transfer_utr.Equals(input.transfer_utr))
                ) && 
                (
                    this.transfer_time == input.transfer_time ||
                    (this.transfer_time != null &&
                    this.transfer_time.Equals(input.transfer_time))
                ) && 
                (
                    this.payment_time == input.payment_time ||
                    (this.payment_time != null &&
                    this.payment_time.Equals(input.payment_time))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringentity) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringentity);
            if (deserializedJsonString.ContainsKey("entity")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.entity != null)
                {
                    hashCode = (hashCode * 59) + this.entity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.cf_settlement_id.GetHashCode();
                hashCode = (hashCode * 59) + this.cf_payment_id.GetHashCode();
                if (this.order_id != null)
                {
                    hashCode = (hashCode * 59) + this.order_id.GetHashCode();
                }
                if (this.order_currency != null)
                {
                    hashCode = (hashCode * 59) + this.order_currency.GetHashCode();
                }
                if (this.transfer_id != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.order_amount.GetHashCode();
                hashCode = (hashCode * 59) + this.service_charge.GetHashCode();
                hashCode = (hashCode * 59) + this.service_tax.GetHashCode();
                hashCode = (hashCode * 59) + this.settlement_amount.GetHashCode();
                if (this.settlement_currency != null)
                {
                    hashCode = (hashCode * 59) + this.settlement_currency.GetHashCode();
                }
                if (this.transfer_utr != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_utr.GetHashCode();
                }
                if (this.transfer_time != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_time.GetHashCode();
                }
                if (this.payment_time != null)
                {
                    hashCode = (hashCode * 59) + this.payment_time.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
