/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFRefundRequest
    /// </summary>
    [DataContract(Name = "CFRefundRequest")]
    public partial class CFRefundRequest : IEquatable<CFRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CFRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFRefundRequest" /> class.
        /// </summary>
        /// <param name="refundAmount">Amount to be refunded. Should be lesser than or equal to the transaction amount. (Decimals allowed) (required).</param>
        /// <param name="refundId">An unique ID to associate the refund with. Provie alphanumeric values (required).</param>
        /// <param name="refundNote">A refund note for your reference..</param>
        /// <param name="refundSplits">refundSplits.</param>
        public CFRefundRequest(double? refundAmount = default(double?), string? refundId = default(string?), string? refundNote = default(string?), List<CFVendorSplit>? refundSplits = default(List<CFVendorSplit>?))
        {
            this.RefundAmount = refundAmount;
            // to ensure "refundId" is required (not null)
            if (refundId == null) {
                throw new ArgumentNullException("refundId is a required property for CFRefundRequest and cannot be null");
            }
            this.RefundId = refundId;
            this.RefundNote = refundNote;
            this.RefundSplits = refundSplits;
        }

        /// <summary>
        /// Amount to be refunded. Should be lesser than or equal to the transaction amount. (Decimals allowed)
        /// </summary>
        /// <value>Amount to be refunded. Should be lesser than or equal to the transaction amount. (Decimals allowed)</value>
        [DataMember(Name = "refund_amount", IsRequired = true, EmitDefaultValue = false)]
        public double? RefundAmount { get; set; }

        /// <summary>
        /// An unique ID to associate the refund with. Provie alphanumeric values
        /// </summary>
        /// <value>An unique ID to associate the refund with. Provie alphanumeric values</value>
        [DataMember(Name = "refund_id", IsRequired = true, EmitDefaultValue = false)]
        public string? RefundId { get; set; }

        /// <summary>
        /// A refund note for your reference.
        /// </summary>
        /// <value>A refund note for your reference.</value>
        [DataMember(Name = "refund_note", EmitDefaultValue = false)]
        public string? RefundNote { get; set; }

        /// <summary>
        /// Gets or Sets RefundSplits
        /// </summary>
        [DataMember(Name = "refund_splits", EmitDefaultValue = false)]
        public List<CFVendorSplit>? RefundSplits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFRefundRequest {\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  RefundId: ").Append(RefundId).Append("\n");
            sb.Append("  RefundNote: ").Append(RefundNote).Append("\n");
            sb.Append("  RefundSplits: ").Append(RefundSplits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFRefundRequest);
        }

        /// <summary>
        /// Returns true if CFRefundRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CFRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFRefundRequest? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RefundAmount == input.RefundAmount ||
                    this.RefundAmount.Equals(input.RefundAmount)
                ) && 
                (
                    this.RefundId == input.RefundId ||
                    (this.RefundId != null &&
                    this.RefundId.Equals(input.RefundId))
                ) && 
                (
                    this.RefundNote == input.RefundNote ||
                    (this.RefundNote != null &&
                    this.RefundNote.Equals(input.RefundNote))
                ) && 
                (
                    this.RefundSplits == input.RefundSplits ||
                    this.RefundSplits != null &&
                    input.RefundSplits != null &&
                    this.RefundSplits.SequenceEqual(input.RefundSplits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RefundAmount.GetHashCode();
                if (this.RefundId != null)
                {
                    hashCode = (hashCode * 59) + this.RefundId.GetHashCode();
                }
                if (this.RefundNote != null)
                {
                    hashCode = (hashCode * 59) + this.RefundNote.GetHashCode();
                }
                if (this.RefundSplits != null)
                {
                    hashCode = (hashCode * 59) + this.RefundSplits.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // RefundId (string) maxLength
            if (this.RefundId != null && this.RefundId.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefundId, length must be less than 40.", new [] { "RefundId" });
            }

            // RefundId (string) minLength
            if (this.RefundId != null && this.RefundId.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefundId, length must be greater than 3.", new [] { "RefundId" });
            }

            // RefundNote (string) maxLength
            if (this.RefundNote != null && this.RefundNote.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefundNote, length must be less than 100.", new [] { "RefundNote" });
            }

            // RefundNote (string) minLength
            if (this.RefundNote != null && this.RefundNote.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefundNote, length must be greater than 3.", new [] { "RefundNote" });
            }

            yield break;
        }
    }

}
