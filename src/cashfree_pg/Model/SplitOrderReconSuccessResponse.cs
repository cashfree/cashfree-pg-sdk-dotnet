/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Split Order Reconciliation Request Body
    /// </summary>
    [DataContract(Name = "SplitOrderReconSuccessResponse")]
    public class SplitOrderReconSuccessResponse : IEquatable<SplitOrderReconSuccessResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitOrderReconSuccessResponse" /> class.
        /// </summary>
        /// <param name="settlement">settlement.</param>
        /// <param name="refunds">List of refunds associated with the order, if any..</param>
        /// <param name="vendors">List of vendor settlements associated with the split settlement..</param>
        public SplitOrderReconSuccessResponse(SplitOrderReconSuccessResponseSettlement? settlement = default(SplitOrderReconSuccessResponseSettlement?), List<Object>? refunds = default(List<Object>?), List<SplitOrderReconSuccessResponseVendorsInner>? vendors = default(List<SplitOrderReconSuccessResponseVendorsInner>?))
        {
            this.settlement = settlement;
            this.refunds = refunds;
            this.vendors = vendors;
        }

        /// <summary>
        /// Gets or Sets settlement
        /// </summary>
        [DataMember(Name = "settlement", EmitDefaultValue = false)]
        public SplitOrderReconSuccessResponseSettlement? settlement { get; set; }

        /// <summary>
        /// List of refunds associated with the order, if any.
        /// </summary>
        /// <value>List of refunds associated with the order, if any.</value>
        [DataMember(Name = "refunds", EmitDefaultValue = false)]
        public List<Object>? refunds { get; set; }

        /// <summary>
        /// List of vendor settlements associated with the split settlement.
        /// </summary>
        /// <value>List of vendor settlements associated with the split settlement.</value>
        [DataMember(Name = "vendors", EmitDefaultValue = false)]
        public List<SplitOrderReconSuccessResponseVendorsInner>? vendors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SplitOrderReconSuccessResponse {\n");
            sb.Append("  settlement: ").Append(settlement).Append("\n");
            sb.Append("  refunds: ").Append(refunds).Append("\n");
            sb.Append("  vendors: ").Append(vendors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitOrderReconSuccessResponse);
        }

        /// <summary>
        /// Returns true if SplitOrderReconSuccessResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitOrderReconSuccessResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitOrderReconSuccessResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.settlement == input.settlement ||
                    (this.settlement != null &&
                    this.settlement.Equals(input.settlement))
                ) && 
                (
                    this.refunds == input.refunds ||
                    this.refunds != null &&
                    input.refunds != null &&
                    this.refunds.SequenceEqual(input.refunds)
                ) && 
                (
                    this.vendors == input.vendors ||
                    this.vendors != null &&
                    input.vendors != null &&
                    this.vendors.SequenceEqual(input.vendors)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringsettlement) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringsettlement);
            if (deserializedJsonString.ContainsKey("settlement")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.settlement != null)
                {
                    hashCode = (hashCode * 59) + this.settlement.GetHashCode();
                }
                if (this.refunds != null)
                {
                    hashCode = (hashCode * 59) + this.refunds.GetHashCode();
                }
                if (this.vendors != null)
                {
                    hashCode = (hashCode * 59) + this.vendors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
