/*
 * New Payment Gateway APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfreepg.Client.OpenAPIDateConverter;

namespace cashfreepg.Model
{
    /// <summary>
    /// CFOrderPayResponse
    /// </summary>
    [DataContract(Name = "CFOrderPayResponse")]
    public partial class CFOrderPayResponse : IEquatable<CFOrderPayResponse>, IValidatableObject
    {
        /// <summary>
        /// One of [\&quot;upi\&quot;, \&quot;netbanking\&quot;, \&quot;card\&quot;, \&quot;app\&quot;, \&quot;cardless_emi\&quot;, \&quot;paylater\&quot;] 
        /// </summary>
        /// <value>One of [\&quot;upi\&quot;, \&quot;netbanking\&quot;, \&quot;card\&quot;, \&quot;app\&quot;, \&quot;cardless_emi\&quot;, \&quot;paylater\&quot;] </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            /// <summary>
            /// Enum Netbanking for value: netbanking
            /// </summary>
            [EnumMember(Value = "netbanking")]
            Netbanking = 1,

            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 2,

            /// <summary>
            /// Enum Upi for value: upi
            /// </summary>
            [EnumMember(Value = "upi")]
            Upi = 3,

            /// <summary>
            /// Enum App for value: app
            /// </summary>
            [EnumMember(Value = "app")]
            App = 4,

            /// <summary>
            /// Enum CardlessEmi for value: cardless_emi
            /// </summary>
            [EnumMember(Value = "cardless_emi")]
            CardlessEmi = 5,

            /// <summary>
            /// Enum Paylater for value: paylater
            /// </summary>
            [EnumMember(Value = "paylater")]
            Paylater = 6

        }


        /// <summary>
        /// One of [\&quot;upi\&quot;, \&quot;netbanking\&quot;, \&quot;card\&quot;, \&quot;app\&quot;, \&quot;cardless_emi\&quot;, \&quot;paylater\&quot;] 
        /// </summary>
        /// <value>One of [\&quot;upi\&quot;, \&quot;netbanking\&quot;, \&quot;card\&quot;, \&quot;app\&quot;, \&quot;cardless_emi\&quot;, \&quot;paylater\&quot;] </value>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// One of [\&quot;link\&quot;, \&quot;collect\&quot;, \&quot;qrcode\&quot;]. In an older version we used to support different channels like &#39;gpay&#39;, &#39;phonepe&#39; etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as &#39;link&#39; and provider as &#39;gpay&#39;
        /// </summary>
        /// <value>One of [\&quot;link\&quot;, \&quot;collect\&quot;, \&quot;qrcode\&quot;]. In an older version we used to support different channels like &#39;gpay&#39;, &#39;phonepe&#39; etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as &#39;link&#39; and provider as &#39;gpay&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            [EnumMember(Value = "link")]
            Link = 1,

            /// <summary>
            /// Enum Collect for value: collect
            /// </summary>
            [EnumMember(Value = "collect")]
            Collect = 2,

            /// <summary>
            /// Enum Qrcode for value: qrcode
            /// </summary>
            [EnumMember(Value = "qrcode")]
            Qrcode = 3

        }


        /// <summary>
        /// One of [\&quot;link\&quot;, \&quot;collect\&quot;, \&quot;qrcode\&quot;]. In an older version we used to support different channels like &#39;gpay&#39;, &#39;phonepe&#39; etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as &#39;link&#39; and provider as &#39;gpay&#39;
        /// </summary>
        /// <value>One of [\&quot;link\&quot;, \&quot;collect\&quot;, \&quot;qrcode\&quot;]. In an older version we used to support different channels like &#39;gpay&#39;, &#39;phonepe&#39; etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as &#39;link&#39; and provider as &#39;gpay&#39;</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public ChannelEnum? Channel { get; set; }
        /// <summary>
        /// One of [\&quot;link\&quot;, \&quot;custom\&quot;, \&quot;form\&quot;]
        /// </summary>
        /// <value>One of [\&quot;link\&quot;, \&quot;custom\&quot;, \&quot;form\&quot;]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            [EnumMember(Value = "link")]
            Link = 1,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 2,

            /// <summary>
            /// Enum Form for value: form
            /// </summary>
            [EnumMember(Value = "form")]
            Form = 3

        }


        /// <summary>
        /// One of [\&quot;link\&quot;, \&quot;custom\&quot;, \&quot;form\&quot;]
        /// </summary>
        /// <value>One of [\&quot;link\&quot;, \&quot;custom\&quot;, \&quot;form\&quot;]</value>
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CFOrderPayResponse" /> class.
        /// </summary>
        /// <param name="cfPaymentId">Payment identifier created by Cashfree.</param>
        /// <param name="paymentMethod">One of [\&quot;upi\&quot;, \&quot;netbanking\&quot;, \&quot;card\&quot;, \&quot;app\&quot;, \&quot;cardless_emi\&quot;, \&quot;paylater\&quot;] .</param>
        /// <param name="channel">One of [\&quot;link\&quot;, \&quot;collect\&quot;, \&quot;qrcode\&quot;]. In an older version we used to support different channels like &#39;gpay&#39;, &#39;phonepe&#39; etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as &#39;link&#39; and provider as &#39;gpay&#39;.</param>
        /// <param name="action">One of [\&quot;link\&quot;, \&quot;custom\&quot;, \&quot;form\&quot;].</param>
        /// <param name="data">data.</param>
        public CFOrderPayResponse(int? cfPaymentId = default(int?), PaymentMethodEnum? paymentMethod = default(PaymentMethodEnum?), ChannelEnum? channel = default(ChannelEnum?), ActionEnum? action = default(ActionEnum?), CFOrderPayData? data = default(CFOrderPayData?))
        {
            this.CfPaymentId = cfPaymentId;
            this.PaymentMethod = paymentMethod;
            this.Channel = channel;
            this.Action = action;
            this.Data = data;
        }

        /// <summary>
        /// Payment identifier created by Cashfree
        /// </summary>
        /// <value>Payment identifier created by Cashfree</value>
        [DataMember(Name = "cf_payment_id", EmitDefaultValue = false)]
        public int? CfPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public CFOrderPayData? Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CFOrderPayResponse {\n");
            sb.Append("  CfPaymentId: ").Append(CfPaymentId).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as CFOrderPayResponse);
        }

        /// <summary>
        /// Returns true if CFOrderPayResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CFOrderPayResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFOrderPayResponse? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CfPaymentId == input.CfPaymentId ||
                    this.CfPaymentId.Equals(input.CfPaymentId)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    this.PaymentMethod.Equals(input.PaymentMethod)
                ) && 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CfPaymentId.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
