/*
 * Cashfree Payment Gateway APIs
 *
 * Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2025-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_pg.Client.OpenAPIDateConverter;

namespace cashfree_pg.Model
{
    /// <summary>
    /// Fetch Static QR Codes using terminal ID or phone number
    /// </summary>
    [DataContract(Name = "FetchTerminalQRCodesEntity")]
    public class FetchTerminalQRCodesEntity : IEquatable<FetchTerminalQRCodesEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchTerminalQRCodesEntity" /> class.
        /// </summary>
        /// <param name="bank">Name of the bank that is linked to the Static QR..</param>
        /// <param name="qrCode">Base-64 Encoded QR Code URL.</param>
        /// <param name="qrCodeUrl">URL of the qr Code..</param>
        /// <param name="status">Status of the static QR..</param>
        public FetchTerminalQRCodesEntity(string? bank = default(string?), string? qrCode = default(string?), string? qrCodeUrl = default(string?), string? status = default(string?))
        {
            this.bank = bank;
            this.qrCode = qrCode;
            this.qrCodeUrl = qrCodeUrl;
            this.status = status;
        }

        /// <summary>
        /// Name of the bank that is linked to the Static QR.
        /// </summary>
        /// <value>Name of the bank that is linked to the Static QR.</value>
        [DataMember(Name = "bank", EmitDefaultValue = false)]
        public string? bank { get; set; }

        /// <summary>
        /// Base-64 Encoded QR Code URL
        /// </summary>
        /// <value>Base-64 Encoded QR Code URL</value>
        [DataMember(Name = "qrCode", EmitDefaultValue = false)]
        public string? qrCode { get; set; }

        /// <summary>
        /// URL of the qr Code.
        /// </summary>
        /// <value>URL of the qr Code.</value>
        [DataMember(Name = "qrCodeUrl", EmitDefaultValue = false)]
        public string? qrCodeUrl { get; set; }

        /// <summary>
        /// Status of the static QR.
        /// </summary>
        /// <value>Status of the static QR.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string? status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FetchTerminalQRCodesEntity {\n");
            sb.Append("  bank: ").Append(bank).Append("\n");
            sb.Append("  qrCode: ").Append(qrCode).Append("\n");
            sb.Append("  qrCodeUrl: ").Append(qrCodeUrl).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FetchTerminalQRCodesEntity);
        }

        /// <summary>
        /// Returns true if FetchTerminalQRCodesEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of FetchTerminalQRCodesEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FetchTerminalQRCodesEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.bank == input.bank ||
                    (this.bank != null &&
                    this.bank.Equals(input.bank))
                ) && 
                (
                    this.qrCode == input.qrCode ||
                    (this.qrCode != null &&
                    this.qrCode.Equals(input.qrCode))
                ) && 
                (
                    this.qrCodeUrl == input.qrCodeUrl ||
                    (this.qrCodeUrl != null &&
                    this.qrCodeUrl.Equals(input.qrCodeUrl))
                ) && 
                (
                    this.status == input.status ||
                    (this.status != null &&
                    this.status.Equals(input.status))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringbank) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringbank);
            if (deserializedJsonString.ContainsKey("bank")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.bank != null)
                {
                    hashCode = (hashCode * 59) + this.bank.GetHashCode();
                }
                if (this.qrCode != null)
                {
                    hashCode = (hashCode * 59) + this.qrCode.GetHashCode();
                }
                if (this.qrCodeUrl != null)
                {
                    hashCode = (hashCode * 59) + this.qrCodeUrl.GetHashCode();
                }
                if (this.status != null)
                {
                    hashCode = (hashCode * 59) + this.status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
